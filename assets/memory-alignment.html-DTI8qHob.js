import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as s,e as n,b as e,o as p}from"./app-W4hHVE41.js";const i="/assets/memory-s1-DT1fkih6.png",o="/assets/memory-s2-By68NTpN.png",c={},l=n("blockquote",null,[n("p",null,"合理的排列数据成员的顺序，使得整个结构体的空间占用最小化。")],-1),u=e(`<h2 id="什么是内存对齐" tabindex="-1"><a class="header-anchor" href="#什么是内存对齐"><span>什么是内存对齐</span></a></h2><p>内存对齐是指数据在内存中存储的方式，以优化处理器访问。处理器一次访问一定数量的连续字节（称为“字”），通常为 4 字节或 8 字节。硬件会将内存的读写对齐到数据总线的宽度，从而可以降低硬件实现的复杂度，又可以提升传输的效率。</p><h2 id="为什么有内存对齐" tabindex="-1"><a class="header-anchor" href="#为什么有内存对齐"><span>为什么有内存对齐</span></a></h2><ul><li>有些CPU可以访问任意地址上的任意数据，而有些CPU只能在特定地址访问数据，因此不同硬件平台具有差异性，这样的代码就不具有移植性，如果在编译时，将分配的内存进行对齐，这就具有平台可以移植性了</li><li>CPU每次寻址都是要消费时间的，并且CPU 访问内存时，并不是逐个字节访问，而是以字长（word size）为单位访问，所以数据结构应该尽可能地在自然边界上对齐，如果访问未对齐的内存，处理器需要做两次内存访问，而对齐的内存访问仅需要一次访问，内存对齐后可以提升性能。</li></ul><h2 id="对齐规则" tabindex="-1"><a class="header-anchor" href="#对齐规则"><span>对齐规则</span></a></h2><p>Go语言内存对齐规则参考两方面因素：</p><ul><li>数据类型自身的大小。如果是复合类型，会参考最大成员的大小</li><li>硬件平台机器字长（32位/64位）</li></ul><table><thead><tr><th>类型</th><th>32位平台大小</th><th>32位平台对齐边界</th><th>64位平台大小</th><th>64位平台对齐边界</th></tr></thead><tbody><tr><td>bool</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>int8、uint8</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>int16、uint16</td><td>2</td><td>2</td><td>2</td><td>2</td></tr><tr><td>int32、uint32、float32</td><td>4</td><td>4</td><td>4</td><td>4</td></tr><tr><td>int64、uint64、float64</td><td>8</td><td>4</td><td>8</td><td>8</td></tr><tr><td>int、uint、uintptr</td><td>4</td><td>4</td><td>8</td><td>8</td></tr><tr><td>complex64</td><td>8</td><td>4</td><td>8</td><td>4</td></tr><tr><td>complex128</td><td>16</td><td>4</td><td>16</td><td>8</td></tr><tr><td>string</td><td>8</td><td>4</td><td>16</td><td>8</td></tr><tr><td>slice</td><td>12</td><td>4</td><td>24</td><td>8</td></tr><tr><td>map</td><td>4</td><td>4</td><td>8</td><td>8</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>complex类型由实部和虚部两个float组成，complex64相当于2个float32、complex128相当于2个float64。因此对齐边界参考float类型。</p></div><h2 id="对齐示例" tabindex="-1"><a class="header-anchor" href="#对齐示例"><span>对齐示例</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;unsafe&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> S1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	a <span class="token builtin">int8</span>
	b <span class="token builtin">int64</span>
	c <span class="token builtin">int8</span>
	d <span class="token builtin">int32</span>
	e <span class="token builtin">int16</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> S2 <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	a <span class="token builtin">int8</span>
	c <span class="token builtin">int8</span>
	e <span class="token builtin">int16</span>
	d <span class="token builtin">int32</span>
	b <span class="token builtin">int64</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Size of S1:&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>S1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;bytes&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Size of S2:&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>S2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;bytes&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>S2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>执行结果</summary><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Size of S1: 32 bytes
0 8 16 20 24
Size of S2: 16 bytes
0 1 2 4 8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我们可以发现<code>S1</code>和<code>S2</code>字段包含相同的成员，但是<code>S1</code>占用的内存空间是<code>S2</code>的2倍。</p></div><figure><img src="`+i+'" alt="S1内存布局" tabindex="0" loading="lazy"><figcaption>S1内存布局</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>S1结构体中：</p><ul><li>由于a占1个字节，b占8个字节， 因此a和b之间就会有7字节的填充；</li><li>c占1个字节，d占4个字节， 因此c和d之间就会有3字节的填充；</li><li>e占2个字节，为了对齐8字节，所以又填充6字节；</li></ul></div><figure><img src="'+o+'" alt="S2内存布局" tabindex="0" loading="lazy"><figcaption>S2内存布局</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>S2结构体中：</p><ul><li>a占1个字节，c占1个字节，e占2个字节，d占4个字节，刚好对齐8字节，所以没有任何填充；</li><li>b占8个字节，刚好不需要填充；</li></ul></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://blog.csdn.net/qq_39397165/article/details/119745975" target="_blank" rel="noopener noreferrer">详解内存对齐</a></li></ul>',19);function d(r,k){return p(),a("div",null,[l,s(" more "),u])}const v=t(c,[["render",d],["__file","memory-alignment.html.vue"]]),h=JSON.parse('{"path":"/language/go/advance/memory-alignment.html","title":"Go语言内存对齐","lang":"zh-CN","frontmatter":{"title":"Go语言内存对齐","date":"2024-06-22T00:00:00.000Z","tag":["Go","进阶"],"category":["编程语言"],"description":"合理的排列数据成员的顺序，使得整个结构体的空间占用最小化。","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/language/go/advance/memory-alignment.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"Go语言内存对齐"}],["meta",{"property":"og:description","content":"合理的排列数据成员的顺序，使得整个结构体的空间占用最小化。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-02T03:14:38.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"进阶"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-02T03:14:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go语言内存对齐\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-02T03:14:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"什么是内存对齐","slug":"什么是内存对齐","link":"#什么是内存对齐","children":[]},{"level":2,"title":"为什么有内存对齐","slug":"为什么有内存对齐","link":"#为什么有内存对齐","children":[]},{"level":2,"title":"对齐规则","slug":"对齐规则","link":"#对齐规则","children":[]},{"level":2,"title":"对齐示例","slug":"对齐示例","link":"#对齐示例","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1719148459000,"updatedTime":1722568478000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":2.87,"words":860},"filePathRelative":"language/go/advance/memory-alignment.md","localizedDate":"2024年6月22日","excerpt":"<blockquote>\\n<p>合理的排列数据成员的顺序，使得整个结构体的空间占用最小化。</p>\\n</blockquote>\\n","autoDesc":true}');export{v as comp,h as data};
