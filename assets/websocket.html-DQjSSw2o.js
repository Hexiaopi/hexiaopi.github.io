import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as l,b as t,o as a}from"./app-CFfUv9Xd.js";const n="/assets/websocket-DTH4OHJl.png",o={},c=t('<blockquote><p>WebSocket是为了提供web应用程序和服务端全双工通信而专门定制的一种网络协议，和HTTP协议一样位于OSI模型的应用层协议。</p></blockquote><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><ul><li>建立在TCP协议之上</li><li>与HTTP协议有着良好的兼容性，握手阶段采用HTTP协议，默认端口是80和443</li><li>数据格式比较轻量，性能开销小、通信高效</li><li>可以发送文本，也可以发送二进制数据</li><li>没有同源限制，客户端可以与任意服务器通信</li><li>协议标识符是ws(如果加密，则为wss)，形式：ws://echo.websocket.org</li></ul><h2 id="交互时序" tabindex="-1"><a class="header-anchor" href="#交互时序"><span>交互时序</span></a></h2><figure><img src="'+n+`" alt="websocket" tabindex="0" loading="lazy"><figcaption>websocket</figcaption></figure><h2 id="抓包分析" tabindex="-1"><a class="header-anchor" href="#抓包分析"><span>抓包分析</span></a></h2><h3 id="http请求" tabindex="-1"><a class="header-anchor" href="#http请求"><span>HTTP请求</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>GET /ws hTTP/1.1
Host: localhost:2021
Upgrade: websocket
Connection: Upgrade
Sec-Websocket-Key: mViTimINUhcF0fBHeX+wqA==
Sec-Websocket-Version: 13
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Connection: Upgrade</code>表明要升级协议</li><li><code>Upgrade: websocket</code>表明升级至websocket协议</li><li><code>Sec-Websocket-Key</code>是客户端发送的一个base64编码的秘文，要求服务端返回一个对应加密的<code>Sec-Websocket-Accept</code>应答，否则客户端会抛出“Error during WebSocket handshake”错误，并关闭连接</li><li><code>Sec-Websocket-Version: 13</code>表示 websocket的版本，如果服务端不支持该版本，需要返回一个Sec-Websocket-Version里面包含服务端支持的版本号</li></ul><h3 id="http返回" tabindex="-1"><a class="header-anchor" href="#http返回"><span>HTTP返回</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>HTTP/1.1 101 Switching Protocols
Connection: Upgrade
Upgrade: websocket
Sec-Websocket-Accept: YLcYR/p/mS8hENqlgMXtFTggdv8=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Sec-Websocket-Accept是服务端采用与客户端一致的秘钥计算出来后返回客户端，计算公式</li></ul><blockquote><p>toBase64(sha1(Sec-WebSocket-Key + 258EAFA5-E914-47DA-95CA-C5AB0DC85B11))</p></blockquote><ul><li><code>HTTP/1.1 101 Switching Protocols</code>表示服务端接受WebSocket协议的客户端连接</li></ul><h2 id="数据帧格式" tabindex="-1"><a class="header-anchor" href="#数据帧格式"><span>数据帧格式</span></a></h2><blockquote><p>从左到右，单位是比特。比如<code>FIN</code>、<code>RSV1</code>、<code>RSV2</code>、<code>RSV3</code>各占据1比特，<code>opcode</code>占据4比特</p><p>内容包括了标识、操作代码、掩码、数据长度</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-------+-+-------------+-------------------------------+
 |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
 |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
 |N|V|V|V|       |S|             |   (if payload len==126/127)   |
 | |1|2|3|       |K|             |                               |
 +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
 |     Extended payload length continued, if payload len == 127  |
 + - - - - - - - - - - - - - - - +-------------------------------+
 |                               |Masking-key, if MASK set to 1  |
 +-------------------------------+-------------------------------+
 | Masking-key (continued)       |          Payload Data         |
 +-------------------------------- - - - - - - - - - - - - - - - +
 :                     Payload Data continued ...                :
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 |                     Payload Data continued ...                |
 +---------------------------------------------------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>FIN</code>：1个比特</p><ul><li><p>如果是1：表示这是消息的最后一个分片；</p></li><li><p>如果是0：标识这不是消息的最后一个分片；</p></li></ul></li><li><p><code>RSV1</code>、<code>RSV2</code>、<code>RSV3</code>：各占1个比特</p><ul><li><p>一般情况下全为0，当客户端、服务端协商采用websocket扩展时，这三个标志位可以非0，且值得含义由扩展进行定义；</p></li><li><p>如果出现非零的值，且并没有采用websocket扩展，连接出错</p></li></ul></li><li><p><code>Opcode</code>：4个比特</p><ul><li>%x0：表示一个延续帧。当Opcode为0时，表示本次数据传输采用了数据分片，当前收到的数据帧为其中一个数据分片。</li><li>%x1：表示这是一个文本帧（frame）</li><li>%x2：表示这是一个二进制帧（frame）</li><li>%x3-7：保留的操作代码，用于后续定义的非控制帧。</li><li>%x8：表示连接断开。</li><li>%x9：表示这是一个ping操作。</li><li>%xA：表示这是一个pong操作。</li><li>%xB-F：保留的操作代码，用于后续定义的控制帧。</li></ul></li><li><p><code>Mask</code>：1个比特</p><blockquote><p>表示是否要对数据载荷进行掩码操作</p><ul><li>从客户端向服务端发送数据时，需要对数据进行掩码操作；</li><li>从服务端向客户端发送数据时，不需要对数据进行掩码操作；</li></ul><p>如果服务端接收到的数据没有进行掩码操作，服务端需要断开连接</p><p>如果Mask是1，那么Masking-key中会定义一个掩码键，并用这个掩码键对数据载荷进行反掩码。</p></blockquote></li><li><p><code>Payload length</code>：数据载荷的长度，单位是字节。为7位、或2✖️8位，或8✖️8位</p><ul><li>[0,126)：数据的长度就是Payload length的大小；</li><li>126：后续2个字节为数据的长度；</li><li>127：后续8个字节为数据的长度；</li></ul></li><li><p><code>Masking-key</code>：0或4字节</p><ul><li><code>Mask</code>为1，则包含4字节的<code>Masking-key</code></li><li><code>Mask</code>为0，则不包含<code>Masking-key</code></li></ul></li><li><p><code>Payload data</code>：扩展数据+应用数据</p><ul><li>如果没有协商使用扩展的话，扩展数据为0字节；</li><li>所有的扩展都必须声明扩展数据的长度，扩展如何使用必须在握手阶段就协商好；</li></ul></li></ul><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="http://www.52im.net/thread-831-1-1.html" target="_blank" rel="noopener noreferrer">新手快速入门：WebSocket简明教程</a></p><p><a href="https://www.cnblogs.com/chyingp/p/websocket-deep-in.html" target="_blank" rel="noopener noreferrer">WebSocket协议：5分钟从入门到精通</a></p>`,21);function d(s,r){return a(),i("div",null,[l(" more "),c])}const h=e(o,[["render",d],["__file","websocket.html.vue"]]),b=JSON.parse('{"path":"/network/application-layer/websocket.html","title":"WebSocket协议","lang":"zh-CN","frontmatter":{"title":"WebSocket协议","date":"2023-03-19T00:00:00.000Z","tag":["WebSocket"],"category":["网络"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/network/application-layer/websocket.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"WebSocket协议"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T15:52:14.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"WebSocket"}],["meta",{"property":"article:published_time","content":"2023-03-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-05T15:52:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebSocket协议\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-05T15:52:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"交互时序","slug":"交互时序","link":"#交互时序","children":[]},{"level":2,"title":"抓包分析","slug":"抓包分析","link":"#抓包分析","children":[{"level":3,"title":"HTTP请求","slug":"http请求","link":"#http请求","children":[]},{"level":3,"title":"HTTP返回","slug":"http返回","link":"#http返回","children":[]}]},{"level":2,"title":"数据帧格式","slug":"数据帧格式","link":"#数据帧格式","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1690708801000,"updatedTime":1714924334000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":3.76,"words":1127},"filePathRelative":"network/application-layer/websocket.md","localizedDate":"2023年3月19日","excerpt":""}');export{h as comp,b as data};
