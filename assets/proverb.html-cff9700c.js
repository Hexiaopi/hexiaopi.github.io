import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as s,c as p,a as e,b as r,d as o,e as i}from"./app-fc6f1344.js";const c={},l={href:"http://go-proverbs.github.io/",target:"_blank",rel:"noopener noreferrer"},h=i('<blockquote><p>Go 语言之父 Rob Pike 在 2015 年分享的主题《Go Proverbs》</p><p>核心理念是：简单、诗意、简洁（Simple, Poetic, Pithy）。</p></blockquote><h2 id="译文" tabindex="-1"><a class="header-anchor" href="#译文" aria-hidden="true">#</a> 译文</h2><p>Don&#39;t communicate by sharing memory, share memory by communicating.<br> 不要通过共享内存进行通信，通过通信共享内存</p><p>Concurrency is not parallelism.<br> 并发不是并行</p><p>Channels orchestrate; mutexes serialize.<br> 管道用于协调；互斥锁用于同步</p><p>The bigger the interface, the weaker the abstraction.<br> 接口越大，抽象就越弱</p><p>Make the zero value useful.<br> 利用好零值</p><p>interface{} says nothing.<br> 空接口 interface{} 没有任何类型约束</p><p>Gofmt&#39;s style is no one&#39;s favorite, yet gofmt is everyone&#39;s favorite.<br> Gofmt 的风格不是人们最喜欢的，但 gofmt 是每个人的最爱</p><p>A little copying is better than a little dependency.<br> 允许一点点重复比引入一点点依赖更好</p><p>Syscall must always be guarded with build tags.<br> 系统调用必须始终使用构建标记进行保护</p><p>Cgo must always be guarded with build tags.<br> 必须始终使用构建标记保护 Cgo</p><p>Cgo is not Go.<br> Cgo 不是 Go。</p><p>With the unsafe package there are no guarantees.<br> 使用标准库的 unsafe 包，不能保证能如期运行</p><p>Clear is better than clever.<br> 清晰比聪明更好</p><p>Reflection is never clear.<br> 反射永远不清晰</p><p>Errors are values.<br> 错误是值</p><p>Don&#39;t just check errors, handle them gracefully.<br> 不要只检查错误，还要优雅地处理它们</p><p>Design the architecture, name the components, document the details.<br> 设计架构，命名组件，文档记录细节</p><p>Documentation is for users.<br> 文档是供用户使用的</p><p>Don&#39;t panic.<br> 不要使用 panic</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>',22),b={href:"http://go-proverbs.github.io/",target:"_blank",rel:"noopener noreferrer"},u=e("br",null,null,-1),d={href:"https://zhuanlan.zhihu.com/p/514680942",target:"_blank",rel:"noopener noreferrer"};function m(f,g){const t=n("ExternalLinkIcon");return s(),p("div",null,[e("p",null,[r("【转】"),e("a",l,[r("原文链接"),o(t)])]),h,e("p",null,[e("a",b,[r("原文链接"),o(t)]),u,e("a",d,[r("中文译文"),o(t)])])])}const v=a(c,[["render",m],["__file","proverb.html.vue"]]);export{v as default};
