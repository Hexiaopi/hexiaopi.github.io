const t=JSON.parse('{"key":"v-f87ed9fc","path":"/design-pattern/function/option.html","title":"选项模式","lang":"zh-CN","frontmatter":{"title":"选项模式","date":"2023-08-06T00:00:00.000Z","tag":["Go","函数模式"],"category":["设计模式"],"description":"提示 由于Go语言不支持重载函数，当我们需要使用不同的方式构建对象时，不得不使用多个构造函数进行初始化。 对于多参数的类的初始化遇到哪些困境？ 例如：HTTP Server的初始化 type Server struct { \\tAddr string \\tPort int \\tProtocol string \\tTimeout time.Duration \\tMaxConns int \\tTLS *tls.Config }","head":[["meta",{"property":"og:url","content":"https://Hexiaopi.github.io/design-pattern/function/option.html"}],["meta",{"property":"og:site_name","content":"Hexiaopi"}],["meta",{"property":"og:title","content":"选项模式"}],["meta",{"property":"og:description","content":"提示 由于Go语言不支持重载函数，当我们需要使用不同的方式构建对象时，不得不使用多个构造函数进行初始化。 对于多参数的类的初始化遇到哪些困境？ 例如：HTTP Server的初始化 type Server struct { \\tAddr string \\tPort int \\tProtocol string \\tTimeout time.Duration \\tMaxConns int \\tTLS *tls.Config }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-06T08:10:45.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"函数模式"}],["meta",{"property":"article:published_time","content":"2023-08-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-06T08:10:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"选项模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-06T08:10:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"对于多参数的类的初始化遇到哪些困境？","slug":"对于多参数的类的初始化遇到哪些困境","link":"#对于多参数的类的初始化遇到哪些困境","children":[]},{"level":2,"title":"那么Option(选项模式)是如何解决这个问题的呢？","slug":"那么option-选项模式-是如何解决这个问题的呢","link":"#那么option-选项模式-是如何解决这个问题的呢","children":[{"level":3,"title":"首先：定义一个Option函数，参数为Server指针","slug":"首先-定义一个option函数-参数为server指针","link":"#首先-定义一个option函数-参数为server指针","children":[]},{"level":3,"title":"其次：定义各种初始化选项函数，通常返回上文定义的Option","slug":"其次-定义各种初始化选项函数-通常返回上文定义的option","link":"#其次-定义各种初始化选项函数-通常返回上文定义的option","children":[]},{"level":3,"title":"通常：我们定义一个全局的初始化函数，使用Go语言可变参数Option","slug":"通常-我们定义一个全局的初始化函数-使用go语言可变参数option","link":"#通常-我们定义一个全局的初始化函数-使用go语言可变参数option","children":[]},{"level":3,"title":"最后，我们看看最终效果","slug":"最后-我们看看最终效果","link":"#最后-我们看看最终效果","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1690708801000,"updatedTime":1691309445000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":2.31,"words":692},"filePathRelative":"design-pattern/function/option.md","localizedDate":"2023年8月6日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>由于Go语言不支持重载函数，当我们需要使用不同的方式构建对象时，不得不使用多个构造函数进行初始化。</p>\\n</div>\\n<h2> 对于多参数的类的初始化遇到哪些困境？</h2>\\n<p>例如：HTTP Server的初始化</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> Server <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tAddr     <span class=\\"token builtin\\">string</span>\\n\\tPort     <span class=\\"token builtin\\">int</span>\\n\\tProtocol <span class=\\"token builtin\\">string</span>\\n\\tTimeout  time<span class=\\"token punctuation\\">.</span>Duration\\n\\tMaxConns <span class=\\"token builtin\\">int</span>\\n\\tTLS      <span class=\\"token operator\\">*</span>tls<span class=\\"token punctuation\\">.</span>Config\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
