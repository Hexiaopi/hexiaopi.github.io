import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,a as e,b as n,f as p}from"./app-Ccs1pleS.js";const o="/assets/prototype-DNDrAcWs.png",i={},l=n("figure",null,[n("img",{src:"https://refactoringguru.cn/images/patterns/content/prototype/prototype-2x.png",alt:"prototype",tabindex:"0",loading:"lazy"}),n("figcaption",null,"prototype")],-1),c=p('<p>原型模式(Prototype Pattern)用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。它的核心思想是通过复制一个已经存在的<strong>对象</strong>来创建新的<strong>对象</strong>，而不是通过调用构造函数或者其他初始化方法。这样可以避免一些复杂的或者耗时的对象创建过程，提高程序的效率和灵活性。</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>当程序中需要大量对象，创建这些对象将导致占用大量的内存，非常耗时。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><h3 id="角色" tabindex="-1"><a class="header-anchor" href="#角色"><span>角色</span></a></h3><figure><img src="'+o+`" alt="prototype" tabindex="0" loading="lazy"><figcaption>prototype</figcaption></figure><ul><li><p>Prototype：抽象原型</p><p>抽象原型规定了clone()接口来复制新的对象</p></li><li><p>ConcretePrototype：具体原型</p><p>具体原型实现抽象原型的clone()方法，是可被复制的对象</p></li></ul><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> prototype

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> inode <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
	<span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> inode
<span class="token punctuation">}</span>

<span class="token keyword">type</span> file <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>file<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>indentation <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>indentation <span class="token operator">+</span> f<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>file<span class="token punctuation">)</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> inode <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>file<span class="token punctuation">{</span>name<span class="token punctuation">:</span> f<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;_clone&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> folder <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	children <span class="token punctuation">[</span><span class="token punctuation">]</span>inode
	name     <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>folder<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>indentation <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>indentation <span class="token operator">+</span> f<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> f<span class="token punctuation">.</span>children <span class="token punctuation">{</span>
		i<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>indentation <span class="token operator">+</span> indentation<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>folder<span class="token punctuation">)</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> inode <span class="token punctuation">{</span>
	cloneFolder <span class="token operator">:=</span> <span class="token operator">&amp;</span>folder<span class="token punctuation">{</span>name<span class="token punctuation">:</span> f<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;_clone&quot;</span><span class="token punctuation">}</span>
	<span class="token keyword">var</span> tempChildren <span class="token punctuation">[</span><span class="token punctuation">]</span>inode
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> f<span class="token punctuation">.</span>children <span class="token punctuation">{</span>
		<span class="token builtin">copy</span> <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		tempChildren <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tempChildren<span class="token punctuation">,</span> <span class="token builtin">copy</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	cloneFolder<span class="token punctuation">.</span>children <span class="token operator">=</span> tempChildren
	<span class="token keyword">return</span> cloneFolder
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> prototype

<span class="token keyword">func</span> <span class="token function">ExampleFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	file1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>file<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;file1&quot;</span><span class="token punctuation">}</span>
	cloneFile <span class="token operator">:=</span> file1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cloneFile<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;example_&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// example_file1_clone</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">ExampleFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	file1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>file<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;file1&quot;</span><span class="token punctuation">}</span>
	file2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>file<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;file2&quot;</span><span class="token punctuation">}</span>
	file3 <span class="token operator">:=</span> <span class="token operator">&amp;</span>file<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;file3&quot;</span><span class="token punctuation">}</span>
	folder1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>folder<span class="token punctuation">{</span>
		name<span class="token punctuation">:</span>     <span class="token string">&quot;folder1&quot;</span><span class="token punctuation">,</span>
		children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>inode<span class="token punctuation">{</span>file1<span class="token punctuation">,</span> file2<span class="token punctuation">,</span> file3<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	cloneFolder <span class="token operator">:=</span> folder1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	cloneFolder<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;example_&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// example_folder1_clone</span>
	<span class="token comment">// example_example_file1_clone</span>
	<span class="token comment">// example_example_file2_clone</span>
	<span class="token comment">// example_example_file3_clone</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h2><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ul><li>当对象创建过程很复杂或者很耗时时，可以通过复制一个已经存在的对象来简化和加快对象创建过程。</li><li>当需要生成大量相同或者相似的对象时，可以通过复制一个原型对象来减少内存消耗和提高性能。</li><li>当需要根据不同的需求和环境来动态地生成对象时，可以通过选择不同的原型对象来实现多态性和灵活性。</li></ul><p>例如：</p><p>游戏中的子弹，通常数量规模很大，通过原型设计模式可以复制已经创建好的字段对象，这样可以节省内存和性能。</p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ul><li>可以避免重复的对象创建过程，节省时间和资源。</li><li>可以动态地生成对象，根据不同的需求和环境来选择合适的原型。</li><li>可以隐藏对象创建的细节，降低代码的耦合度和依赖性。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ul><li>需要实现克隆方法，可能会增加代码的复杂度和维护成本。</li><li>需要注意深拷贝和浅拷贝的区别，避免出现意外的副作用和错误。</li><li>需要保证原型对象的稳定性和安全性，避免被修改或者破坏。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>原型设计模式是一种创建型设计模式，它通过复制一个已经存在的对象来创建新的对象，而不是通过调用构造函数或者其他初始化方法。 在Go语言中，我们还需要注意深拷贝和浅拷贝的区别： 深拷贝是指完全复制一个对象及其所有关联的对象，使得新对象和旧对象完全独立。 浅拷贝是指只复制一个对象本身，而不复制其关联的对象，使得新对象和旧对象共享部分数据。</p>`,23);function u(r,d){return a(),t("div",null,[l,e(" more "),c])}const v=s(i,[["render",u],["__file","prototype.html.vue"]]),f=JSON.parse('{"path":"/design-pattern/creational/prototype.html","title":"原型","lang":"zh-CN","frontmatter":{"title":"原型","date":"2022-10-16T00:00:00.000Z","tag":["Go","创建型模式"],"category":["设计模式"],"description":"prototypeprototype","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/design-pattern/creational/prototype.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"原型"}],["meta",{"property":"og:description","content":"prototypeprototype"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoringguru.cn/images/patterns/content/prototype/prototype-2x.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T04:05:01.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:published_time","content":"2022-10-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T04:05:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型\\",\\"image\\":[\\"https://refactoringguru.cn/images/patterns/content/prototype/prototype-2x.png\\"],\\"datePublished\\":\\"2022-10-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-05T04:05:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[{"level":3,"title":"角色","slug":"角色","link":"#角色","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]}]},{"level":2,"title":"效果","slug":"效果","link":"#效果","children":[{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1690708801000,"updatedTime":1693886701000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":3}]},"readingTime":{"minutes":2.94,"words":883},"filePathRelative":"design-pattern/creational/prototype.md","localizedDate":"2022年10月16日","excerpt":"<figure><img src=\\"https://refactoringguru.cn/images/patterns/content/prototype/prototype-2x.png\\" alt=\\"prototype\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>prototype</figcaption></figure>\\n","autoDesc":true}');export{v as comp,f as data};
