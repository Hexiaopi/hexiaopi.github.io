import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,f as u,a as n,b as s,d as t,e as a}from"./app-D1l5B5F7.js";const r="/assets/map-Dxd0rjUm.png",d="/assets/map-memory-9Fu6cfwo.png",k="/assets/map-expand-DA77CWam.png",m={},v=n("figure",null,[n("img",{src:"http://cdn.cjhe.top/blog/map.png",alt:"map",tabindex:"0",loading:"lazy"}),n("figcaption",null,"map")],-1),b=a(`<blockquote><p>map是Go语言提供的一种抽象数据类型，它表示一组无序的键值对(key-value)</p></blockquote><h2 id="声明" tabindex="-1"><a class="header-anchor" href="#声明"><span>声明</span></a></h2><p><strong>关键字定义</strong>：<code>map</code></p><p><strong>零值</strong>：<code>nil</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>map对于<code>value</code>的类型没有限制，但是对<code>key</code>的类型有严格的要求： <code>key</code>的类型必须支持<code>==</code>和<code>!=</code>两个操作符的数据类型 因此，函数、map、切片等不能作为<code>key</code>类型。</p></div><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p>字面量初始化</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>m<span class="token operator">:=</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>内置函数make()初始化</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>m<span class="token operator">:=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	m<span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>       <span class="token comment">//新增</span>
	m<span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>       <span class="token comment">//修改</span>
	<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//删除</span>
	v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">]</span> <span class="token comment">//comma ok 查询</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//获取key的个数</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span> <span class="token comment">//遍历m</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>向<code>nil</code>（未初始化）的map类型里添加数据会导致<code>panic</code></p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>删除不存在的key不会导致panic；</li><li>查询不存在的key，如果未使用<strong>comma ok</strong>语法，则会返回value类型对应的<strong>零值</strong></li></ul></div><h2 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理"><span>底层原理</span></a></h2><p>参见<code>$GOROOT/src/runtime/map.go</code></p><h3 id="map的数据结构" tabindex="-1"><a class="header-anchor" href="#map的数据结构"><span>map的数据结构</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	count      <span class="token builtin">int</span>            <span class="token comment">//当前保存的元素个数</span>
	flags      <span class="token builtin">uint8</span>          <span class="token comment">//当前map所处的状态标志</span>
	B          <span class="token builtin">uint8</span>          <span class="token comment">//bucket数组的大小的对数：2^B=bucket数量</span>
	noverflow  <span class="token builtin">uint16</span>         <span class="token comment">//overflow buckets的大约数量</span>
	hash0      <span class="token builtin">uint32</span>         <span class="token comment">//hash函数的种子值</span>
	buckets    unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//指向bucket数组的指针</span>
	oldbuckets unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">//在map扩容阶段指向前一个bucket数组的指针</span>
	nevacuate  <span class="token builtin">uintptr</span>        <span class="token comment">//map扩容阶段充当扩容进度计数器,小于此bucket都已完成了数据排空和迁移操作</span>
	extra      <span class="token operator">*</span>mapextra      <span class="token comment">//可选字段，与gc相关</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bucket的数据结构" tabindex="-1"><a class="header-anchor" href="#bucket的数据结构"><span>bucket的数据结构</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// a bucket for a Go map</span>
<span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	tophash <span class="token punctuation">[</span>bucketCnt<span class="token punctuation">]</span><span class="token builtin">uint8</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实际上编辑期间会动态生产一个新的结构体</span>
<span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	tophash  <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
	keys     <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>keytype
	values   <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>valuetype
	overflow <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="map" tabindex="0" loading="lazy"><figcaption>map</figcaption></figure><p>key和value分开存储，目的是为了减少内存对齐带来的内存浪费，以map[int8]int64为例：</p><figure><img src="'+d+'" alt="map-memory" tabindex="0" loading="lazy"><figcaption>map-memory</figcaption></figure><p>每个bucket可以存储8个键值对，超过就会创建一个新的bucket，通过overflow链接</p><p>当有两个或以上数量的键被<code>Hash</code>到了同一个bucket时，我们称这些键发生了冲突，Go语言使用链表解决键冲突。</p><p>hash冲突并不是好事情，它降低了存取效率，好的Hash算法可以保证Hash值得随机性，但无论使用哪种Hash算法，冲突终究不可避免，当冲突较多的时候就需要采取一些措施来减少冲突。</p><h3 id="负载因子loadfactor" tabindex="-1"><a class="header-anchor" href="#负载因子loadfactor"><span>负载因子LoadFactor</span></a></h3><blockquote><p>负载因子用于衡量一个Hash表的冲突情况，计算公式如下：</p><p>负载因子 = 键数量 / bucket数量</p></blockquote><ul><li>负载因子过小，空间利用率低；</li><li>负载因子过大，说明冲突严重，存取效率低；</li></ul><p>当Hash表的负载因子过大时需要rehash，即申请更多的bucket，并对所有的键值对重新组织，使其均匀的分布在这些bucket中。</p><ul><li>redis的负载因子大于1时就会触发rehash，因为redis的每个bucket只能存1个键值对；</li><li>go的负载因子大于6.5时才会触发rehash，因为go的每个bucket可以存8个键值对；</li></ul><h3 id="扩容" tabindex="-1"><a class="header-anchor" href="#扩容"><span>扩容</span></a></h3><p>条件：</p><ul><li>负载因子大于6.5时</li><li>overflow的数量大于2^15=32768</li></ul>',35),h={href:"https://eddycjy.com/posts/go/map-reset/",target:"_blank",rel:"noopener noreferrer"},g=a('<h4 id="增量扩容" tabindex="-1"><a class="header-anchor" href="#增量扩容"><span>增量扩容</span></a></h4><blockquote><p>通过将bucket数组扩大一倍实现，并搬迁键值对</p></blockquote><ol><li>oldbuckets指向现有bucket数组；</li><li>创建一个两倍现有规模的bucket数组；</li><li>buckets指向新的bucket数组；</li><li>将oldbuckets的键值对搬迁到新的bucket数组；</li><li>释放oldbuckets；</li></ol><figure><img src="'+k+`" alt="map-expand" tabindex="0" loading="lazy"><figcaption>map-expand</figcaption></figure><h4 id="等量扩容" tabindex="-1"><a class="header-anchor" href="#等量扩容"><span>等量扩容</span></a></h4><blockquote><p>用于解决一个bucket链接很多bucket，overflow数量过高</p><p>bucket数组大小不变，重新排列键值对，分散到不同的bucket数组中</p><p>这样就提高了访问效率</p></blockquote><h3 id="增删改查" tabindex="-1"><a class="header-anchor" href="#增删改查"><span>增删改查</span></a></h3><h4 id="查找过程" tabindex="-1"><a class="header-anchor" href="#查找过程"><span>查找过程</span></a></h4><ul><li>根据key计算hash值；</li><li>取hash值低位与hmap.B取模来确定bucket的位置；</li><li>取hash值高位，在tophash数组中查询；</li><li>如果tophash[i]中存储的hash值与当前key的hash值相等，则获取tophash[i]的key值进行比较；</li><li>当前bucket没有找到，则依次从溢出的bucket中查找；</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果当前map处于搬迁过程中，那么查找时从oldbuckets数组中查找，不再从新的buckets数组中查找</p></div><h4 id="添加过程" tabindex="-1"><a class="header-anchor" href="#添加过程"><span>添加过程</span></a></h4><ul><li>根据key计算hash值；</li><li>取hash值低位与hmap.B取模来确定bucket的位置；</li><li>查找该key是否存在 <ul><li>如果存在，则直接更新；</li><li>如果不存在，则从该bucket中寻找空余位置并插入；</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果当前map处于搬迁过程中，那么直接添加到新的buckets数组中</p></div><h4 id="删除过程" tabindex="-1"><a class="header-anchor" href="#删除过程"><span>删除过程</span></a></h4><ul><li>查找key是否存在 <ul><li>存在，则删除；</li><li>不存在，则什么也不做；</li></ul></li></ul><h2 id="map注意事项" tabindex="-1"><a class="header-anchor" href="#map注意事项"><span>map注意事项</span></a></h2><h3 id="map的value是struct自定义类型-无法通过索引的方式直接修改" tabindex="-1"><a class="header-anchor" href="#map的value是struct自定义类型-无法通过索引的方式直接修改"><span>map的value是struct自定义类型，无法通过索引的方式直接修改</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">MapDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		name <span class="token builtin">string</span>
		age  <span class="token builtin">int</span>
	<span class="token punctuation">}</span>
	ma <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span>User<span class="token punctuation">)</span>
	andes <span class="token operator">:=</span> User<span class="token punctuation">{</span>
		name<span class="token punctuation">:</span> <span class="token string">&quot;andes&quot;</span><span class="token punctuation">,</span>
		age<span class="token punctuation">:</span>  <span class="token number">18</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	ma<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> andes
	<span class="token comment">//ma[1].age = 19</span>
	andes<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>
	ma<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> andes
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),f={class:"hint-container warning"},y=n("p",{class:"hint-container-title"},"注意",-1),w={href:"https://pkg.go.dev/golang.org/x/tools/internal/typesinternal#UnaddressableFieldAssign",target:"_blank",rel:"noopener noreferrer"},x=a(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>	// UnaddressableFieldAssign occurs when trying to assign to a struct field
	// in a map value.
	//
	// Example:
	//  func f() {
	//  	m := make(map[string]struct{i int})
	//  	m[&quot;foo&quot;].i = 42
	//  }
	UnaddressableFieldAssign
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=a(`<h3 id="非并发读写安全的" tabindex="-1"><a class="header-anchor" href="#非并发读写安全的"><span>非并发读写安全的</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">doIteration</span><span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>
		<span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;[%d, %d] &quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">doWrite</span><span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>
		m<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token operator">+</span> <span class="token number">1</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>
		<span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
		<span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
		<span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token function">doIteration</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token function">doWrite</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行报错：<code>fatal error: concurrent map iteration and map write</code></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Go 在 map 的实现中增加了读写检查机制，一旦发现读写冲突立即触发 panic</p><p>如果想使用并发的map：</p><ul><li>可以使用Go 1.9版本中引入支持并发写安全的<code>sync.Map</code>类型；</li><li>可以使用map时增加锁；</li></ul></div><h3 id="无法通过索引直接获取value的地址" tabindex="-1"><a class="header-anchor" href="#无法通过索引直接获取value的地址"><span>无法通过索引直接获取value的地址</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> Num <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	id <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span>Num<span class="token punctuation">)</span>
	m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Num<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>
	value <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//invalid operation: cannot take address of m[0] (map index expression of type Num)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这是由于map会扩容，map中的数据元素的value地址可能在扩容过程中发生变化，因此获取这个地址没有意义，Go语言为了防止出现该问题，在编译期间就检测是否有获取地址行为，避免出现问题。</p></div><h3 id="尽量使用cap参数初始化map" tabindex="-1"><a class="header-anchor" href="#尽量使用cap参数初始化map"><span>尽量使用cap参数初始化map</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;testing&quot;</span>

<span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token number">10000</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkMapInitWithoutCap</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkMapInitWithCap</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>性能基准测试结果如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>go test -benchmem -bench=. cap_benchmark_test.go           
goos: darwin
goarch: amd64
cpu: Intel(R) Core(TM) i5-8259U CPU @ 2.30GHz
BenchmarkMapInitWithoutCap-8        1226           1338887 ns/op          687175 B/op        276 allocs/op
BenchmarkMapInitWithCap-8           2534            425859 ns/op          322225 B/op         11 allocs/op
PASS
ok      command-line-arguments  5.939s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function q(B,N){const i=p("Badge"),e=p("ExternalLinkIcon");return c(),l("div",null,[v,u(" more "),b,n("p",null,[s("map的扩缩容的主要区别在于hmap.B的容量大小改变，而缩容由于hmap.B压根不变，内存占用依然存在。这就导致在删除元素时，并不会释放内存，使得分配的总内存不断增加，如果不注意，内存就很容易爆了。"),t(i,{text:"注意",type:"warning"}),n("a",h,[s("Go map 如何缩容？"),t(e)])]),g,n("div",f,[y,n("p",null,[s("12行，如果通过索引的方式直接修改，编辑器会报错："),n("a",w,[s("UnaddressableFieldAssign"),t(e)]),s("，并且官网也给了详细的说明：")]),x]),_])}const C=o(m,[["render",q],["__file","map.html.vue"]]),G=JSON.parse('{"path":"/go-language/base/map.html","title":"散列map","lang":"zh-CN","frontmatter":{"title":"散列map","date":"2023-02-06T00:00:00.000Z","tag":["Go","基础"],"category":["Go语言"],"description":"mapmap","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/go-language/base/map.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"散列map"}],["meta",{"property":"og:description","content":"mapmap"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.cjhe.top/blog/map.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-01T06:18:50.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:published_time","content":"2023-02-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-01T06:18:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"散列map\\",\\"image\\":[\\"http://cdn.cjhe.top/blog/map.png\\"],\\"datePublished\\":\\"2023-02-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-01T06:18:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"声明","slug":"声明","link":"#声明","children":[]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"底层原理","slug":"底层原理","link":"#底层原理","children":[{"level":3,"title":"map的数据结构","slug":"map的数据结构","link":"#map的数据结构","children":[]},{"level":3,"title":"bucket的数据结构","slug":"bucket的数据结构","link":"#bucket的数据结构","children":[]},{"level":3,"title":"负载因子LoadFactor","slug":"负载因子loadfactor","link":"#负载因子loadfactor","children":[]},{"level":3,"title":"扩容","slug":"扩容","link":"#扩容","children":[]},{"level":3,"title":"增删改查","slug":"增删改查","link":"#增删改查","children":[]}]},{"level":2,"title":"map注意事项","slug":"map注意事项","link":"#map注意事项","children":[{"level":3,"title":"map的value是struct自定义类型，无法通过索引的方式直接修改","slug":"map的value是struct自定义类型-无法通过索引的方式直接修改","link":"#map的value是struct自定义类型-无法通过索引的方式直接修改","children":[]},{"level":3,"title":"非并发读写安全的","slug":"非并发读写安全的","link":"#非并发读写安全的","children":[]},{"level":3,"title":"无法通过索引直接获取value的地址","slug":"无法通过索引直接获取value的地址","link":"#无法通过索引直接获取value的地址","children":[]},{"level":3,"title":"尽量使用cap参数初始化map","slug":"尽量使用cap参数初始化map","link":"#尽量使用cap参数初始化map","children":[]}]}],"git":{"createdTime":1690708801000,"updatedTime":1711952330000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":2},{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":6.33,"words":1899},"filePathRelative":"go-language/base/map.md","localizedDate":"2023年2月6日","excerpt":"<figure><img src=\\"http://cdn.cjhe.top/blog/map.png\\" alt=\\"map\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>map</figcaption></figure>\\n","autoDesc":true}');export{C as comp,G as data};
