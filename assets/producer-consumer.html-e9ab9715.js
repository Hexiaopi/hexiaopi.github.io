import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-96934de4.js";const t="/assets/producer-consumer-8d25dc52.png",p={},o=e('<p><strong>生产者/消费者</strong>模式是并发编程中常见的模型，该模型主要通过平衡生产者和消费者来提高程序的整体处理数据的能力</p><h2 id="生产者-消费者模式" tabindex="-1"><a class="header-anchor" href="#生产者-消费者模式" aria-hidden="true">#</a> 生产者/消费者模式</h2><p>该模型中：生产者生产数据，放到队列中，消费者从队列中取数据。这样生产者和消费者变成异步的两个过程。</p><figure><img src="'+t+`" alt="producer-consumer" tabindex="0" loading="lazy"><figcaption>producer-consumer</figcaption></figure><p>定义生产者</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Producer: 生产factor倍数</span>
<span class="token keyword">func</span> <span class="token function">Producer</span><span class="token punctuation">(</span>factor <span class="token builtin">int</span><span class="token punctuation">,</span> out <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		out <span class="token operator">&lt;-</span> i <span class="token operator">*</span> factor
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义消费者</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Consumer: 消费打印队列</span>
<span class="token keyword">func</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>in <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> in <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动生产者和消费者模型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Producer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Producer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们启动：</p><ul><li>两个生产者，分别生产3的倍数、5的倍数</li><li>一个消费者，打印队列中的数据</li></ul>`,12),c=[o];function i(l,u){return s(),a("div",null,c)}const k=n(p,[["render",i],["__file","producer-consumer.html.vue"]]);export{k as default};
