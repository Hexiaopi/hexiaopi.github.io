import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,f as e,a as n,e as p}from"./app-94395bf6.js";const i="/assets/flyweight-2604a67d.png",c={},o=n("figure",null,[n("img",{src:"https://refactoringguru.cn/images/patterns/content/flyweight/flyweight-zh-2x.png",alt:"flyweight",tabindex:"0",loading:"lazy"}),n("figcaption",null,"flyweight")],-1),l=p('<h2 id="什么是享元模式" tabindex="-1"><a class="header-anchor" href="#什么是享元模式" aria-hidden="true">#</a> 什么是享元模式</h2><p>享元模式（Flyweight Pattern）：有效地支持大量细粒度对象的复用,通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似类的开销，从而提高系统资源的利用率。</p><p>享元对象能做到共享的关键是区分：内蕴状态（Internal State）和外蕴状态（External State），内蕴状态是存储在享元对象内部，并且不会随环境改变而改变，因此可以共享，外蕴状态是随着环境改变而改变，因此不可以共享。</p><h3 id="包含哪些角色" tabindex="-1"><a class="header-anchor" href="#包含哪些角色" aria-hidden="true">#</a> 包含哪些角色</h3><figure><img src="'+i+`" alt="flyweight" tabindex="0" loading="lazy"><figcaption>flyweight</figcaption></figure><ul><li><p>Flyweight: 享元接口</p><p>所有元件的高层规范，声明与外蕴状态互动的接口标准</p></li><li><p>ConcreteFlyweight: 享元实现类</p><p>自身维护着内蕴状态，且能接受并相应外蕴状态，可以有多个实现。一个享元对象可以被称作一个<strong>元</strong>。</p></li><li><p>UnsharedFlyweight: 非享元角色</p><p>是不可以共享的外部状态，它以参数的形式注入具体享元的相关方法中</p></li><li><p>FlyweightFactory: 享元工厂</p><p>用来维护享元对象的工厂，负责对享元对象实例进行创建于管理，并对外提供获取享元对象的服务。</p></li><li><p>Client: 客户端</p><p>享元的使用者，负责维护外蕴状态。</p></li></ul><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> flyweight

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> UnsharedFlyweight <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ExternalState <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ConcreteFlyweight <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	InternalState <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>concrete ConcreteFlyweight<span class="token punctuation">)</span> <span class="token function">execute</span><span class="token punctuation">(</span>unshared UnsharedFlyweight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>concrete<span class="token punctuation">.</span>InternalState<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unshared<span class="token punctuation">.</span>ExternalState<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Flyweight <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">execute</span><span class="token punctuation">(</span>unshared UnsharedFlyweight<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> FlyweightFactory <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	flyweights <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Flyweight
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>factory FlyweightFactory<span class="token punctuation">)</span> <span class="token function">GetFlyweight</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> Flyweight <span class="token punctuation">{</span>
	<span class="token keyword">if</span> flyweight<span class="token punctuation">,</span> ok <span class="token operator">:=</span> factory<span class="token punctuation">.</span>flyweights<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> flyweight
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> flyweight

<span class="token keyword">func</span> <span class="token function">ExampleFlyweight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	factory <span class="token operator">:=</span> FlyweightFactory<span class="token punctuation">{</span>flyweights<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Flyweight<span class="token punctuation">{</span>
		<span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span> ConcreteFlyweight<span class="token punctuation">{</span>InternalState<span class="token punctuation">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span> ConcreteFlyweight<span class="token punctuation">{</span>InternalState<span class="token punctuation">:</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span> ConcreteFlyweight<span class="token punctuation">{</span>InternalState<span class="token punctuation">:</span> <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">}</span>
	a <span class="token operator">:=</span> factory<span class="token punctuation">.</span><span class="token function">GetFlyweight</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
	a<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>UnsharedFlyweight<span class="token punctuation">{</span>ExternalState<span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	b <span class="token operator">:=</span> factory<span class="token punctuation">.</span><span class="token function">GetFlyweight</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>UnsharedFlyweight<span class="token punctuation">{</span>ExternalState<span class="token punctuation">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	c <span class="token operator">:=</span> factory<span class="token punctuation">.</span><span class="token function">GetFlyweight</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>UnsharedFlyweight<span class="token punctuation">{</span>ExternalState<span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// a</span>
	<span class="token comment">// 1</span>
	<span class="token comment">// bb</span>
	<span class="token comment">// 2</span>
	<span class="token comment">// ccc</span>
	<span class="token comment">// 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>享元模式只是一种优化。在应用该模式之前，你要确定程序中存在与大量类似对象同时占用内存相关的内存消耗问题，并且确保该问题无法使用其他更好的方式来解决。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ul><li>享元模式的优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份。</li><li>享元模式的外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>增加系统复杂性。享元模式需要维护共享对象的状态，增加了代码的复杂度，同时也增加了系统的维护难度。</li><li>内部状态和外部状态的区分。享元模式需要区分内部状态和外部状态，内部状态可以被共享，但外部状态必须通过参数传递，增加了对象的可定制性，但也增加了系统的复杂度。</li></ul>`,16);function u(r,d){return a(),t("div",null,[o,e(" more "),l])}const h=s(c,[["render",u],["__file","flyweight.html.vue"]]);export{h as default};
