const e=JSON.parse('{"key":"v-6fb9fd50","path":"/design-pattern/creational/","title":"创建型模式","lang":"zh-CN","frontmatter":{"title":"创建型模式","date":"2023-07-31T00:00:00.000Z","tag":["Go","创建型模式"],"category":["设计模式"],"description":"创建型设计模式是一种常用的设计模式，关注对象的创建和实例化，包括：如何实例化对象、如何组织对象的创建流程等，旨在解决对象的创建问题，以便更加灵活地创建对象并将对象与使用它们的代码分离。 模式之间的区别 相同点 目标：创建型设计模式的主要目标是将对象的创建和使用分离，提供一种灵活的方式来创建对象。 抽象：这些模式通常通过引入抽象层来隐藏对象创建的细节，使得客户端代码更加简洁和可维护。 重用：创建型设计模式鼓励代码的重用，通过提供灵活的创建方式来满足不同的需求。","head":[["meta",{"property":"og:url","content":"https://Hexiaopi.github.io/design-pattern/creational/"}],["meta",{"property":"og:site_name","content":"Hexiaopi"}],["meta",{"property":"og:title","content":"创建型模式"}],["meta",{"property":"og:description","content":"创建型设计模式是一种常用的设计模式，关注对象的创建和实例化，包括：如何实例化对象、如何组织对象的创建流程等，旨在解决对象的创建问题，以便更加灵活地创建对象并将对象与使用它们的代码分离。 模式之间的区别 相同点 目标：创建型设计模式的主要目标是将对象的创建和使用分离，提供一种灵活的方式来创建对象。 抽象：这些模式通常通过引入抽象层来隐藏对象创建的细节，使得客户端代码更加简洁和可维护。 重用：创建型设计模式鼓励代码的重用，通过提供灵活的创建方式来满足不同的需求。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T04:05:01.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T04:05:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创建型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-05T04:05:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"模式之间的区别","slug":"模式之间的区别","link":"#模式之间的区别","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]}],"git":{"createdTime":1690708801000,"updatedTime":1693886701000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":3}]},"readingTime":{"minutes":1.52,"words":456},"filePathRelative":"design-pattern/creational/README.md","localizedDate":"2023年7月31日","excerpt":"<blockquote>\\n<p>创建型设计模式是一种常用的设计模式，关注对象的创建和实例化，包括：如何实例化对象、如何组织对象的创建流程等，旨在解决对象的创建问题，以便更加灵活地创建对象并将对象与使用它们的代码分离。</p>\\n</blockquote>\\n<h2> 模式之间的区别</h2>\\n<h3> 相同点</h3>\\n<ul>\\n<li>目标：创建型设计模式的主要目标是将对象的创建和使用分离，提供一种灵活的方式来创建对象。</li>\\n<li>抽象：这些模式通常通过引入抽象层来隐藏对象创建的细节，使得客户端代码更加简洁和可维护。</li>\\n<li>重用：创建型设计模式鼓励代码的重用，通过提供灵活的创建方式来满足不同的需求。</li>\\n</ul>","autoDesc":true}');export{e as data};
