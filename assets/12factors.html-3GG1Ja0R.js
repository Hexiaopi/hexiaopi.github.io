import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as s,c as i,b as t,d as e,e as o,a as h,f as n}from"./app-DC0H4is9.js";const c="/assets/12-factors-BNC-MtPs.png",d="/assets/codebase-deploys-nEEsiP3I.png",p="/assets/attached-resources-BRUrPGhu.png",_="/assets/release-D8xRMABW.png",g="/assets/process-types-_GzNjvUp.png",f={},u={href:"https://12factor.net/zh_cn/",target:"_blank",rel:"noopener noreferrer"},b=n('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（SaaS）。12-Factor 为构建如下的 SaaS 应用提供了方法论：</p><ul><li>使用<strong>标准化</strong>流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目。</li><li>和操作系统之间尽可能的<strong>划清界限</strong>，在各个系统中提供<strong>最大的可移植性</strong>。</li><li>适合<strong>部署</strong>在现代的<strong>云计算平台</strong>，从而在服务器和系统管理方面节省资源。</li><li>将开发环境和生产环境的<strong>差异降至最低</strong>，并使用<strong>持续交付</strong>实施敏捷开发。</li><li>可以在工具、架构和开发流程不发生明显变化的前提下实现<strong>扩展</strong>。</li></ul><p>这套理论适用于任意语言和后端服务（数据库、消息队列、缓存等）开发的应用程序。</p><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2>',5),m={href:"http://www.heroku.com/",target:"_blank",rel:"noopener noreferrer"},k={href:"http://blog.heroku.com/archives/2011/6/28/the_new_heroku_4_erosion_resistance_explicit_contracts/",target:"_blank",rel:"noopener noreferrer"},v={href:"http://books.google.com/books/about/Patterns_of_enterprise_application_archi.html?id=FyWZt5DdvFkC",target:"_blank",rel:"noopener noreferrer"},w={href:"http://books.google.com/books/about/Refactoring.html?id=1MsETFPD3I0C",target:"_blank",rel:"noopener noreferrer"},y=n('<h2 id="读者应该是那些人" tabindex="-1"><a class="header-anchor" href="#读者应该是那些人"><span>读者应该是那些人？</span></a></h2><p>任何 SaaS 应用的开发人员。部署和管理此类应用的运维工程师。</p><figure><img src="'+c+'" alt="12-factors" tabindex="0" loading="lazy"><figcaption>12-factors</figcaption></figure><h2 id="i-基准代码" tabindex="-1"><a class="header-anchor" href="#i-基准代码"><span>I. 基准代码</span></a></h2><h3 id="一份基准代码-codebase-多份部署-deploy" tabindex="-1"><a class="header-anchor" href="#一份基准代码-codebase-多份部署-deploy"><span>一份基准代码（<em>Codebase</em>），多份部署（<em>deploy</em>）</span></a></h3>',5),x={href:"http://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.mercurial-scm.org/",target:"_blank",rel:"noopener noreferrer"},I={href:"http://subversion.apache.org/",target:"_blank",rel:"noopener noreferrer"},R=t("em",null,"代码库",-1),S=n('<p>在类似 SVN 这样的集中式版本控制系统中，<em>基准代码</em> 就是指控制系统中的这一份代码库；而在 Git 那样的分布式版本控制系统中，<em>基准代码</em> 则是指最上游的那份代码库。</p><figure><img src="'+d+'" alt="一份代码库对应多份部署" tabindex="0" loading="lazy"><figcaption>一份代码库对应多份部署</figcaption></figure><p>基准代码和应用之间总是保持一一对应的关系：</p><ul><li>一旦有多个基准代码，就不能称为一个应用，而是一个分布式系统。分布式系统中的每一个组件都是一个应用，每一个应用可以分别使用 12-Factor 进行开发。</li><li>多个应用共享一份基准代码是有悖于 12-Factor 原则的。解决方案是将共享的代码拆分为独立的类库，然后使用 <a href="./dependencies">依赖管理</a> 策略去加载它们。</li></ul><p>尽管每个应用只对应一份基准代码，但可以同时存在多份部署。每份 <em>部署</em> 相当于运行了一个应用的实例。通常会有一个生产环境，一个或多个预发布环境。此外，每个开发人员都会在自己本地环境运行一个应用实例，这些都相当于一份部署。</p><p>所有部署的基准代码相同，但每份部署可以使用其不同的版本。比如，开发人员可能有一些提交还没有同步至预发布环境；预发布环境也有一些提交没有同步至生产环境。但它们都共享一份基准代码，我们就认为它们只是相同应用的不同部署而已。</p><h2 id="ii-依赖" tabindex="-1"><a class="header-anchor" href="#ii-依赖"><span>II. 依赖</span></a></h2><h3 id="显式声明依赖关系-dependency" tabindex="-1"><a class="header-anchor" href="#显式声明依赖关系-dependency"><span>显式声明依赖关系（ <em>dependency</em> ）</span></a></h3>',8),M={href:"http://www.cpan.org/",target:"_blank",rel:"noopener noreferrer"},F={href:"http://rubygems.org/",target:"_blank",rel:"noopener noreferrer"},T=t("p",null,[t("strong",null,"12-Factor规则下的应用程序不会隐式依赖系统级的类库。"),e(" 它一定通过 "),t("em",null,"依赖清单"),e(" ，确切地声明所有依赖项。此外，在运行过程中通过 "),t("em",null,"依赖隔离"),e(" 工具来确保程序不会调用系统中存在但清单中未声明的依赖项。这一做法会统一应用到生产和开发环境。")],-1),L={href:"https://bundler.io/",target:"_blank",rel:"noopener noreferrer"},V=t("code",null,"Gemfile",-1),C=t("code",null,"bundle exec",-1),A={href:"http://www.pip-installer.org/en/latest/",target:"_blank",rel:"noopener noreferrer"},j={href:"http://www.virtualenv.org/en/latest/",target:"_blank",rel:"noopener noreferrer"},N={href:"http://www.gnu.org/s/autoconf/",target:"_blank",rel:"noopener noreferrer"},Q=t("em",null,"构建命令",-1),z=t("code",null,"bundle install",-1),B={href:"https://github.com/technomancy/leiningen#readme",target:"_blank",rel:"noopener noreferrer"},D=t("code",null,"lein deps",-1),E=n('<p>12-Factor 应用同样不会隐式依赖某些系统工具，如 ImageMagick 或是<code>curl</code>。即使这些工具存在于几乎所有系统，但终究无法保证所有未来的系统都能支持应用顺利运行，或是能够和应用兼容。如果应用必须使用到某些系统工具，那么这些工具应该被包含在应用之中。</p><h2 id="iii-配置" tabindex="-1"><a class="header-anchor" href="#iii-配置"><span>III. 配置</span></a></h2><h3 id="在环境中存储配置" tabindex="-1"><a class="header-anchor" href="#在环境中存储配置"><span>在环境中存储配置</span></a></h3><p>通常，应用的 <em>配置</em> 在不同 <a href="./codebase">部署</a> (预发布、生产环境、开发环境等等)间会有很大差异。这其中包括：</p><ul><li>数据库，Memcached，以及其他 <a href="./backing-services">后端服务</a> 的配置</li><li>第三方服务的证书，如 Amazon S3、Twitter 等</li><li>每份部署特有的配置，如域名等</li></ul><p>有些应用在代码中使用常量保存配置，这与 12-Factor 所要求的<strong>代码和配置严格分离</strong>显然大相径庭。配置文件在各部署间存在大幅差异，代码却完全一致。</p><p>判断一个应用是否正确地将配置排除在代码之外，一个简单的方法是看该应用的基准代码是否可以立刻开源，而不用担心会暴露任何敏感的信息。</p>',7),H=t("strong",null,"不",-1),X=t("code",null,"config/routes.rb",-1),J={href:"http://spring.io/",target:"_blank",rel:"noopener noreferrer"},G={href:"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html",target:"_blank",rel:"noopener noreferrer"},q=n('<p>另外一个解决方法是使用配置文件，但不把它们纳入版本控制系统，就像 Rails 的 <code>config/database.yml</code> 。这相对于在代码中使用常量已经是长足进步，但仍然有缺点：总是会不小心将配置文件签入了代码库；配置文件的可能会分散在不同的目录，并有着不同的格式，这让找出一个地方来统一管理所有配置变的不太现实。更糟的是，这些格式通常是语言或框架特定的。</p><p><strong>12-Factor推荐将应用的配置存储于 <em>环境变量</em> 中</strong>（ <em>env vars</em>, <em>env</em> ）。环境变量可以非常方便地在不同的部署间做修改，却不动一行代码；与配置文件不同，不小心把它们签入代码库的概率微乎其微；与一些传统的解决配置问题的机制（比如 Java 的属性配置文件）相比，环境变量与语言和系统无关。</p><p>配置管理的另一个方面是分组。有时应用会将配置按照特定部署进行分组（或叫做“环境”），例如Rails中的 <code>development</code>,<code>test</code>, 和 <code>production</code> 环境。这种方法无法轻易扩展：更多部署意味着更多新的环境，例如 <code>staging</code> 或 <code>qa</code> 。 随着项目的不断深入，开发人员可能还会添加他们自己的环境，比如 <code>joes-staging</code> ，这将导致各种配置组合的激增，从而给管理部署增加了很多不确定因素。</p><p>12-Factor 应用中，环境变量的粒度要足够小，且相对独立。它们永远也不会组合成一个所谓的“环境”，而是独立存在于每个部署之中。当应用程序不断扩展，需要更多种类的部署时，这种配置管理方式能够做到平滑过渡。</p><h2 id="iv-后端服务" tabindex="-1"><a class="header-anchor" href="#iv-后端服务"><span>IV. 后端服务</span></a></h2><h3 id="把后端服务-backing-services-当作附加资源" tabindex="-1"><a class="header-anchor" href="#把后端服务-backing-services-当作附加资源"><span>把后端服务(<em>backing services</em>)当作附加资源</span></a></h3>',6),Z=t("em",null,"后端服务",-1),U={href:"http://dev.mysql.com/",target:"_blank",rel:"noopener noreferrer"},W={href:"http://couchdb.apache.org/",target:"_blank",rel:"noopener noreferrer"},O={href:"http://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://beanstalkd.github.io",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://www.postfix.org/",target:"_blank",rel:"noopener noreferrer"},$={href:"http://memcached.org/",target:"_blank",rel:"noopener noreferrer"},ee={href:"http://postmarkapp.com/",target:"_blank",rel:"noopener noreferrer"},te={href:"http://newrelic.com/",target:"_blank",rel:"noopener noreferrer"},re={href:"http://www.loggly.com/",target:"_blank",rel:"noopener noreferrer"},oe={href:"http://http://aws.amazon.com/s3/",target:"_blank",rel:"noopener noreferrer"},ne={href:"http://dev.twitter.com/",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://developers.google.com/maps/",target:"_blank",rel:"noopener noreferrer"},le={href:"http://www.last.fm/api",target:"_blank",rel:"noopener noreferrer"},se=t("strong",null,"12-Factor 应用不会区别对待本地或第三方服务。",-1),ie=t("a",{href:"./config"},"配置",-1),he=t("a",{href:"./codebase"},"部署",-1),ce={href:"http://aws.amazon.com/rds/",target:"_blank",rel:"noopener noreferrer"},de=n('<p>每个不同的后端服务是一份 <em>资源</em> 。例如，一个 MySQL 数据库是一个资源，两个 MySQL 数据库（用来数据分区）就被当作是 2 个不同的资源。12-Factor 应用将这些数据库都视作 <em>附加资源</em> ，这些资源和它们附属的部署保持松耦合。</p><img src="'+p+'" class="full" alt="一种部署附加4个后端服务"><p>部署可以按需加载或卸载资源。例如，如果应用的数据库服务由于硬件问题出现异常，管理员可以从最近的备份中恢复一个数据库，卸载当前的数据库，然后加载新的数据库 -- 整个过程都不需要修改代码。</p><h2 id="v-构建-发布-运行" tabindex="-1"><a class="header-anchor" href="#v-构建-发布-运行"><span>V. 构建，发布，运行</span></a></h2><h3 id="严格分离构建和运行" tabindex="-1"><a class="header-anchor" href="#严格分离构建和运行"><span>严格分离构建和运行</span></a></h3><p><a href="./codebase">基准代码</a> 转化为一份部署(非开发环境)需要以下三个阶段：</p><ul><li><em>构建阶段</em> 是指将代码仓库转化为可执行包的过程。构建时会使用指定版本的代码，获取和打包 <a href="./dependencies">依赖项</a>，编译成二进制文件和资源文件。</li><li><em>发布阶段</em> 会将构建的结果和当前部署所需 <a href="./config">配置</a> 相结合，并能够立刻在运行环境中投入使用。</li><li><em>运行阶段</em> （或者说“运行时”）是指针对选定的发布版本，在执行环境中启动一系列应用程序 <a href="./processes">进程</a>。</li></ul><figure><img src="'+_+'" alt="代码被构建，然后和配置结合成为发布版本" tabindex="0" loading="lazy"><figcaption>代码被构建，然后和配置结合成为发布版本</figcaption></figure><p><strong>12-factor 应用严格区分构建，发布，运行这三个步骤。</strong> 举例来说，直接修改处于运行状态的代码是非常不可取的做法，因为这些修改很难再同步回构建步骤。</p>',9),pe={href:"https://github.com/capistrano/capistrano/wiki",target:"_blank",rel:"noopener noreferrer"},_e=t("code",null,"releases",-1),ge=t("code",null,"rollback",-1),fe=n('<p>每一个发布版本必须对应一个唯一的发布 ID，例如可以使用发布时的时间戳（<code>2011-04-06-20:32:17</code>），亦或是一个增长的数字（<code>v100</code>）。发布的版本就像一本只能追加的账本，一旦发布就不可修改，任何的变动都应该产生一个新的发布版本。</p><p>新的代码在部署之前，需要开发人员触发构建操作。但是，运行阶段不一定需要人为触发，而是可以自动进行。如服务器重启，或是进程管理器重启了一个崩溃的进程。因此，运行阶段应该保持尽可能少的模块，这样假设半夜发生系统故障而开发人员又捉襟见肘也不会引起太大问题。构建阶段是可以相对复杂一些的，因为错误信息能够立刻展示在开发人员面前，从而得到妥善处理。</p><h2 id="vi-进程" tabindex="-1"><a class="header-anchor" href="#vi-进程"><span>VI. 进程</span></a></h2><h3 id="以一个或多个无状态进程运行应用" tabindex="-1"><a class="header-anchor" href="#以一个或多个无状态进程运行应用"><span>以一个或多个无状态进程运行应用</span></a></h3><p>运行环境中，应用程序通常是以一个和多个 <em>进程</em> 运行的。</p><p>最简单的场景中，代码是一个独立的脚本，运行环境是开发人员自己的笔记本电脑，进程由一条命令行（例如<code>python my_script.py</code>）。另外一个极端情况是，复杂的应用可能会使用很多 <a href="./concurrency">进程类型</a> ，也就是零个或多个进程实例。</p>',6),ue={href:"http://en.wikipedia.org/wiki/Shared_nothing_architecture",target:"_blank",rel:"noopener noreferrer"},be=t("a",{href:"./backing-services"},"后端服务",-1),me=t("p",null,"内存区域或磁盘空间可以作为进程在做某种事务型操作时的缓存，例如下载一个很大的文件，对其操作并将结果写入数据库的过程。12-Factor应用根本不用考虑这些缓存的内容是不是可以保留给之后的请求来使用，这是因为应用启动了多种类型的进程，将来的请求多半会由其他进程来服务。即使在只有一个进程的情形下，先前保存的数据（内存或文件系统中）也会因为重启（如代码部署、配置更改、或运行环境将进程调度至另一个物理区域执行）而丢失。",-1),ke={href:"http://documentcloud.github.io/jammit/",target:"_blank",rel:"noopener noreferrer"},ve={href:"http://django-compressor.readthedocs.org/",target:"_blank",rel:"noopener noreferrer"},we=t("a",{href:"./build-release-run"},"构建步骤",-1),ye={href:"http://guides.rubyonrails.org/asset_pipeline.html",target:"_blank",rel:"noopener noreferrer"},xe={href:"http://en.wikipedia.org/wiki/Load_balancing_%28computing%29#Persistence",target:"_blank",rel:"noopener noreferrer"},Pe={href:"http://memcached.org/",target:"_blank",rel:"noopener noreferrer"},Ie={href:"http://redis.io/",target:"_blank",rel:"noopener noreferrer"},Re=t("h2",{id:"vii-端口绑定",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#vii-端口绑定"},[t("span",null,"VII. 端口绑定")])],-1),Se=t("h3",{id:"通过端口绑定-port-binding-来提供服务",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#通过端口绑定-port-binding-来提供服务"},[t("span",null,[e("通过端口绑定("),t("em",null,"Port binding"),e(")来提供服务")])])],-1),Me={href:"http://httpd.apache.org/",target:"_blank",rel:"noopener noreferrer"},Fe={href:"http://tomcat.apache.org/",target:"_blank",rel:"noopener noreferrer"},Te=t("p",null,[t("strong",null,"12-Factor 应用完全自我加载"),e(" 而不依赖于任何网络服务器就可以创建一个面向网络的服务。互联网应用 "),t("strong",null,"通过端口绑定来提供服务"),e(" ，并监听发送至该端口的请求。")],-1),Le=t("p",null,[e("本地环境中，开发人员通过类似"),t("code",null,"http://localhost:5000/"),e("的地址来访问服务。在线上环境中，请求统一发送至公共域名而后路由至绑定了端口的网络进程。")],-1),Ve=t("a",{href:"./dependencies"},"依赖声明",-1),Ce={href:"http://www.tornadoweb.org/",target:"_blank",rel:"noopener noreferrer"},Ae={href:"http://code.macournoyer.com/thin/",target:"_blank",rel:"noopener noreferrer"},je={href:"http://www.eclipse.org/jetty/",target:"_blank",rel:"noopener noreferrer"},Ne=t("em",null,"用户端",-1),Qe={href:"http://xmpp.org/",target:"_blank",rel:"noopener noreferrer"},ze={href:"http://www.ejabberd.im/",target:"_blank",rel:"noopener noreferrer"},Be={href:"http://redis.io/topics/protocol",target:"_blank",rel:"noopener noreferrer"},De={href:"http://redis.io/",target:"_blank",rel:"noopener noreferrer"},Ee=n('<p>还要指出的是，端口绑定这种方式也意味着一个应用可以成为另外一个应用的 <a href="./backing-services">后端服务</a> ，调用方将服务方提供的相应 URL 当作资源存入 <a href="./config">配置</a> 以备将来调用。</p><h2 id="viii-并发" tabindex="-1"><a class="header-anchor" href="#viii-并发"><span>VIII. 并发</span></a></h2><h3 id="通过进程模型进行扩展" tabindex="-1"><a class="header-anchor" href="#通过进程模型进行扩展"><span>通过进程模型进行扩展</span></a></h3><p>任何计算机程序，一旦启动，就会生成一个或多个进程。互联网应用采用多种进程运行方式。例如，PHP 进程作为 Apache 的子进程存在，随请求按需启动。Java 进程则采取了相反的方式，在程序启动之初 JVM 就提供了一个超级进程储备了大量的系统资源(CPU 和内存)，并通过多线程实现内部的并发管理。上述 2 个例子中，进程是开发人员可以操作的最小单位。</p><figure><img src="'+g+'" alt="扩展表现为运行中的进程，工作多样性表现为进程类型。" tabindex="0" loading="lazy"><figcaption>扩展表现为运行中的进程，工作多样性表现为进程类型。</figcaption></figure>',5),He={href:"https://adam.herokuapp.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/",target:"_blank",rel:"noopener noreferrer"},Xe=t("em",null,"进程类型",-1),Je={href:"https://github.com/eventmachine/eventmachine",target:"_blank",rel:"noopener noreferrer"},Ge={href:"http://twistedmatrix.com/trac/",target:"_blank",rel:"noopener noreferrer"},qe={href:"http://nodejs.org/",target:"_blank",rel:"noopener noreferrer"},Ze=t("p",null,[e("上述进程模型会在系统急需扩展时大放异彩。 "),t("a",{href:"./processes"},"12-Factor 应用的进程所具备的无共享，水平分区的特性"),e(" 意味着添加并发会变得简单而稳妥。这些进程的类型以及每个类型中进程的数量就被称作 "),t("em",null,"进程构成"),e(" 。")],-1),Ue={href:"http://dustin.github.com/2010/02/28/running-processes.html",target:"_blank",rel:"noopener noreferrer"},We={href:"https://www.freedesktop.org/wiki/Software/systemd/",target:"_blank",rel:"noopener noreferrer"},Oe={href:"http://blog.daviddollar.org/2011/05/06/introducing-foreman.html",target:"_blank",rel:"noopener noreferrer"},Ke=t("a",{href:"./logs"},"输出流",-1),Ye=n('<h2 id="ix-易处理" tabindex="-1"><a class="header-anchor" href="#ix-易处理"><span>IX. 易处理</span></a></h2><h3 id="快速启动和优雅终止可最大化健壮性" tabindex="-1"><a class="header-anchor" href="#快速启动和优雅终止可最大化健壮性"><span>快速启动和优雅终止可最大化健壮性</span></a></h3><p>**12-Factor 应用的 <a href="./processes">进程</a> 是 <em>易处理（disposable）<em>的，意思是说它们可以瞬间开启或停止。</em></em> 这有利于快速、弹性的伸缩应用，迅速部署变化的 <a href="./codebase">代码</a> 或 <a href="./config">配置</a> ，稳健的部署应用。</p><p>进程应当追求 <strong>最小启动时间</strong> 。 理想状态下，进程从敲下命令到真正启动并等待请求的时间应该只需很短的时间。更少的启动时间提供了更敏捷的 <a href="./build-release-run">发布</a> 以及扩展过程，此外还增加了健壮性，因为进程管理器可以在授权情形下容易的将进程搬到新的物理机器上。</p>',4),$e={href:"http://en.wikipedia.org/wiki/SIGTERM",target:"_blank",rel:"noopener noreferrer"},et=t("code",null,"SIGTERM",-1),tt={href:"http://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},rt={href:"http://www.rabbitmq.com/amqp-0-9-1-quickref.html#basic.nack",target:"_blank",rel:"noopener noreferrer"},ot=t("code",null,"NACK",-1),nt={href:"https://beanstalkd.github.io",target:"_blank",rel:"noopener noreferrer"},at={href:"https://github.com/collectiveidea/delayed_job#readme",target:"_blank",rel:"noopener noreferrer"},lt={href:"http://en.wikipedia.org/wiki/Reentrant_%28subroutine%29",target:"_blank",rel:"noopener noreferrer"},st={href:"http://en.wikipedia.org/wiki/Idempotence",target:"_blank",rel:"noopener noreferrer"},it=t("strong",null,"在面对突然死亡时保持健壮",-1),ht={href:"https://beanstalkd.github.io",target:"_blank",rel:"noopener noreferrer"},ct={href:"http://lwn.net/Articles/191059/",target:"_blank",rel:"noopener noreferrer"},dt={href:"http://couchdb.apache.org/docs/overview.html",target:"_blank",rel:"noopener noreferrer"},pt=n('<h2 id="x-开发环境与线上环境等价" tabindex="-1"><a class="header-anchor" href="#x-开发环境与线上环境等价"><span>X. 开发环境与线上环境等价</span></a></h2><h3 id="尽可能的保持开发-预发布-线上环境相同" tabindex="-1"><a class="header-anchor" href="#尽可能的保持开发-预发布-线上环境相同"><span>尽可能的保持开发，预发布，线上环境相同</span></a></h3><p>从以往经验来看，开发环境（即开发人员的本地 <a href="./codebase">部署</a>）和线上环境（外部用户访问的真实部署）之间存在着很多差异。这些差异表现在以下三个方面：</p><ul><li><strong>时间差异：</strong> 开发人员正在编写的代码可能需要几天，几周，甚至几个月才会上线。</li><li><strong>人员差异：</strong> 开发人员编写代码，运维人员部署代码。</li><li><strong>工具差异：</strong> 开发人员或许使用 Nginx，SQLite，OS X，而线上环境使用 Apache，MySQL 以及 Linux。</li></ul>',4),_t={href:"http://avc.com/2011/02/continuous-deployment/",target:"_blank",rel:"noopener noreferrer"},gt=n('<ul><li>缩小时间差异：开发人员可以几小时，甚至几分钟就部署代码。</li><li>缩小人员差异：开发人员不只要编写代码，更应该密切参与部署过程以及代码在线上的表现。</li><li>缩小工具差异：尽量保证开发环境以及线上环境的一致性。</li></ul><p>将上述总结变为一个表格如下：</p><table><tr><th></th><th>传统应用</th><th>12-Factor 应用</th></tr><tr><th>每次部署间隔</th><td>数周</td><td>几小时</td></tr><tr><th>开发人员 vs 运维人员</th><td>不同的人</td><td>相同的人</td></tr><tr><th>开发环境 vs 线上环境</th><td>不同</td><td>尽量接近</td></tr></table><p><a href="./backing-services">后端服务</a> 是保持开发与线上等价的重要部分，例如数据库，队列系统，以及缓存。许多语言都提供了简化获取后端服务的类库，例如不同类型服务的 <em>适配器</em> 。下列表格提供了一些例子。</p><table><tr><th>类型</th><th>语言</th><th>类库</th><th>适配器</th></tr><tr><td>数据库</td><td>Ruby/Rails</td><td>ActiveRecord</td><td>MySQL, PostgreSQL, SQLite</td></tr><tr><td>队列</td><td>Python/Django</td><td>Celery</td><td>RabbitMQ, Beanstalkd, Redis</td></tr><tr><td>缓存</td><td>Ruby/Rails</td><td>ActiveSupport::Cache</td><td>Memory, filesystem, Memcached</td></tr></table><p>开发人员有时会觉得在本地环境中使用轻量的后端服务具有很强的吸引力，而那些更重量级的健壮的后端服务应该使用在生产环境。例如，本地使用 SQLite 线上使用 PostgreSQL；又如本地缓存在进程内存中而线上存入 Memcached。</p><p><strong>12-Factor 应用的开发人员应该反对在不同环境间使用不同的后端服务</strong> ，即使适配器已经可以几乎消除使用上的差异。这是因为，不同的后端服务意味着会突然出现的不兼容，从而导致测试、预发布都正常的代码在线上出现问题。这些错误会给持续部署带来阻力。从应用程序的生命周期来看，消除这种阻力需要花费很大的代价。</p>',7),ft={href:"http://mxcl.github.com/homebrew/",target:"_blank",rel:"noopener noreferrer"},ut={href:"https://help.ubuntu.com/community/AptGet/Howto",target:"_blank",rel:"noopener noreferrer"},bt={href:"http://www.opscode.com/chef/",target:"_blank",rel:"noopener noreferrer"},mt={href:"http://docs.puppetlabs.com/",target:"_blank",rel:"noopener noreferrer"},kt={href:"http://vagrantup.com/",target:"_blank",rel:"noopener noreferrer"},vt=t("p",null,"不同后端服务的适配器仍然是有用的，因为它们可以使移植后端服务变得简单。但应用的所有部署，这其中包括开发、预发布以及线上环境，都应该使用同一个后端服务的相同版本。",-1),wt=t("h2",{id:"xi-日志",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#xi-日志"},[t("span",null,"XI. 日志")])],-1),yt=t("h3",{id:"把日志当作事件流",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#把日志当作事件流"},[t("span",null,"把日志当作事件流")])],-1),xt=t("p",null,[t("em",null,"日志"),e(" 使得应用程序运行的动作变得透明。在基于服务器的环境中，日志通常被写在硬盘的一个文件里，但这只是一种输出格式。")],-1),Pt={href:"https://adam.herokuapp.com/past/2011/4/1/logs_are_streams_not_files/",target:"_blank",rel:"noopener noreferrer"},It=t("p",null,[t("strong",null,"12-factor应用本身从不考虑存储自己的输出流。"),e(" 不应该试图去写或者管理日志文件。相反，每一个运行的进程都会直接的标准输出（"),t("code",null,"stdout"),e("）事件流。开发环境中，开发人员可以通过这些数据流，实时在终端看到应用的活动。")],-1),Rt={href:"https://github.com/heroku/logplex",target:"_blank",rel:"noopener noreferrer"},St={href:"https://github.com/fluent/fluentd",target:"_blank",rel:"noopener noreferrer"},Mt={href:"http://www.splunk.com/",target:"_blank",rel:"noopener noreferrer"},Ft={href:"http://hive.apache.org/",target:"_blank",rel:"noopener noreferrer"},Tt=n('<ul><li>找出过去一段时间特殊的事件。</li><li>图形化一个大规模的趋势，比如每分钟的请求量。</li><li>根据用户定义的条件实时触发警报，比如每分钟的报错超过某个警戒线。</li></ul><h2 id="xii-管理进程" tabindex="-1"><a class="header-anchor" href="#xii-管理进程"><span>XII. 管理进程</span></a></h2><h3 id="后台管理任务当作一次性进程运行" tabindex="-1"><a class="header-anchor" href="#后台管理任务当作一次性进程运行"><span>后台管理任务当作一次性进程运行</span></a></h3><p><a href="./concurrency">进程构成</a>（process formation）是指用来处理应用的常规业务（比如处理 web 请求）的一组进程。与此不同，开发人员经常希望执行一些管理或维护应用的一次性任务，例如：</p>',4),Lt=t("li",null,[e("运行数据移植（Django 中的 "),t("code",null,"manage.py migrate"),e(", Rails 中的 "),t("code",null,"rake db:migrate"),e("）。")],-1),Vt={href:"http://en.wikipedia.org/wiki/Read-eval-print_loop",target:"_blank",rel:"noopener noreferrer"},Ct=t("code",null,"python",-1),At=t("code",null,"perl",-1),jt=t("code",null,"irb",-1),Nt=t("code",null,"rails console",-1),Qt=t("li",null,"运行一些提交到代码仓库的一次性脚本。",-1),zt=n('<p>一次性管理进程应该和正常的 <a href="./processes">常驻进程</a> 使用同样的环境。这些管理进程和任何其他的进程一样使用相同的 <a href="./codebase">代码</a> 和 <a href="./config">配置</a> ，基于某个 <a href="./build-release-run">发布版本</a> 运行。后台管理代码应该随其他应用程序代码一起发布，从而避免同步问题。</p><p>所有进程类型应该使用同样的 <a href="./dependencies">依赖隔离</a> 技术。例如，如果Ruby的web进程使用了命令 <code>bundle exec thin start</code> ，那么数据库移植应使用 <code>bundle exec rake db:migrate</code> 。同样的，如果一个 Python 程序使用了 Virtualenv，则需要在运行 Tornado Web 服务器和任何 <code>manage.py</code> 管理进程时引入 <code>bin/python</code> 。</p><p>12-factor 尤其青睐那些提供了 REPL shell 的语言，因为那会让运行一次性脚本变得简单。在本地部署中，开发人员直接在命令行使用 shell 命令调用一次性管理进程。在线上部署中，开发人员依旧可以使用ssh或是运行环境提供的其他机制来运行这样的进程。</p>',3);function Bt(Dt,Et){const r=l("ExternalLinkIcon");return s(),i("div",null,[t("p",null,[e("【转】"),t("a",u,[e("原文链接"),o(r)])]),h(" more "),b,t("p",null,[e("本文的贡献者参与过数以百计的应用程序的开发和部署，并通过 "),t("a",m,[e("Heroku"),o(r)]),e(" 平台间接见证了数十万应用程序的开发，运作以及扩展的过程。")]),t("p",null,[e("本文综合了我们关于 SaaS 应用几乎所有的经验和智慧，是开发此类应用的理想实践标准，并特别关注于应用程序如何保持良性成长，开发者之间如何进行有效的代码协作，以及如何 "),t("a",k,[e("避免软件污染"),o(r)]),e(" 。")]),t("p",null,[e("我们的初衷是分享在现代软件开发过程中发现的一些系统性问题，并加深对这些问题的认识。我们提供了讨论这些问题时所需的共享词汇，同时使用相关术语给出一套针对这些问题的广义解决方案。本文格式的灵感来自于 Martin Fowler 的书籍： "),t("em",null,[t("a",v,[e("Patterns of Enterprise Application Architecture"),o(r)])]),e(" ， "),t("em",null,[t("a",w,[e("Refactoring"),o(r)])]),e(" 。")]),y,t("p",null,[e("12-Factor应用(译者注：应该是说一个使用本文概念来设计的应用，下同)通常会使用版本控制系统加以管理，如"),t("a",x,[e("Git"),o(r)]),e(", "),t("a",P,[e("Mercurial"),o(r)]),e(", "),t("a",I,[e("Subversion"),o(r)]),e("。一份用来跟踪代码所有修订版本的数据库被称作 "),R,e("（code repository, code repo, repo）。")]),S,t("p",null,[e("大多数编程语言都会提供一个打包系统，用来为各个类库提供打包服务，就像 Perl 的 "),t("a",M,[e("CPAN"),o(r)]),e(" 或是 Ruby 的 "),t("a",F,[e("Rubygems"),o(r)]),e(' 。通过打包系统安装的类库可以是系统级的（称之为 "site packages"），或仅供某个应用程序使用，部署在相应的目录中（称之为 "vendoring" 或 "bundling"）。')]),T,t("p",null,[e("例如， Ruby 的 "),t("a",L,[e("Bundler"),o(r)]),e(" 使用 "),V,e(" 作为依赖项声明清单，使用 "),C,e(" 来进行依赖隔离。Python 中则可分别使用两种工具 -- "),t("a",A,[e("Pip"),o(r)]),e(" 用作依赖声明， "),t("a",j,[e("Virtualenv"),o(r)]),e(" 用作依赖隔离。甚至 C 语言也有类似工具， "),t("a",N,[e("Autoconf"),o(r)]),e(" 用作依赖声明，静态链接库用作依赖隔离。无论用什么工具，依赖声明和依赖隔离必须一起使用，否则无法满足 12-Factor 规范。")]),t("p",null,[e("显式声明依赖的优点之一是为新进开发者简化了环境配置流程。新进开发者可以检出应用程序的基准代码，安装编程语言环境和它对应的依赖管理工具，只需通过一个 "),Q,e(" 来安装所有的依赖项，即可开始工作。例如，Ruby/Bundler 下使用 "),z,e("，而 Clojure/"),t("a",B,[e("Leiningen"),o(r)]),e(" 则是 "),D,e("。")]),E,t("p",null,[e('需要指出的是，这里定义的"配置"并'),H,e("包括应用的内部配置，比如 Rails 的 "),X,e("，或是使用 "),t("a",J,[e("Spring"),o(r)]),e(" 时 "),t("a",G,[e("代码模块间的依赖注入关系"),o(r)]),e(" 。这类配置在不同部署间不存在差异，所以应该写入代码。")]),q,t("p",null,[Z,e("是指程序运行所需要的通过网络调用的各种服务，如数据库（"),t("a",U,[e("MySQL"),o(r)]),e("，"),t("a",W,[e("CouchDB"),o(r)]),e("），消息/队列系统（"),t("a",O,[e("RabbitMQ"),o(r)]),e("，"),t("a",K,[e("Beanstalkd"),o(r)]),e("），SMTP 邮件发送服务（"),t("a",Y,[e(" Postfix"),o(r)]),e("），以及缓存系统（"),t("a",$,[e("Memcached"),o(r)]),e("）。")]),t("p",null,[e("类似数据库的后端服务，通常由部署应用程序的系统管理员一起管理。除了本地服务之外，应用程序有可能使用了第三方发布和管理的服务。示例包括 SMTP（例如 "),t("a",ee,[e("Postmark"),o(r)]),e("），数据收集服务（例如 "),t("a",te,[e("New Relic"),o(r)]),e(" 或 "),t("a",re,[e("Loggly"),o(r)]),e("），数据存储服务（如 "),t("a",oe,[e("Amazon S3"),o(r)]),e("），以及使用 API 访问的服务（例如 "),t("a",ne,[e("Twitter"),o(r)]),e(", "),t("a",ae,[e("Google Maps"),o(r)]),e(", "),t("a",le,[e("Last.fm"),o(r)]),e("）。")]),t("p",null,[se,e(" 对应用程序而言，两种都是附加资源，通过一个 url 或是其他存储在 "),ie,e(" 中的服务定位/服务证书来获取数据。12-Factor 应用的任意 "),he,e(" ，都应该可以在不进行任何代码改动的情况下，将本地 MySQL 数据库换成第三方服务（例如 "),t("a",ce,[e("Amazon RDS"),o(r)]),e("）。类似的，本地 SMTP 服务应该也可以和第三方 SMTP 服务（例如 Postmark ）互换。上述 2 个例子中，仅需修改配置中的资源地址。")]),de,t("p",null,[e("部署工具通常都提供了发布管理工具，最引人注目的功能是退回至较旧的发布版本。比如， "),t("a",pe,[e("Capistrano"),o(r)]),e(" 将所有发布版本都存储在一个叫 "),_e,e(" 的子目录中，当前的在线版本只需映射至对应的目录即可。该工具的 "),ge,e(" 命令可以很容易地实现回退版本的功能。")]),fe,t("p",null,[t("strong",null,[e("12-Factor 应用的进程必须无状态且 "),t("a",ue,[e("无共享"),o(r)]),e(" 。")]),e(" 任何需要持久化的数据都要存储在 "),be,e(" 内，比如数据库。")]),me,t("p",null,[e("源文件打包工具（"),t("a",ke,[e("Jammit"),o(r)]),e(", "),t("a",ve,[e("django-compressor"),o(r)]),e("） 使用文件系统来缓存编译过的源文件。12-Factor 应用更倾向于在 "),we,e(" 做此动作——正如 "),t("a",ye,[e("Rails资源管道"),o(r)]),e(" ，而不是在运行阶段。")]),t("p",null,[e("一些互联网系统依赖于 “"),t("a",xe,[e("粘性 session "),o(r)]),e("”， 这是指将用户 session 中的数据缓存至某进程的内存中，并将同一用户的后续请求路由到同一个进程。粘性 session 是 12-Factor 极力反对的。Session 中的数据应该保存在诸如 "),t("a",Pe,[e("Memcached"),o(r)]),e(" 或 "),t("a",Ie,[e("Redis"),o(r)]),e(" 这样的带有过期时间的缓存中。")]),Re,Se,t("p",null,[e("互联网应用有时会运行于服务器的容器之中。例如 PHP 经常作为 "),t("a",Me,[e("Apache HTTPD"),o(r)]),e(" 的一个模块来运行，正如 Java 运行于 "),t("a",Fe,[e("Tomcat"),o(r)]),e(" 。")]),Te,Le,t("p",null,[e("通常的实现思路是，将网络服务器类库通过 "),Ve,e(" 载入应用。例如，Python 的 "),t("a",Ce,[e("Tornado"),o(r)]),e(", Ruby 的"),t("a",Ae,[e("Thin"),o(r)]),e(" , Java 以及其他基于 JVM 语言的 "),t("a",je,[e("Jetty"),o(r)]),e("。完全由 "),Ne,e(" ，确切的说应该是应用的代码，发起请求。和运行环境约定好绑定的端口即可处理这些请求。")]),t("p",null,[e("HTTP 并不是唯一一个可以由端口绑定提供的服务。其实几乎所有服务器软件都可以通过进程绑定端口来等待请求。例如，使用 "),t("a",Qe,[e("XMPP"),o(r)]),e(" 的 "),t("a",ze,[e("ejabberd"),o(r)]),e(" ， 以及使用 "),t("a",Be,[e("Redis 协议"),o(r)]),e(" 的 "),t("a",De,[e("Redis"),o(r)]),e(" 。")]),Ee,t("p",null,[e("**在 12-factor 应用中，进程是一等公民。**12-Factor 应用的进程主要借鉴于 "),t("a",He,[e("unix 守护进程模型"),o(r)]),e(" 。开发人员可以运用这个模型去设计应用架构，将不同的工作分配给不同的 "),Xe,e(" 。例如，HTTP 请求可以交给 web 进程来处理，而常驻的后台工作则交由 worker 进程负责。")]),t("p",null,[e("这并不包括个别较为特殊的进程，例如通过虚拟机的线程处理并发的内部运算，或是使用诸如 "),t("a",Je,[e("EventMachine"),o(r)]),e(", "),t("a",Ge,[e("Twisted"),o(r)]),e(", "),t("a",qe,[e("Node.js"),o(r)]),e(" 的异步/事件触发模型。但一台独立的虚拟机的扩展有瓶颈（垂直扩展），所以应用程序必须可以在多台物理机器间跨进程工作。")]),Ze,t("p",null,[e("12-Factor 应用的进程 "),t("a",Ue,[e("不需要守护进程"),o(r)]),e(" 或是写入 PID 文件。相反的，应该借助操作系统的进程管理器(例如 "),t("a",We,[e("systemd"),o(r)]),e(" ，分布式的进程管理云平台，或是类似 "),t("a",Oe,[e("Foreman"),o(r)]),e(" 的工具)，来管理 "),Ke,e(" ，响应崩溃的进程，以及处理用户触发的重启和关闭超级进程的请求。")]),Ye,t("p",null,[e("进程 "),t("strong",null,[e("一旦接收 "),t("a",$e,[e("终止信号（"),et,e("）"),o(r)]),e(" 就会优雅的终止")]),e(" 。就网络进程而言，优雅终止是指停止监听服务的端口，即拒绝所有新的请求，并继续执行当前已接收的请求，然后退出。此类型的进程所隐含的要求是HTTP请求大多都很短(不会超过几秒钟)，而在长时间轮询中，客户端在丢失连接后应该马上尝试重连。")]),t("p",null,[e("对于 worker 进程来说，优雅终止是指将当前任务退回队列。例如，"),t("a",tt,[e("RabbitMQ"),o(r)]),e(" 中，worker 可以发送一个"),t("a",rt,[ot,o(r)]),e("信号。 "),t("a",nt,[e("Beanstalkd"),o(r)]),e(" 中，任务终止并退回队列会在worker断开时自动触发。有锁机制的系统诸如 "),t("a",at,[e("Delayed Job"),o(r)]),e(" 则需要确定释放了系统资源。此类型的进程所隐含的要求是，任务都应该 "),t("a",lt,[e("可重复执行"),o(r)]),e(" ， 这主要由将结果包装进事务或是使重复操作 "),t("a",st,[e("幂等"),o(r)]),e(" 来实现。")]),t("p",null,[e("进程还应当"),it,e("，例如底层硬件故障。虽然这种情况比起优雅终止来说少之又少，但终究有可能发生。一种推荐的方式是使用一个健壮的后端队列，例如 "),t("a",ht,[e("Beanstalkd"),o(r)]),e(" ，它可以在客户端断开或超时后自动退回任务。无论如何，12-Factor 应用都应该可以设计能够应对意外的、不优雅的终结。"),t("a",ct,[e("Crash-only design"),o(r)]),e(" 将这种概念转化为 "),t("a",dt,[e("合乎逻辑的理论"),o(r)]),e("。")]),pt,t("p",null,[t("strong",null,[e("12-Factor 应用想要做到 "),t("a",_t,[e("持续部署"),o(r)]),e(" 就必须缩小本地与线上差异。")]),e(" 再回头看上面所描述的三个差异:")]),gt,t("p",null,[e("与此同时，轻量的本地服务也不像以前那样引人注目。借助于"),t("a",ft,[e("Homebrew"),o(r)]),e("，"),t("a",ut,[e("apt-get"),o(r)]),e("等现代的打包系统，诸如Memcached、PostgreSQL、RabbitMQ 等后端服务的安装与运行也并不复杂。此外，使用类似 "),t("a",bt,[e("Chef"),o(r)]),e(" 和 "),t("a",mt,[e("Puppet"),o(r)]),e(" 的声明式配置工具，结合像 "),t("a",kt,[e("Vagrant"),o(r)]),e(" 这样轻量的虚拟环境就可以使得开发人员的本地环境与线上环境无限接近。与同步环境和持续部署所带来的益处相比，安装这些系统显然是值得的。")]),vt,wt,yt,xt,t("p",null,[e("日志应该是 "),t("a",Pt,[e("事件流"),o(r)]),e(" 的汇总，将所有运行中进程和后端服务的输出流按照时间顺序收集起来。尽管在回溯问题时可能需要看很多行，日志最原始的格式确实是一个事件一行。日志没有确定开始和结束，但随着应用在运行会持续的增加。")]),It,t("p",null,[e("在预发布或线上部署中，每个进程的输出流由运行环境截获，并将其他输出流整理在一起，然后一并发送给一个或多个最终的处理程序，用于查看或是长期存档。这些存档路径对于应用来说不可见也不可配置，而是完全交给程序的运行环境管理。类似 "),t("a",Rt,[e("Logplex"),o(r)]),e(" 和 "),t("a",St,[e("Fluentd"),o(r)]),e(" 的开源工具可以达到这个目的。")]),t("p",null,[e("这些事件流可以输出至文件，或者在终端实时观察。最重要的，输出流可以发送到 "),t("a",Mt,[e("Splunk"),o(r)]),e(" 这样的日志索引及分析系统，或 "),t("a",Ft,[e("Hadoop/Hive"),o(r)]),e(" 这样的通用数据存储系统。这些系统为查看应用的历史活动提供了强大而灵活的功能，包括：")]),Tt,t("ul",null,[Lt,t("li",null,[e("运行一个控制台（也被称为 "),t("a",Vt,[e("REPL"),o(r)]),e(" shell），来执行一些代码或是针对线上数据库做一些检查。大多数语言都通过解释器提供了一个 REPL 工具（"),Ct,e(" 或 "),At,e("） ，或是其他命令（Ruby 使用 "),jt,e(", Rails 使用 "),Nt,e("）。")]),Qt]),zt])}const Jt=a(f,[["render",Bt],["__file","12factors.html.vue"]]),Gt=JSON.parse('{"path":"/share/12factors.html","title":"十二要素应用原则","lang":"zh-CN","frontmatter":{"title":"十二要素应用原则","author":"heroku","icon":"mug-hot","date":"2024-05-11T00:00:00.000Z","tag":["原则"],"category":["转载"],"description":"【转】原文链接","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/share/12factors.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"十二要素应用原则"}],["meta",{"property":"og:description","content":"【转】原文链接"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T07:09:37.000Z"}],["meta",{"property":"article:author","content":"heroku"}],["meta",{"property":"article:tag","content":"原则"}],["meta",{"property":"article:published_time","content":"2024-05-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-11T07:09:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"十二要素应用原则\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-11T07:09:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"heroku\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"读者应该是那些人？","slug":"读者应该是那些人","link":"#读者应该是那些人","children":[]},{"level":2,"title":"I. 基准代码","slug":"i-基准代码","link":"#i-基准代码","children":[{"level":3,"title":"一份基准代码（Codebase），多份部署（deploy）","slug":"一份基准代码-codebase-多份部署-deploy","link":"#一份基准代码-codebase-多份部署-deploy","children":[]}]},{"level":2,"title":"II. 依赖","slug":"ii-依赖","link":"#ii-依赖","children":[{"level":3,"title":"显式声明依赖关系（ dependency ）","slug":"显式声明依赖关系-dependency","link":"#显式声明依赖关系-dependency","children":[]}]},{"level":2,"title":"III. 配置","slug":"iii-配置","link":"#iii-配置","children":[{"level":3,"title":"在环境中存储配置","slug":"在环境中存储配置","link":"#在环境中存储配置","children":[]}]},{"level":2,"title":"IV. 后端服务","slug":"iv-后端服务","link":"#iv-后端服务","children":[{"level":3,"title":"把后端服务(backing services)当作附加资源","slug":"把后端服务-backing-services-当作附加资源","link":"#把后端服务-backing-services-当作附加资源","children":[]}]},{"level":2,"title":"V. 构建，发布，运行","slug":"v-构建-发布-运行","link":"#v-构建-发布-运行","children":[{"level":3,"title":"严格分离构建和运行","slug":"严格分离构建和运行","link":"#严格分离构建和运行","children":[]}]},{"level":2,"title":"VI. 进程","slug":"vi-进程","link":"#vi-进程","children":[{"level":3,"title":"以一个或多个无状态进程运行应用","slug":"以一个或多个无状态进程运行应用","link":"#以一个或多个无状态进程运行应用","children":[]}]},{"level":2,"title":"VII. 端口绑定","slug":"vii-端口绑定","link":"#vii-端口绑定","children":[{"level":3,"title":"通过端口绑定(Port binding)来提供服务","slug":"通过端口绑定-port-binding-来提供服务","link":"#通过端口绑定-port-binding-来提供服务","children":[]}]},{"level":2,"title":"VIII. 并发","slug":"viii-并发","link":"#viii-并发","children":[{"level":3,"title":"通过进程模型进行扩展","slug":"通过进程模型进行扩展","link":"#通过进程模型进行扩展","children":[]}]},{"level":2,"title":"IX. 易处理","slug":"ix-易处理","link":"#ix-易处理","children":[{"level":3,"title":"快速启动和优雅终止可最大化健壮性","slug":"快速启动和优雅终止可最大化健壮性","link":"#快速启动和优雅终止可最大化健壮性","children":[]}]},{"level":2,"title":"X. 开发环境与线上环境等价","slug":"x-开发环境与线上环境等价","link":"#x-开发环境与线上环境等价","children":[{"level":3,"title":"尽可能的保持开发，预发布，线上环境相同","slug":"尽可能的保持开发-预发布-线上环境相同","link":"#尽可能的保持开发-预发布-线上环境相同","children":[]}]},{"level":2,"title":"XI. 日志","slug":"xi-日志","link":"#xi-日志","children":[{"level":3,"title":"把日志当作事件流","slug":"把日志当作事件流","link":"#把日志当作事件流","children":[]}]},{"level":2,"title":"XII. 管理进程","slug":"xii-管理进程","link":"#xii-管理进程","children":[{"level":3,"title":"后台管理任务当作一次性进程运行","slug":"后台管理任务当作一次性进程运行","link":"#后台管理任务当作一次性进程运行","children":[]}]}],"git":{"createdTime":1715411377000,"updatedTime":1715411377000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":1}]},"readingTime":{"minutes":25.44,"words":7632},"filePathRelative":"share/12factors.md","localizedDate":"2024年5月11日","excerpt":"<p>【转】<a href=\\"https://12factor.net/zh_cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">原文链接</a></p>\\n","autoDesc":true}');export{Jt as comp,Gt as data};
