import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as i,a as n,b as s,d as c,e as a}from"./app-95ff9c18.js";const l="/assets/flag-d4da034d.png",u={},r=a(`<blockquote><p>flag库实现命令行参数解析</p></blockquote><h2 id="简单用法" tabindex="-1"><a class="header-anchor" href="#简单用法" aria-hidden="true">#</a> 简单用法</h2><div class="hint-container tip"><p class="hint-container-title">flag参数使用语法</p><p>-flag // 破折号，使用默认值<br> --flag // 双破折号<br> -flag=x // 指定参数值<br> -flag x // non-boolean flags only</p></div><h3 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Example1：flag.String 返回指针类型字符串</span>
<span class="token keyword">var</span> flagStrA <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;str-a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;str-a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;flag test *string&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleFlagStringPointPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;-str-a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stra&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>flagStrA<span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// stra</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过由于flag.String()返回的是指针类型的字符串，因此，也可以使用下面方式定义</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Example2：如果期望定义字符串类型，可以通过init函数初始化</span>
<span class="token keyword">var</span> flagStrB <span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// flag.StringVar可以绑定已有的变量</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flagStrB<span class="token punctuation">,</span> <span class="token string">&quot;str-b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;str-b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;flag test string&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleFlagStringPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;-str-b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;strb&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>flagStrB<span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// strb</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="int类型" tabindex="-1"><a class="header-anchor" href="#int类型" aria-hidden="true">#</a> int类型</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Example3：int类型变量</span>
<span class="token keyword">var</span> flagInt <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;flag test *int&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleFlagIntPointPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;-int&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>flagInt<span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// 10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bool类型" tabindex="-1"><a class="header-anchor" href="#bool类型" aria-hidden="true">#</a> Bool类型</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Example3：int类型变量</span>
<span class="token keyword">var</span> flagInt <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;flag test *int&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">bool类型可以使用以下字面量</p><p>1, 0, t, f, T, F, true, false, TRUE, FALSE, True, False</p></div><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleBoolPointPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;-bool=True&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>flagBool<span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项</p><h4 id="bool类型不可使用-flag-x形式" tabindex="-1"><a class="header-anchor" href="#bool类型不可使用-flag-x形式" aria-hidden="true">#</a> bool类型不可使用：-flag x形式</h4><div class="hint-container warning"><p class="hint-container-title">注意</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleBoolPointNoticPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;-bool&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>flagBool<span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然显示的传入<code>false</code>，但是最终结果是<code>true</code></p></div><h4 id="bool类型-flag形式-认为true" tabindex="-1"><a class="header-anchor" href="#bool类型-flag形式-认为true" aria-hidden="true">#</a> bool类型：-flag形式，认为true</h4><div class="hint-container warning"><p class="hint-container-title">注意</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleBoolPointEmptyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;-bool&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>flagBool<span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="duration类型" tabindex="-1"><a class="header-anchor" href="#duration类型" aria-hidden="true">#</a> duration类型</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Example5：duration类型变量</span>
<span class="token keyword">var</span> flagDuration <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token string">&quot;duration&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Minute<span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;flag test *duration&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleFlagDurationPointPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;-duration&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1m1s&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>flagDuration<span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// 1m1s</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高阶用法" tabindex="-1"><a class="header-anchor" href="#高阶用法" aria-hidden="true">#</a> 高阶用法</h2><p>flag标准库提供了基础的数据类型参数，如下：</p><ul><li>bool</li><li>int</li><li>int64</li><li>uint</li><li>uint64</li><li>string</li><li>float64</li><li>duration</li></ul><h3 id="自定义类型" tabindex="-1"><a class="header-anchor" href="#自定义类型" aria-hidden="true">#</a> 自定义类型</h3><p>如果需要自定义类型，需要实现<code>flag.Value</code>接口</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Value <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token function">Set</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Example6: 自定义类型</span>
<span class="token keyword">type</span> URLValue <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	URL <span class="token operator">*</span>url<span class="token punctuation">.</span>URL
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>v URLValue<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>URL <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> v<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>URLValue<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> u<span class="token punctuation">,</span> err <span class="token operator">:=</span> url<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		v<span class="token punctuation">.</span>URL <span class="token operator">=</span> u
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> u URLValue

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">Var</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;flag test self struct&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleStructPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;-url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://golang.org/pkg/flag/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// https://golang.org/pkg/flag/</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子命令" tabindex="-1"><a class="header-anchor" href="#子命令" aria-hidden="true">#</a> 子命令</h3>`,39),d={href:"https://gobyexample.com/command-line-subcommands",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;flag&quot;</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    fooCmd <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">NewFlagSet</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> flag<span class="token punctuation">.</span>ExitOnError<span class="token punctuation">)</span>
    fooEnable <span class="token operator">:=</span> fooCmd<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">&quot;enable&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;enable&quot;</span><span class="token punctuation">)</span>
    fooName <span class="token operator">:=</span> fooCmd<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>

    barCmd <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">NewFlagSet</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> flag<span class="token punctuation">.</span>ExitOnError<span class="token punctuation">)</span>
    barLevel <span class="token operator">:=</span> barCmd<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;level&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;level&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;expected &#39;foo&#39; or &#39;bar&#39; subcommands&quot;</span><span class="token punctuation">)</span>
        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">switch</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>

    <span class="token keyword">case</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">:</span>
        fooCmd<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;subcommand &#39;foo&#39;&quot;</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;  enable:&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>fooEnable<span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;  name:&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>fooName<span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;  tail:&quot;</span><span class="token punctuation">,</span> fooCmd<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">:</span>
        barCmd<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;subcommand &#39;bar&#39;&quot;</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;  level:&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>barLevel<span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;  tail:&quot;</span><span class="token punctuation">,</span> barCmd<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;expected &#39;foo&#39; or &#39;bar&#39; subcommands&quot;</span><span class="token punctuation">)</span>
        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./command-line-subcommands foo <span class="token parameter variable">-enable</span> <span class="token parameter variable">-name</span><span class="token operator">=</span>joe a1 a2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>subcommand &#39;foo&#39;
  enable: true
  name: joe
  tail: [a1 a2]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./command-line-subcommands bar <span class="token parameter variable">-level</span> <span class="token number">8</span> a1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>subcommand &#39;bar&#39;
  level: 8
  tail: [a1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="底层结构" tabindex="-1"><a class="header-anchor" href="#底层结构" aria-hidden="true">#</a> 底层结构</h2><p>Flag代表一个标志，例如:<code>--version</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// A Flag represents the state of a flag.</span>
<span class="token keyword">type</span> Flag <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name     <span class="token builtin">string</span> <span class="token comment">// name as it appears on command line</span>
	Usage    <span class="token builtin">string</span> <span class="token comment">// help message</span>
	Value    Value  <span class="token comment">// value as set</span>
	DefValue <span class="token builtin">string</span> <span class="token comment">// default value (as text); for usage message</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FlagSet 代表标志的集合，例如：<code>--name</code>、<code>--age</code>...</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> FlagSet <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token comment">// Usage is the function called when an error occurs while parsing flags.</span>
	<span class="token comment">// The field is a function (not a method) that may be changed to point to</span>
	<span class="token comment">// a custom error handler. What happens after Usage is called depends</span>
	<span class="token comment">// on the ErrorHandling setting; for the command line, this defaults</span>
	<span class="token comment">// to ExitOnError, which exits the program after calling Usage.</span>
	Usage <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	name          <span class="token builtin">string</span>
	parsed        <span class="token builtin">bool</span>
	actual        <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Flag
	formal        <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Flag
	args          <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// arguments after flags</span>
	errorHandling ErrorHandling
	output        io<span class="token punctuation">.</span>Writer <span class="token comment">// nil means stderr; use Output() accessor</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FlagSet包含一系列方法：</p><ul><li>BoolVar(p *bool,name string,value bool,usage string)</li><li>Bool(name string,value bool,usage string) *bool</li><li>IntVar(p *int,name string,value int,usage string)</li><li>Int(name string,value int,usage string) *int</li><li>Int64Var(p *int64,name string,value int64,usage string)</li><li>Int64(name string,value int64,usage string) *int64</li><li>UIntVar(p *uint,name string,value uint,usage string)</li><li>UInt(name string,value uint,usage string) *Uint</li><li>UInt64Var(p *uint64,name string,value uint64,usage string)</li><li>UInt64(name string,value uint64,usage string) *Uint64</li><li>StringVar(p *string,name string,value string,usage string)</li><li>String(name string,value string,usage string) *string</li><li>Float64Var(p *float64,name string,value float64,usage string)</li><li>Float64(name string,value float64,usage string) *float64</li><li>DurationVar(p *time.Duration,name string,value time.Duration,usage string)</li><li>Duration(name string,value time.Duration,usage string) *time.Duration</li><li>TextVar(p encoding.TextUnmarshaler,name string,value encoding.TextMarshaler,usage string)</li><li>Var(value Value, name string, usage string)</li></ul><p>而我们常常使用的是flag库中的以下方法，例如：<code>flag.StringVar()</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">StringVar</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">,</span> usage <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	CommandLine<span class="token punctuation">.</span><span class="token function">Var</span><span class="token punctuation">(</span><span class="token function">newStringValue</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> usage<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其本质上是调用<code>CommandLine.Var</code>方法，而CommandLine是FlagSet的一个实例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> CommandLine <span class="token operator">=</span> <span class="token function">NewFlagSet</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ExitOnError<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>os.Args[0]</code>：是程序运行时的名称。</li><li><code>ExitOnError</code>：是解析参数时遇到错误时退出</li></ul><p><code>flag.Parse</code>其本质上也是调用CommandLine的解析，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Ignore errors; CommandLine is set for ExitOnError.</span>
	CommandLine<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它将<code>os.Args[1:]</code>，即除了程序名称外，其余的参数传给CommandLine进行解析。</p><p>最为核心的代码莫过于参数的解析，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>FlagSet<span class="token punctuation">)</span> <span class="token function">Parse</span><span class="token punctuation">(</span>arguments <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	f<span class="token punctuation">.</span>parsed <span class="token operator">=</span> <span class="token boolean">true</span>
	f<span class="token punctuation">.</span>args <span class="token operator">=</span> arguments
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		seen<span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">parseOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> seen <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">switch</span> f<span class="token punctuation">.</span>errorHandling <span class="token punctuation">{</span>
		<span class="token keyword">case</span> ContinueOnError<span class="token punctuation">:</span>
			<span class="token keyword">return</span> err
		<span class="token keyword">case</span> ExitOnError<span class="token punctuation">:</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> ErrHelp <span class="token punctuation">{</span>
				os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> PanicOnError<span class="token punctuation">:</span>
			<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里循环解析每一个Flag，即：<code>f.parseOne()</code>。</p><p>最后总结其中的关系图:</p><figure><img src="`+l+'" alt="flag" tabindex="0" loading="lazy"><figcaption>flag</figcaption></figure>',26);function v(m,g){const t=p("ExternalLinkIcon");return o(),i("div",null,[r,n("p",null,[s("这里参考网站示例："),n("a",d,[s("gobyexample"),c(t)])]),k])}const h=e(u,[["render",v],["__file","flag.html.vue"]]);export{h as default};
