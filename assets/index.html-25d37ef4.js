const e=JSON.parse('{"key":"v-490a23c6","path":"/design-pattern/structural/","title":"结构型模式","lang":"zh-CN","frontmatter":{"title":"结构型模式","date":"2023-07-31T00:00:00.000Z","tag":["Go","结构型模式"],"category":["设计模式"],"description":"结构型设计模式 结构型设计模式是一组用于组织类和对象之间关系的设计模式，它们通常用于提高代码的可维护性、可扩展性和可重用性。结构型设计模式分为类结构型模式和对象结构型模式。 其中： 类结构型模式关注类之间的组合，例如装饰器模式、适配器模式、代理模式等；而对象结构型模式关注对象之间的组合，例如组合模式、享元模式等。 类结构型模式更侧重于对象之间的静态关系，即在编译时期已经确定相关类之间的关系，而对象结构型模式更侧重于对象之间的动态关系，即在运行时期可以动态添加或移除对象。 类结构型模式的使用场景更为广泛，适用于不同的问题领域；而对象结构型模式更加专注于一些具体的问题场景。","head":[["meta",{"property":"og:url","content":"https://Hexiaopi.github.io/design-pattern/structural/"}],["meta",{"property":"og:site_name","content":"Hexiaopi"}],["meta",{"property":"og:title","content":"结构型模式"}],["meta",{"property":"og:description","content":"结构型设计模式 结构型设计模式是一组用于组织类和对象之间关系的设计模式，它们通常用于提高代码的可维护性、可扩展性和可重用性。结构型设计模式分为类结构型模式和对象结构型模式。 其中： 类结构型模式关注类之间的组合，例如装饰器模式、适配器模式、代理模式等；而对象结构型模式关注对象之间的组合，例如组合模式、享元模式等。 类结构型模式更侧重于对象之间的静态关系，即在编译时期已经确定相关类之间的关系，而对象结构型模式更侧重于对象之间的动态关系，即在运行时期可以动态添加或移除对象。 类结构型模式的使用场景更为广泛，适用于不同的问题领域；而对象结构型模式更加专注于一些具体的问题场景。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-31T14:52:38.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"结构型模式"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-31T14:52:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-31T14:52:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"结构型设计模式","slug":"结构型设计模式","link":"#结构型设计模式","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]}],"git":{"createdTime":1690708801000,"updatedTime":1690815158000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":1.92,"words":575},"filePathRelative":"design-pattern/structural/README.md","localizedDate":"2023年7月31日","excerpt":"<h2> 结构型设计模式</h2>\\n<blockquote>\\n<p>结构型设计模式是一组用于组织类和对象之间关系的设计模式，它们通常用于提高代码的可维护性、可扩展性和可重用性。结构型设计模式分为<code>类结构型模式</code>和<code>对象结构型模式</code>。</p>\\n</blockquote>\\n<p>其中：</p>\\n<ul>\\n<li><code>类结构型模式</code>关注类之间的组合，例如装饰器模式、适配器模式、代理模式等；而<code>对象结构型模式</code>关注对象之间的组合，例如组合模式、享元模式等。</li>\\n<li><code>类结构型模式</code>更侧重于对象之间的静态关系，即在编译时期已经确定相关类之间的关系，而<code>对象结构型模式</code>更侧重于对象之间的动态关系，即在运行时期可以动态添加或移除对象。</li>\\n<li><code>类结构型模式</code>的使用场景更为广泛，适用于不同的问题领域；而<code>对象结构型模式</code>更加专注于一些具体的问题场景。</li>\\n</ul>","autoDesc":true}');export{e as data};
