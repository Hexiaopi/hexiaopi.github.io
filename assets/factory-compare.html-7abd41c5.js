const t=JSON.parse('{"key":"v-7c3c1772","path":"/design-pattern/creational/factory-compare.html","title":"工厂模式的比较","lang":"zh-CN","frontmatter":{"title":"工厂模式的比较","date":"2023-07-31T00:00:00.000Z","tag":["Go","创建型模式"],"category":["设计模式"],"description":"简单工厂模式：适用于需要根据客户端的输入来创建对象的场景，但不符合开闭原则，随着产品的增加需要修改工厂类。 工厂方法模式：通过将具体产品的创建延迟到子类中实现，符合开闭原则，每个具体工厂类负责创建一个具体产品。 抽象工厂模式：适用于需要创建一组相关产品对象的场景，每个具体工厂类负责创建一组相关产品。 选择适合的创建型设计模式取决于具体的项目需求和设计考虑，简单工厂模式简单易懂但可扩展性差，工厂方法模式更灵活但需要额外的子类，而抽象工厂模式适用于创建一组相关的产品对象。","head":[["meta",{"property":"og:url","content":"https://Hexiaopi.github.io/design-pattern/creational/factory-compare.html"}],["meta",{"property":"og:site_name","content":"Hexiaopi"}],["meta",{"property":"og:title","content":"工厂模式的比较"}],["meta",{"property":"og:description","content":"简单工厂模式：适用于需要根据客户端的输入来创建对象的场景，但不符合开闭原则，随着产品的增加需要修改工厂类。 工厂方法模式：通过将具体产品的创建延迟到子类中实现，符合开闭原则，每个具体工厂类负责创建一个具体产品。 抽象工厂模式：适用于需要创建一组相关产品对象的场景，每个具体工厂类负责创建一组相关产品。 选择适合的创建型设计模式取决于具体的项目需求和设计考虑，简单工厂模式简单易懂但可扩展性差，工厂方法模式更灵活但需要额外的子类，而抽象工厂模式适用于创建一组相关的产品对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-31T14:52:38.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-31T14:52:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式的比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-31T14:52:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[],"git":{"createdTime":1690815158000,"updatedTime":1690815158000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":1}]},"readingTime":{"minutes":0.81,"words":242},"filePathRelative":"design-pattern/creational/factory-compare.md","localizedDate":"2023年7月31日","excerpt":"<p>简单工厂模式：适用于需要根据客户端的输入来创建对象的场景，但不符合<code>开闭原则</code>，随着产品的增加需要修改工厂类。</p>\\n<p>工厂方法模式：通过将具体产品的创建延迟到子类中实现，符合<code>开闭原则</code>，每个具体工厂类负责创建一个具体产品。</p>\\n<p>抽象工厂模式：适用于需要创建一组相关产品对象的场景，每个具体工厂类负责创建一组相关产品。</p>\\n<p>选择适合的创建型设计模式取决于具体的项目需求和设计考虑，简单工厂模式简单易懂但可扩展性差，工厂方法模式更灵活但需要额外的子类，而抽象工厂模式适用于创建一组相关的产品对象。</p>\\n","autoDesc":true}');export{t as data};
