import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,e as n,b as t,o}from"./app-i80Q2IAA.js";const p="/assets/mediator-DJfMxSgU.png",i={},c=n("figure",null,[n("img",{src:"https://refactoringguru.cn/images/patterns/content/mediator/mediator-2x.png",alt:"mediator",tabindex:"0",loading:"lazy"}),n("figcaption",null,"mediator")],-1),l=t('<h2 id="什么是中介者模式" tabindex="-1"><a class="header-anchor" href="#什么是中介者模式"><span>什么是中介者模式</span></a></h2><p>中介者模式(Mediator Pattern)又叫调停者模式，通过在中间引入中介对象来协调各个对象之间交互，使得对象之间不直接交互，而是通过中介者进行通信和协调，从而使得各个对象能够更加灵活地进行组合和拆分，增强系统的可维护性和扩展性。</p><h3 id="包含哪些角色" tabindex="-1"><a class="header-anchor" href="#包含哪些角色"><span>包含哪些角色</span></a></h3><figure><img src="'+p+`" alt="mediator" tabindex="0" loading="lazy"><figcaption>mediator</figcaption></figure><ul><li><p>Mediator：中介者</p><p>定义了中介者的接口，即通过该接口与其他组件交互</p></li><li><p>ConcreteMediator：具体中介者</p><p>实现了中介者的接口，维护其他组件之间的交互关系。</p></li><li><p>Colleague：同事</p><p>定义组件的接口，即通过该接口与中介者交互。</p></li><li><p>ConcreteColleague：具体同事</p><p>实现了组件的接口，维护自己与其他组件之间的交互关系。注意，同事之间不会直接交互，而是通过中介者来完成交互。</p></li></ul><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> mediator

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> Mediator <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Coordinate</span><span class="token punctuation">(</span>colleague Colleague<span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Colleague <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">SendMessage</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span>
	<span class="token function">ReceiveMessage</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ConcreteColleague1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	mediator Mediator
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>ConcreteColleague1<span class="token punctuation">)</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreateColleague1 send message:&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>mediator<span class="token punctuation">.</span><span class="token function">Coordinate</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>ConcreteColleague1<span class="token punctuation">)</span> <span class="token function">ReceiveMessage</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreateColleague1 receive message:&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ConcreteColleague2 <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	mediator Mediator
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>ConcreteColleague2<span class="token punctuation">)</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreateColleague2 send message:&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>mediator<span class="token punctuation">.</span><span class="token function">Coordinate</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>ConcreteColleague2<span class="token punctuation">)</span> <span class="token function">ReceiveMessage</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ConcreateColleague2 receive message:&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ConcreteMediator <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	ConcreteColleague1
	ConcreteColleague2
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c ConcreteMediator<span class="token punctuation">)</span> <span class="token function">Coordinate</span><span class="token punctuation">(</span>colleague Colleague<span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> colleague<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>ConcreteColleague1<span class="token punctuation">:</span>
		c<span class="token punctuation">.</span>ConcreteColleague2<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>ConcreteColleague2<span class="token punctuation">:</span>
		c<span class="token punctuation">.</span>ConcreteColleague1<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> mediator

<span class="token keyword">func</span> <span class="token function">ExampleMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mediator <span class="token operator">:=</span> ConcreteMediator<span class="token punctuation">{</span><span class="token punctuation">}</span>
	colleague1 <span class="token operator">:=</span> ConcreteColleague1<span class="token punctuation">{</span>mediator<span class="token punctuation">:</span> mediator<span class="token punctuation">}</span>
	colleague2 <span class="token operator">:=</span> ConcreteColleague2<span class="token punctuation">{</span>mediator<span class="token punctuation">:</span> mediator<span class="token punctuation">}</span>
	mediator<span class="token punctuation">.</span>ConcreteColleague1 <span class="token operator">=</span> colleague1
	mediator<span class="token punctuation">.</span>ConcreteColleague2 <span class="token operator">=</span> colleague2

	colleague1<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
	colleague2<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// ConcreateColleague1 send message: hello</span>
	<span class="token comment">// ConcreateColleague2 receive message: hello</span>
	<span class="token comment">// ConcreateColleague2 send message: hi</span>
	<span class="token comment">// ConcreateColleague1 receive message: hi</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li><p>降低系统复杂度：通过中介者对象，可以将系统中多个对象之间的直接交互关系转化为对中介者对象的请求调用，从而简化了系统的复杂度；</p></li><li><p>减低系统维护成本：通过减少对象之间的直接耦合度，提高了系统的灵活性和可维护性，降低了系统维护的成本；</p></li><li><p>提高系统扩展性：由于中介者对象独立负责对象之间的通信协调，因此增加、删除或修改一个对象都不会影响其他对象的交互关系，从而提高了系统的可扩展性。</p></li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li><p>中介者对象会引入系统的复杂度：虽然中介者对象可以简化系统的复杂度，但如果中介者对象本身过于复杂，可能会引入新的复杂度；</p></li><li><p>中介者对象可能成为系统的<strong>瓶颈</strong>：由于所有的交互都要经过中介者对象，当系统中对象数量较多或交互复杂时，中介者对象可能成为系统的瓶颈。</p></li></ul>`,14);function u(r,d){return o(),s("div",null,[c,e(" more "),l])}const g=a(i,[["render",u],["__file","mediator.html.vue"]]),v=JSON.parse('{"path":"/design-pattern/behavioral/mediator.html","title":"中介者","lang":"zh-CN","frontmatter":{"title":"中介者","date":"2023-04-29T00:00:00.000Z","tag":["Go","行为型模式"],"category":["设计模式"],"description":"mediatormediator","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/design-pattern/behavioral/mediator.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"中介者"}],["meta",{"property":"og:description","content":"mediatormediator"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoringguru.cn/images/patterns/content/mediator/mediator-2x.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-31T14:52:38.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"行为型模式"}],["meta",{"property":"article:published_time","content":"2023-04-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-31T14:52:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中介者\\",\\"image\\":[\\"https://refactoringguru.cn/images/patterns/content/mediator/mediator-2x.png\\"],\\"datePublished\\":\\"2023-04-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-31T14:52:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"什么是中介者模式","slug":"什么是中介者模式","link":"#什么是中介者模式","children":[{"level":3,"title":"包含哪些角色","slug":"包含哪些角色","link":"#包含哪些角色","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]}],"git":{"createdTime":1690708801000,"updatedTime":1690815158000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":2.39,"words":716},"filePathRelative":"design-pattern/behavioral/mediator.md","localizedDate":"2023年4月29日","excerpt":"<figure><img src=\\"https://refactoringguru.cn/images/patterns/content/mediator/mediator-2x.png\\" alt=\\"mediator\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>mediator</figcaption></figure>\\n","autoDesc":true}');export{g as comp,v as data};
