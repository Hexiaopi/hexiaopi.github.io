import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e,f as t}from"./app-CZ3y1Fod.js";const o="/assets/producer-consumer-SGS2VQir.png",p={},c=t('<p><strong>生产者/消费者</strong>模式是并发编程中常见的模型，该模型主要通过平衡生产者和消费者来提高程序的整体处理数据的能力</p><h2 id="生产者-消费者模式" tabindex="-1"><a class="header-anchor" href="#生产者-消费者模式"><span>生产者/消费者模式</span></a></h2><p>该模型中：生产者生产数据，放到队列中，消费者从队列中取数据。这样生产者和消费者变成异步的两个过程。</p><figure><img src="'+o+`" alt="producer-consumer" tabindex="0" loading="lazy"><figcaption>producer-consumer</figcaption></figure><p>定义生产者</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Producer: 生产factor倍数</span>
<span class="token keyword">func</span> <span class="token function">Producer</span><span class="token punctuation">(</span>factor <span class="token builtin">int</span><span class="token punctuation">,</span> out <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		out <span class="token operator">&lt;-</span> i <span class="token operator">*</span> factor
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义消费者</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Consumer: 消费打印队列</span>
<span class="token keyword">func</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>in <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> in <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动生产者和消费者模型</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Producer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Producer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们启动：</p><ul><li>两个生产者，分别生产3的倍数、5的倍数</li><li>一个消费者，打印队列中的数据</li></ul>`,12);function i(l,r){return a(),s("div",null,[e(" more "),c])}const m=n(p,[["render",i],["__file","producer-consumer.html.vue"]]),k=JSON.parse('{"path":"/design-pattern/concurrency/producer-consumer.html","title":"生产者/消费者模式","lang":"zh-CN","frontmatter":{"title":"生产者/消费者模式","date":"2023-08-22T00:00:00.000Z","tag":["Go","并发模式"],"category":["设计模式"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/design-pattern/concurrency/producer-consumer.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"生产者/消费者模式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T15:52:14.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"并发模式"}],["meta",{"property":"article:published_time","content":"2023-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-05T15:52:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生产者/消费者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-05T15:52:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"生产者/消费者模式","slug":"生产者-消费者模式","link":"#生产者-消费者模式","children":[]}],"git":{"createdTime":1692713124000,"updatedTime":1714924334000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":1},{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":1}]},"readingTime":{"minutes":0.86,"words":257},"filePathRelative":"design-pattern/concurrency/producer-consumer.md","localizedDate":"2023年8月22日","excerpt":""}');export{m as comp,k as data};
