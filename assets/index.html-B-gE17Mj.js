import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as a,a as i,d as l,b as c,o as r}from"./app-BxIvKJnO.js";const n={},d=c('<h2 id="结构型设计模式" tabindex="-1"><a class="header-anchor" href="#结构型设计模式"><span>结构型设计模式</span></a></h2><blockquote><p>结构型设计模式是一组用于组织类和对象之间关系的设计模式，它们通常用于提高代码的可维护性、可扩展性和可重用性。结构型设计模式分为<code>类结构型模式</code>和<code>对象结构型模式</code>。</p></blockquote><p>其中：</p><ul><li><code>类结构型模式</code>关注类之间的组合，例如装饰器模式、适配器模式、代理模式等；而<code>对象结构型模式</code>关注对象之间的组合，例如组合模式、享元模式等。</li><li><code>类结构型模式</code>更侧重于对象之间的静态关系，即在编译时期已经确定相关类之间的关系，而<code>对象结构型模式</code>更侧重于对象之间的动态关系，即在运行时期可以动态添加或移除对象。</li><li><code>类结构型模式</code>的使用场景更为广泛，适用于不同的问题领域；而<code>对象结构型模式</code>更加专注于一些具体的问题场景。</li></ul><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h3><ul><li>都可以用于组织和组合类之间的关系；</li><li>在代码中提供了高度模块化的方式，便于代码的重用和维护；</li><li>通过组合、代理、继承等方式，可以更加灵活地设计类的层次结构；</li><li>可以降低系统的复杂度，提高代码的可读性和可维护性。</li></ul><h3 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点"><span>不同点</span></a></h3><ul><li>代理模式旨在控制对对象的访问，为使用者提供简化的接口，同时也可以提升对象的访问效率；</li><li>适配器模式旨在将不同对象之间的接口协调起来，使它们能够协同工作；</li><li>桥接模式旨在将类的抽象和实现分离出来，使得两者可以独立地变化；</li><li>装饰器模式旨在动态地添加类的额外行为，而无需修改类的接口和实现；</li><li>外观模式旨在将一组紧密相关的类中的复杂逻辑抽象出来，提供一个简单的接口给使用者；</li><li>享元模式旨在共享多个具有相同状态的对象，以减少内存的占用。</li></ul>',8);function p(s,m){const e=o("Catalog");return r(),a("div",null,[i(" more "),d,l(e)])}const g=t(n,[["render",p],["__file","index.html.vue"]]),_=JSON.parse('{"path":"/design-pattern/structural/","title":"结构型模式","lang":"zh-CN","frontmatter":{"title":"结构型模式","icon":"sitemap","date":"2023-07-31T00:00:00.000Z","tag":["Go","结构型模式"],"category":["设计模式"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/design-pattern/structural/"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"结构型模式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T02:44:40.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"结构型模式"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T02:44:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T02:44:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"结构型设计模式","slug":"结构型设计模式","link":"#结构型设计模式","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]}],"git":{"createdTime":1642859663000,"updatedTime":1714963480000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":3},{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":1.93,"words":580},"filePathRelative":"design-pattern/structural/README.md","localizedDate":"2023年7月31日","excerpt":""}');export{g as comp,_ as data};
