import{_ as a}from"./MySQL-Read-Simple-1q8N7gNF.js";import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,b as t,o}from"./app-DDK3OIAQ.js";const p="/assets/MySQL-Read-Process-C4JIxiFV.png",r="/assets/MySQL-AST-DSTVcl0J.png",l={},i=t('<h2 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程"><span>执行流程</span></a></h2><p>简单的查询过程如下：</p><figure><img src="'+a+'" alt="MySQL交互流程" tabindex="0" loading="lazy"><figcaption>MySQL交互流程</figcaption></figure><p>详细的查询过程如下：</p><figure><img src="'+p+`" alt="MySQL查询流程" tabindex="0" loading="lazy"><figcaption>MySQL查询流程</figcaption></figure><h3 id="连接器" tabindex="-1"><a class="header-anchor" href="#连接器"><span>连接器</span></a></h3><blockquote><p>连接器负责跟客户端建立连接、获取权限、维持和管理连接。</p></blockquote><p>我们使用以下命令和MySQL建立连接</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql -h<span class="token variable">$ip</span> -p<span class="token variable">$port</span> -u<span class="token variable">$user</span> <span class="token parameter variable">-P</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果用户名或密码不对，就会收到一个<code>Access denied for user</code>的错误</li><li>如果用户名密码认证通过，连接器会到权限表里查出当前用户的权限。</li></ul><p>我们使用<code>show processlist</code>命令可以查看当前建立的连接以及执行的动作</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show processlist<span class="token punctuation">;</span>
+----+-----------------+-----------+------+---------+---------+------------------------+------------------+
<span class="token operator">|</span> Id <span class="token operator">|</span> User            <span class="token operator">|</span> Host      <span class="token operator">|</span> db   <span class="token operator">|</span> Command <span class="token operator">|</span> Time    <span class="token operator">|</span> State                  <span class="token operator">|</span> Info             <span class="token operator">|</span>
+----+-----------------+-----------+------+---------+---------+------------------------+------------------+
<span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> event_scheduler <span class="token operator">|</span> localhost <span class="token operator">|</span> NULL <span class="token operator">|</span> Daemon  <span class="token operator">|</span> <span class="token number">2486885</span> <span class="token operator">|</span> Waiting on empty queue <span class="token operator">|</span> NULL             <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">23</span> <span class="token operator">|</span> root            <span class="token operator">|</span> localhost <span class="token operator">|</span> NULL <span class="token operator">|</span> Query   <span class="token operator">|</span>       <span class="token number">0</span> <span class="token operator">|</span> starting               <span class="token operator">|</span> show processlist <span class="token operator">|</span>
+----+-----------------+-----------+------+---------+---------+------------------------+------------------+
<span class="token number">2</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.07</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询缓存" tabindex="-1"><a class="header-anchor" href="#查询缓存"><span>查询缓存</span></a></h3><blockquote><p><code>&lt;=MySQL5.7版本</code>，自带缓存模块，默认关闭；</p><p><code>&gt;=MySQL5.8版本</code>，移除缓存模块</p></blockquote><p>MySQL拿到一个查询请求后，会先进行缓存查询，如果之前执行的语句有缓存，则直接返回；</p><p>缓存的限制：</p><ul><li>sql语句完全一致</li><li>表里的数据不发生变化，如果发生变化，这张表的所有缓存都会失效</li></ul><p>因此，<strong>不建议使用查询缓存</strong>！</p><h3 id="分析器" tabindex="-1"><a class="header-anchor" href="#分析器"><span>分析器</span></a></h3><blockquote><p>分析器对SQL语句进行词法分析、语法分析、语义检查，得到语法树，在这个阶段，输入的是一条SQL语句，输出的是一棵语法树（AST）。</p></blockquote><ul><li><p><strong>词法分析</strong>：从左到右一个字符、一个字符的读入源输入，根据构词规则识别出一条SQL语句里面的字符串分别是什么，代表什么。</p></li><li><p><strong>语法分析</strong>：在词法分析的基础上将单词序列组合成各类语法短语，如：“程序”、“语句”、“表达式”等。判断输入的这个SQL语句是否满足MySQL语法。如果语句不对，就会收到<code>You have an error in your SQL syntax</code>的错误提醒。</p></li><li><p><strong>语义检查</strong>：对语法分析树进行逻辑判断，例如：</p><ul><li>检查表名是否错误（存在）</li><li>检查列名是否错误（存在）</li><li>检查别名是否错误（保证没有歧义）</li></ul></li></ul><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;ACTIVE&#39;</span> <span class="token operator">AND</span> age <span class="token operator">&gt;</span> <span class="token number">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解析为语法树如下：</p><figure><img src="`+r+`" alt="ast" tabindex="0" loading="lazy"><figcaption>ast</figcaption></figure><p><a href="https://shardingsphere.apache.org/document/current/cn/reference/sharding/parse/" target="_blank" rel="noopener noreferrer">参考链接</a></p><h3 id="优化器" tabindex="-1"><a class="header-anchor" href="#优化器"><span>优化器</span></a></h3><p>经过分析器，MySQL知道你需要做什么，在开始执行之前，还需要经过优化器的处理。</p><p>例如：优化器在表里面有多个索引的时候，决定使用哪个索引，或者在一个语句有多表关联(join)的时候，决定各个表的连接顺序。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">join</span> t2 <span class="token keyword">using</span><span class="token punctuation">(</span>ID<span class="token punctuation">)</span> <span class="token keyword">where</span> t1<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> t2<span class="token punctuation">.</span>d<span class="token operator">=</span><span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>即可以先从表t1里面取出c=10的记录，再根据ID关联到表t2，再判断t2里面的d的值是否等于20</li><li>也可以先从表t2里面取出d=20的记录，再根据ID关联到表t1，再判断t1里面的c的值是否等于10</li></ul><p>这两种执行方案的逻辑一致，但是执行的效率会有不同，优化器会决定选择使用哪一个方案。</p><h4 id="逻辑优化" tabindex="-1"><a class="header-anchor" href="#逻辑优化"><span>逻辑优化</span></a></h4><blockquote><p>优化器在逻辑优化阶段主要解决的问题是：如何找出SQL语句等价的变换形式，使得SQL执行更高效。</p></blockquote><h4 id="物理优化" tabindex="-1"><a class="header-anchor" href="#物理优化"><span>物理优化</span></a></h4><blockquote><p>根据数据库的状态统计信息（数据库通过采样，统计出来的表、索引的相关信息，例如：表的记录数、索引的page数量、字段的Cardinality）计算各种操作算法的执行代价，定量的选择最优的查询方式。</p></blockquote><h3 id="执行器" tabindex="-1"><a class="header-anchor" href="#执行器"><span>执行器</span></a></h3><blockquote><p>MySQL通过分析器知道了要做什么，通过优化器知道了该怎么做，就会进入执行器阶段，开始执行语句</p></blockquote><p>开始之前，先判断一下用户对表有没有查询的权限，如果没有就会返回没有权限错误，如果有权限，就打开表继续执行，执行器根据表的引擎定义，去使用这个引擎提供的接口。</p>`,39);function c(d,m){return o(),s("div",null,[n(" more "),i])}const g=e(l,[["render",c],["__file","read-process.html.vue"]]),b=JSON.parse('{"path":"/database/mysql/read-process.html","title":"查询过程","lang":"zh-CN","frontmatter":{"title":"查询过程","date":"2022-10-22T00:00:00.000Z","order":1,"cover":"/assets/images/MySQL-Read-Simple.png","tag":["MySQL"],"category":["数据存储"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/database/mysql/read-process.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"查询过程"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://blog.cjhe.top/assets/images/MySQL-Read-Simple.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-20T03:37:50.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"http://blog.cjhe.top/assets/images/MySQL-Read-Simple.png"}],["meta",{"name":"twitter:image:alt","content":"查询过程"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2022-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-20T03:37:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"查询过程\\",\\"image\\":[\\"http://blog.cjhe.top/assets/images/MySQL-Read-Simple.png\\"],\\"datePublished\\":\\"2022-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-20T03:37:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"执行流程","slug":"执行流程","link":"#执行流程","children":[{"level":3,"title":"连接器","slug":"连接器","link":"#连接器","children":[]},{"level":3,"title":"查询缓存","slug":"查询缓存","link":"#查询缓存","children":[]},{"level":3,"title":"分析器","slug":"分析器","link":"#分析器","children":[]},{"level":3,"title":"优化器","slug":"优化器","link":"#优化器","children":[]},{"level":3,"title":"执行器","slug":"执行器","link":"#执行器","children":[]}]}],"git":{"createdTime":1653214706000,"updatedTime":1716176270000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":3},{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":3.52,"words":1056},"filePathRelative":"database/mysql/read-process.md","localizedDate":"2022年10月22日","excerpt":""}');export{g as comp,b as data};
