import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as i,a as r,f as l,b as t,d as e}from"./app-yfOeyOzf.js";const o={},c=l('<h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><blockquote><p>Go语言基本数据类型（Data-types）划分方式有很多，这里按照<strong>数据类型</strong>进行划分：值类型、复合类型、引用类型</p></blockquote><blockquote><p>左耳朵耗子说：类型的本质是对内存的一种抽象，不同的类型会有不同的内存布局和内存分配的策略。不同的类型有不同的操作。</p></blockquote><h3 id="值类型" tabindex="-1"><a class="header-anchor" href="#值类型"><span>值类型</span></a></h3><blockquote><p>值类型即基本的数据类型，包括布尔类型（bool）、整型（int）、浮点型（float）、字节型（byte）、复数型（complex）、字符串型（string）和错误类型（error）。</p><p>值类型的变量在传递过程中，编译器对该变量的值进行一次拷贝。</p></blockquote><h4 id="布尔型-boolean" tabindex="-1"><a class="header-anchor" href="#布尔型-boolean"><span>布尔型(Boolean)</span></a></h4><p>**关键字定义：**bool</p><p>**字节长度：**1</p><p><strong>取值范围：</strong>[true、false]</p><p>**零值：**false</p><p>👣</p><ol><li>布尔类型不接受其他数据类型赋值；</li><li>布尔类型不能进行强制类型转换；</li></ol><h4 id="整型-integer" tabindex="-1"><a class="header-anchor" href="#整型-integer"><span>整型（Integer）</span></a></h4><p>整型数据类型分为：有符号整型、无符号整型</p>',14),p=t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"类型"),t("th",{style:{"text-align":"center"}},"字节长度"),t("th",{style:{"text-align":"center"}},"取值范围")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"center"}},"int"),t("td",{style:{"text-align":"center"}},"4/8"),t("td",{style:{"text-align":"center"}},"32位系统即int32，64位系统即int64")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"int8"),t("td",{style:{"text-align":"center"}},"1"),t("td",{style:{"text-align":"center"}},[e("$-2"),t("sup",null,"7$~$2"),e("7-1$")])]),t("tr",null,[t("td",{style:{"text-align":"center"}},"int16"),t("td",{style:{"text-align":"center"}},"2"),t("td",{style:{"text-align":"center"}},[e("$-2"),t("sup",{15:""},"{15}$~$2"),e("-1$")])]),t("tr",null,[t("td",{style:{"text-align":"center"}},"int32"),t("td",{style:{"text-align":"center"}},"4"),t("td",{style:{"text-align":"center"}},[e("$-2"),t("sup",{31:""},"{31}$~$2"),e("-1$")])]),t("tr",null,[t("td",{style:{"text-align":"center"}},"int64"),t("td",{style:{"text-align":"center"}},"8"),t("td",{style:{"text-align":"center"}},[e("$-2"),t("sup",{63:""},"{63}$~$2"),e("-1$")])]),t("tr",null,[t("td",{style:{"text-align":"center"}},"uint"),t("td",{style:{"text-align":"center"}},"4/8"),t("td",{style:{"text-align":"center"}},"32位系统即uint32，64位系统即uint64")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"uint8"),t("td",{style:{"text-align":"center"}},"1"),t("td",{style:{"text-align":"center"}},"0~$2^8-1$")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"uint16"),t("td",{style:{"text-align":"center"}},"2"),t("td",{style:{"text-align":"center"}},"0~$2^{16}-1$")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"uint32"),t("td",{style:{"text-align":"center"}},"4"),t("td",{style:{"text-align":"center"}},"0~$2^{32}-1$")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"uint64"),t("td",{style:{"text-align":"center"}},"8"),t("td",{style:{"text-align":"center"}},"0~$2^{64}-1$")])])],-1),s=l('<p>**零值：**对应字节长度的0</p><p>👣</p><ul><li>由于字节范围的限制，尤其需注意“溢出”问题，可使用math包中“Max”和“Min”开头的常量帮组检查溢出；</li></ul><p><strong>整型数据的表示方法：</strong></p><ul><li>十进制，如$-123$、0、256；</li><li>八进制，以“0”开头的数是八进制，如0123表示八进制数123，即十进制的83；</li><li>十六进制，以“0x”开头的数是十六进制数，如0x123表示十六进制数123，即十进制的291；</li><li>指数形式，由数字和字母$e$组成，如$1e3$或$10e2$代表十进制的1000；</li></ul><h4 id="浮点型-floating-point-number" tabindex="-1"><a class="header-anchor" href="#浮点型-floating-point-number"><span>浮点型（Floating-point-number）</span></a></h4><p>浮点型数据，也称为实数（Real-number），可存储带有小数的数值。浮点型数据在内存中的存储形式和整数不同，是按照指数形式存储的，共有三部分组成：符号、尾数和指数。</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">字节长度</th><th style="text-align:center;">精确位数</th></tr></thead><tbody><tr><td style="text-align:center;">float32</td><td style="text-align:center;">4</td><td style="text-align:center;">精确小数点后7位</td></tr><tr><td style="text-align:center;">float64</td><td style="text-align:center;">8</td><td style="text-align:center;">精确小数点后15位</td></tr></tbody></table><p>**零值：**0</p><p><strong>浮点型数据的表示方法：</strong></p><ul><li>十进制小数形式：由数字和小数点组成，如1.57、0.12、0.0都是十进制的小数形式；</li><li>指数形式：由数字和字母$e$组成，如$1.23e3$或$12.3e2$都表示$1.23\\times10^3$；字母$e$之前必须有数字且后面的指数必须为整数；</li></ul><p>👣</p><ul><li>浮点型数据是由有限的存数单元组成的，能提供有效数字总是有限的，有效位以外的数字将被舍去，可能存在一些误差；</li></ul><h4 id="复数-complex-number" tabindex="-1"><a class="header-anchor" href="#复数-complex-number"><span>复数（Complex-number）</span></a></h4><blockquote><p>复数是由两个浮点数构成，一个表示实部（real），一个表示虚部（imag），形式如$a+bi$的数，这里的$a$、$b$是实数，$i$是虚数单位</p></blockquote><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">字节长度</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">complex64</td><td style="text-align:center;">8</td><td style="text-align:center;">由两个float32构成，因此字节长度为4+4</td></tr><tr><td style="text-align:center;">complex128</td><td style="text-align:center;">16</td><td style="text-align:center;">由两个float64构成，因此字节长度为8+8</td></tr></tbody></table><p>对于一个复数$z=complex(x,y)$，可以通过Go语言内置函数$real(z)$获得该复数的实部，也可以通过函数$imag(z)$获得该复数的虚部；</p><p>**零值：**0+0i</p><h4 id="字节型-byte" tabindex="-1"><a class="header-anchor" href="#字节型-byte"><span>字节型（Byte）</span></a></h4><blockquote><p>字节型数据在计算机中主要是来表示和存储ASCII码，即处理字符，将一个字符存放到一个字符变量中，实际上并不是把该字符本身存放到内存单元中，而是将该字符的ASCII编码存放到内存单元中。</p></blockquote><p>**关键字定义：**byte</p><p>**字节长度：**1</p><p><strong>取值范围：</strong>[0~$2^8-1$]，byte本质就是uint8。</p><p>**零值：**0</p><h4 id="字符类型-rune" tabindex="-1"><a class="header-anchor" href="#字符类型-rune"><span>字符类型（Rune）</span></a></h4><p>关键字定义：rune</p><blockquote><p>Go语言处理Unicode字符有个专用的数据类型rune，等价于int32。</p></blockquote><p>Unicode编码</p><blockquote><p>随着计算机技术在世界范围内的广泛使用，国际标准化组织（ISO）统一制定了一种可以容纳世界上所有文字和符号的字符编码方案，即Unicode编码方案。由于涉及到不同计算机架构的大小端问题（Big Endian，Little Endian）于是存在不同的Unicode字符集转换格式（UCS Transformation Format,UTF)，例如：</p><ul><li>UTF-8：使用1～4B不等长方案，西方字符通常只用一个字节，中文通常需要三个字节；</li><li>UTF-16：用2B无符号整数存储Unicode字符；</li><li>UTF-32：用4B无符号整数存储Unicode字符；</li></ul></blockquote><h4 id="uintptr类型" tabindex="-1"><a class="header-anchor" href="#uintptr类型"><span>uintptr类型</span></a></h4><blockquote><p>Go语言中，uintptr是可以保存32位或64位的指针的无符号整数类型，和int类型一样，uintptr根据操作系统决定指针位数，32位操纵系统uintptr是32位的，64位操作系统uintptr是64位的。</p></blockquote><h3 id="复合类型" tabindex="-1"><a class="header-anchor" href="#复合类型"><span>复合类型</span></a></h3><blockquote><p>复合类型即比较复杂的数据类型，包括数组（array）、结构体（struct）。数组里存放的是一组相同类型的数据，结构体里存放的是不同类型的数据。</p><p>与值类型一致，复合类型变量在传递过程也是进行值拷贝。</p></blockquote><h3 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span>引用类型</span></a></h3><blockquote><p>引用类型即指针类型，包括指针（pointer）、切片（silence）、字典（map）、通道（channel）、接口（interface）和函数（function）。</p></blockquote><p>👀</p><p>值类型和引用类型的区别在于，在函数参数传递过程中</p><ul><li>值类型的变量的值复制一份传递</li><li>引用类型的变量是把自己的内存地址传递，即拷贝地址</li></ul>',38);function d(h,u){return a(),i("div",null,[r(" more "),c,p,s])}const x=n(o,[["render",d],["__file","data-type.html.vue"]]),b=JSON.parse('{"path":"/language/go/base/data-type.html","title":"数据类型","lang":"zh-CN","frontmatter":{"title":"数据类型","date":"2022-05-03T00:00:00.000Z","tag":["Go","基础"],"category":["编程语言"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/language/go/base/data-type.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"数据类型"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T15:52:14.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:published_time","content":"2022-05-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-05T15:52:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-05T15:52:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"值类型","slug":"值类型","link":"#值类型","children":[]},{"level":3,"title":"复合类型","slug":"复合类型","link":"#复合类型","children":[]},{"level":3,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]}]}],"git":{"createdTime":1642945014000,"updatedTime":1714924334000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":4.81,"words":1444},"filePathRelative":"language/go/base/data-type.md","localizedDate":"2022年5月3日","excerpt":""}');export{x as comp,b as data};
