import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,e as n,b as e,o as p}from"./app-B1fz2wU4.js";const o="/assets/sse-progress-bar-B4xGs0eH.png",c={},i=n("blockquote",null,[n("p",null,"SSE常用于消息推送，ChatGPT采用的就是该技术。")],-1),l=e('<h2 id="什么是sse" tabindex="-1"><a class="header-anchor" href="#什么是sse"><span>什么是SSE</span></a></h2><p>SSE(Server-Sent Events)是一种允许服务器向客户端推送消息的技术，而无需客户端轮询服务器。它基于HTTP协议，通过建立一个持久的连接，服务端可以在客户端不发送新的请求的情况下，主动持续的发送数据。SSE通常用于实时消息推送、实时数据更新等场景。</p><h2 id="sse的工作原理" tabindex="-1"><a class="header-anchor" href="#sse的工作原理"><span>SSE的工作原理</span></a></h2><p>SSE的工作原理基于HTTP协议，通过建立一个持久的连接，服务端可以在客户端不发送新的请求的情况下，主动持续的发送数据。具体步骤如下：</p><ol><li>客户端向服务器发送一个HTTP请求，请求头中包含<code>Accept: text/event-stream</code>，表示客户端希望接收服务器推送的事件流。</li><li>服务器接收到请求后，会返回一个HTTP响应，响应头中包含<code>Content-Type: text/event-stream</code>，表示服务器将返回一个事件流。响应体中包含多个事件，每个事件由一个或多个数据行组成，数据行之间用换行符分隔。与传统的HTTP请求不同，这个连接不会再发送完一次响应后立即关闭。</li><li>客户端接收到服务器推送的事件流后，会解析每个事件，并根据事件类型进行相应的处理。</li></ol><h2 id="sse的示例" tabindex="-1"><a class="header-anchor" href="#sse的示例"><span>SSE的示例</span></a></h2><blockquote><p>示例展示：后端向前端推送进度，前端展示进度条。<a href="https://github.com/pcpratheesh/golang-sse-progress-bar" target="_blank" rel="noopener noreferrer">代码详见</a></p></blockquote><figure><img src="'+o+`" alt="sse--pregress-bar" tabindex="0" loading="lazy"><figcaption>sse--pregress-bar</figcaption></figure><p>后端代码分析：通过<code>c.SSEvent</code>方法，循环十次向前端推送进度消息，最后推送完成消息。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">progressor</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	noOfExecution <span class="token operator">:=</span> <span class="token number">10</span>
	progress <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> progress <span class="token operator">&lt;=</span> noOfExecution <span class="token punctuation">{</span>
		progressPercentage <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>progress<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>noOfExecution<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>

		c<span class="token punctuation">.</span><span class="token function">SSEvent</span><span class="token punctuation">(</span><span class="token string">&quot;progress&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
			<span class="token string">&quot;currentTask&quot;</span><span class="token punctuation">:</span>        progress<span class="token punctuation">,</span>
			<span class="token string">&quot;progressPercentage&quot;</span><span class="token punctuation">:</span> progressPercentage<span class="token punctuation">,</span>
			<span class="token string">&quot;noOftasks&quot;</span><span class="token punctuation">:</span>          noOfExecution<span class="token punctuation">,</span>
			<span class="token string">&quot;completed&quot;</span><span class="token punctuation">:</span>          <span class="token boolean">false</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token comment">// Flush the response to ensure the data is sent immediately</span>
		c<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		progress <span class="token operator">+=</span> <span class="token number">1</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	c<span class="token punctuation">.</span><span class="token function">SSEvent</span><span class="token punctuation">(</span><span class="token string">&quot;progress&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
		<span class="token string">&quot;completed&quot;</span><span class="token punctuation">:</span>          <span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token string">&quot;progressPercentage&quot;</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">// Flush the response to ensure the data is sent immediately</span>
	c<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端代码分析：EventSource对象用于监听服务器推送的事件流，当事件流到达时，会触发<code>progress</code>事件，事件处理函数中解析事件数据，并根据事件类型进行相应的处理。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> eventSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">&#39;progress&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

eventSource<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;progress&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>currentTask <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">progressBar</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>completed <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">closeEventStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sse-特点" tabindex="-1"><a class="header-anchor" href="#sse-特点"><span>SSE 特点</span></a></h2><p><strong>单向通信</strong></p><blockquote><p>SSE 是一种单向的通信方式，即服务器向客户端发送消息，客户端不能直接向服务器发送消息。如果需要双向通信，可以结合其他技术如 WebSocket。</p></blockquote><p><strong>实时性</strong></p><blockquote><p>由于服务器可以随时向客户端发送消息，SSE 可以实现实时的消息推送。例如，在股票交易应用中，服务器可以实时向客户端推送股票价格变化的消息。</p></blockquote><p><strong>轻量级</strong></p><blockquote><p>SSE 使用简单的文本格式进行消息传输，不需要复杂的二进制协议，因此相对轻量级。这使得它在网络带宽有限的情况下也能高效工作。</p></blockquote><p><strong>兼容性好</strong></p><blockquote><p>SSE 基于 HTTP 协议，因此可以在大多数现代浏览器中使用，无需安装额外的插件或软件。</p></blockquote>`,21);function u(r,d){return p(),a("div",null,[i,t(" more "),l])}const v=s(c,[["render",u],["__file","SSE.html.vue"]]),g=JSON.parse('{"path":"/network/application-layer/SSE.html","title":"SSE协议","lang":"zh-CN","frontmatter":{"title":"SSE协议","date":"2024-09-04T00:00:00.000Z","tag":["应用层协议","SSE"],"category":["网络"],"description":"SSE常用于消息推送，ChatGPT采用的就是该技术。","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/network/application-layer/SSE.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"SSE协议"}],["meta",{"property":"og:description","content":"SSE常用于消息推送，ChatGPT采用的就是该技术。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-09T07:40:20.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"应用层协议"}],["meta",{"property":"article:tag","content":"SSE"}],["meta",{"property":"article:published_time","content":"2024-09-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T07:40:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SSE协议\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-09T07:40:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"什么是SSE","slug":"什么是sse","link":"#什么是sse","children":[]},{"level":2,"title":"SSE的工作原理","slug":"sse的工作原理","link":"#sse的工作原理","children":[]},{"level":2,"title":"SSE的示例","slug":"sse的示例","link":"#sse的示例","children":[]},{"level":2,"title":"SSE 特点","slug":"sse-特点","link":"#sse-特点","children":[]}],"git":{"createdTime":1725457841000,"updatedTime":1725867620000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":2.79,"words":837},"filePathRelative":"network/application-layer/SSE.md","localizedDate":"2024年9月4日","excerpt":"<blockquote>\\n<p>SSE常用于消息推送，ChatGPT采用的就是该技术。</p>\\n</blockquote>\\n","autoDesc":true}');export{v as comp,g as data};
