import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as r,a as t,b as e}from"./app-AG_1cSbc.js";const c={},n=t("p",null,"简单工厂模式、工厂方法模式、抽象工厂模式都可以统称为工厂模式，其中：",-1),p=t("p",null,[e("简单工厂模式：适用于需要根据客户端的输入来创建对象的场景，但不符合"),t("code",null,"开闭原则"),e("，随着产品的增加需要修改工厂类。")],-1),i=t("p",null,[e("工厂方法模式：通过将具体产品的创建延迟到子类中实现，符合"),t("code",null,"开闭原则"),e("，每个具体工厂类负责创建一个具体产品。")],-1),l=t("p",null,"抽象工厂模式：适用于需要创建一组相关产品对象的场景，每个具体工厂类负责创建一组相关产品。",-1),m=t("p",null,"选择适合的创建型设计模式取决于具体的项目需求和设计考虑，简单工厂模式简单易懂但可扩展性差，工厂方法模式更灵活但需要额外的子类，而抽象工厂模式适用于创建一组相关的产品对象。",-1),d=[n,p,i,l,m];function s(h,_){return a(),r("div",null,d)}const y=o(c,[["render",s],["__file","factory-compare.html.vue"]]),f=JSON.parse('{"path":"/design-pattern/creational/factory-compare.html","title":"工厂模式的比较","lang":"zh-CN","frontmatter":{"title":"工厂模式的比较","date":"2023-07-31T00:00:00.000Z","tag":["Go","创建型模式"],"category":["设计模式"],"description":"简单工厂模式、工厂方法模式、抽象工厂模式都可以统称为工厂模式，其中： 简单工厂模式：适用于需要根据客户端的输入来创建对象的场景，但不符合开闭原则，随着产品的增加需要修改工厂类。 工厂方法模式：通过将具体产品的创建延迟到子类中实现，符合开闭原则，每个具体工厂类负责创建一个具体产品。 抽象工厂模式：适用于需要创建一组相关产品对象的场景，每个具体工厂类负责创...","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/design-pattern/creational/factory-compare.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"工厂模式的比较"}],["meta",{"property":"og:description","content":"简单工厂模式、工厂方法模式、抽象工厂模式都可以统称为工厂模式，其中： 简单工厂模式：适用于需要根据客户端的输入来创建对象的场景，但不符合开闭原则，随着产品的增加需要修改工厂类。 工厂方法模式：通过将具体产品的创建延迟到子类中实现，符合开闭原则，每个具体工厂类负责创建一个具体产品。 抽象工厂模式：适用于需要创建一组相关产品对象的场景，每个具体工厂类负责创..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T04:05:01.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T04:05:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式的比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-05T04:05:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[],"git":{"createdTime":1690815158000,"updatedTime":1693886701000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":0.91,"words":272},"filePathRelative":"design-pattern/creational/factory-compare.md","localizedDate":"2023年7月31日","excerpt":"<p>简单工厂模式、工厂方法模式、抽象工厂模式都可以统称为工厂模式，其中：</p>\\n<p>简单工厂模式：适用于需要根据客户端的输入来创建对象的场景，但不符合<code>开闭原则</code>，随着产品的增加需要修改工厂类。</p>\\n<p>工厂方法模式：通过将具体产品的创建延迟到子类中实现，符合<code>开闭原则</code>，每个具体工厂类负责创建一个具体产品。</p>\\n<p>抽象工厂模式：适用于需要创建一组相关产品对象的场景，每个具体工厂类负责创建一组相关产品。</p>\\n<p>选择适合的创建型设计模式取决于具体的项目需求和设计考虑，简单工厂模式简单易懂但可扩展性差，工厂方法模式更灵活但需要额外的子类，而抽象工厂模式适用于创建一组相关的产品对象。</p>","autoDesc":true}');export{y as comp,f as data};
