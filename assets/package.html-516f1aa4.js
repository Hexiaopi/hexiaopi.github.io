import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,e as t}from"./app-22537f02.js";const c="/assets/package-init-a75a19a0.png",n={},o=t('<p>Go语言使用包（package）作为基本单元来组织源码。</p><h2 id="package的优点" tabindex="-1"><a class="header-anchor" href="#package的优点" aria-hidden="true">#</a> package的优点</h2><h3 id="编译速度快" tabindex="-1"><a class="header-anchor" href="#编译速度快" aria-hidden="true">#</a> 编译速度快</h3><ul><li>Go要求每个源文件在开头显示地列出所有依赖的包，如果引入了未使用的包，Go语言编译器会报错。</li><li>Go要求包之间不能存在循环依赖，这样包的依赖关系便形成了一张有向无环图，这样每个包可以单独编译也可并行编译</li><li>已编译的Go包不仅记录了该包的信息，还记录了依赖包的信息。只需读取缓存的编译产物即可。</li></ul><h2 id="初始化顺序" tabindex="-1"><a class="header-anchor" href="#初始化顺序" aria-hidden="true">#</a> 初始化顺序</h2><p>Go语言内置函数<code>init()</code>，常用于包级数据初始化以及初始状态的检查工作。</p><ul><li>一个Go包可以有多个init()函数</li><li>init()函数不可显示的调用，否则会编译期间报错</li><li>init()只会执行一次</li></ul><p>Go包引入其他包，初始化时按照一定的次序逐一调用该包的init函数。</p><figure><img src="'+c+'" alt="package-init" tabindex="0" loading="lazy"><figcaption>package-init</figcaption></figure><p>Go语言运行时按照常量-&gt;变量-&gt;init()顺序进行初始化。</p>',10),r=[o];function l(d,p){return i(),e("div",null,r)}const g=a(n,[["render",l],["__file","package.html.vue"]]);export{g as default};
