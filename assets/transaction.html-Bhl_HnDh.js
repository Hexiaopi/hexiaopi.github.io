import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,b as a,o as s}from"./app-CUI5pmZ1.js";const l="/assets/dirty-read-CNv9x_SC.png",r="/assets/non-repeatable-read-BlMTVb2p.png",o="/assets/phantom-read-l2mr48Sp.png",i="/assets/row-version-COlz-gET.png",c="/assets/read-view-CRDYkkZG.png",d={},p=a('<h2 id="事务的特性" tabindex="-1"><a class="header-anchor" href="#事务的特性"><span>事务的特性</span></a></h2><ul><li>原子性(Atomicity): 事务中的所有操作要么全部完成，要么全部不完成（回滚），不会在事务中间遇到错误而中断。</li><li>一致性(Consistency): 事务开始和结束时，数据都必须保持一致状态，即符合约束、完整性、默认值以及其它定义的规则。事务执行的结果不能破坏数据库的完整性和一致性。</li><li>隔离性(Isolation): 各个事务互相隔离，每个事务的执行都不会影响其它事务的执行或者结果。</li><li>持久性(Durability): 一个事务一旦提交成功，它对数据库中的数据的改变就是永久性的，即使发生数据库故障也不应该对其产生影响。</li></ul><h2 id="事务的实现" tabindex="-1"><a class="header-anchor" href="#事务的实现"><span>事务的实现</span></a></h2><ul><li>Undo log：实现事务的原子性；</li><li>Redo log：实现事务的持久性；</li><li>锁/MVCC：实现事务的隔离性；锁机制来保证事务在执行时互相隔离，防止事务间相互干扰，即写-写问题。MVCC 机制是通过保存历史版本的方式来实现，事务可以读取数据在事务开始时的版本，而不受到事务期间其他事务所做的改变的影响，即写-读问题。</li><li>以上三者保证了事务的一致性；</li></ul><h2 id="并发事务带来的问题" tabindex="-1"><a class="header-anchor" href="#并发事务带来的问题"><span>并发事务带来的问题</span></a></h2><p>当数据库上有多个事务同时执行的时候，就可能出现<strong>脏读(dirty read)</strong>、<strong>不可重复读(non-repeatable read)</strong>、<strong>幻读(phantom read)</strong>，为了解决这些问题，就有了隔离级别的概念</p><h3 id="脏读问题" tabindex="-1"><a class="header-anchor" href="#脏读问题"><span>脏读问题</span></a></h3><blockquote><p>脏读是指：一个事务中访问到了另外一个事务未提交的数据</p></blockquote><figure><img src="'+l+'" alt="dirty-read" tabindex="0" loading="lazy"><figcaption>dirty-read</figcaption></figure><h3 id="不可重复读问题" tabindex="-1"><a class="header-anchor" href="#不可重复读问题"><span>不可重复读问题</span></a></h3><blockquote><p>不可重复读是指：一个事务多次读取同一行数据，但是在多次读取中数据发生了改变。</p></blockquote><figure><img src="'+r+'" alt="non-repeatable-read" tabindex="0" loading="lazy"><figcaption>non-repeatable-read</figcaption></figure><h3 id="幻读问题" tabindex="-1"><a class="header-anchor" href="#幻读问题"><span>幻读问题</span></a></h3><blockquote><p>幻读是指：一个事务多次执行同一条 SQL 语句，但结果集却不同，导致无法支撑后续的业务操作</p></blockquote><figure><img src="'+o+'" alt="phantom-read" tabindex="0" loading="lazy"><figcaption>phantom-read</figcaption></figure><h2 id="事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#事务的隔离级别"><span>事务的隔离级别</span></a></h2><p>针对上面三种问题，分别有四种隔离级别：</p><h3 id="未提交读-read-uncommitted-ru" tabindex="-1"><a class="header-anchor" href="#未提交读-read-uncommitted-ru"><span>未提交读(read uncommitted，RU)</span></a></h3><blockquote><p>未提交读，是指一个事务还未提交时，它做的变更就能被别的事务看到。即<strong>没有提交却可以读</strong></p></blockquote><h3 id="提交读-read-committed-rc" tabindex="-1"><a class="header-anchor" href="#提交读-read-committed-rc"><span>提交读(read committed，RC)</span></a></h3><blockquote><p>提交读，是指一个事务提交之后，它做的变更才会被其他事务看到。即<strong>提交才可以读</strong></p></blockquote><p>👀 <strong>大多数数据库系统的默认隔离级别</strong></p><h3 id="可重复读-repeatable-read-rr" tabindex="-1"><a class="header-anchor" href="#可重复读-repeatable-read-rr"><span>可重复读(repeatable read，RR)</span></a></h3><blockquote><p>可重复度，是指同一个事务执行过程看到的数据，总是跟这个事务在启动时看到的数据是一致的。即同一个事务多次请求读取数据，会看到同样的数据行。</p></blockquote><p>👀 <strong>MySQL的默认隔离级别</strong></p><h3 id="串行化-serializable-s" tabindex="-1"><a class="header-anchor" href="#串行化-serializable-s"><span>串行化(serializable，S)</span></a></h3><blockquote><p>是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突。</p><p>这个级别可能导致大量的超时现象和锁竞争。</p></blockquote><p>以上四种隔离级别解决问题如下：</p><table><thead><tr><th style="text-align:center;">隔离级别\\解决问题</th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">幻读</th><th style="text-align:center;">实现原理</th></tr></thead><tbody><tr><td style="text-align:center;">未提交读</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td><td style="text-align:center;">没有视图概念</td></tr><tr><td style="text-align:center;">提交读</td><td style="text-align:center;">✔️</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td><td style="text-align:center;">每个SQL语句开始执行的时候创建视图</td></tr><tr><td style="text-align:center;">可重复读</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">❌</td><td style="text-align:center;">事务启动时创建视图，且整个事务期间都在用这个视图</td></tr><tr><td style="text-align:center;">串行化</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">加锁的方式避免并行访问</td></tr></tbody></table><p>各个隔离级别都有它自己的使用场景，需要根据业务情况来定，隔离级别从上到下，性能变差。</p><h2 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc"><span>MVCC</span></a></h2><p>MySQL InnoDB默认级别是可重复度隔离级别，为了解决不可重复读问题，InnoDB采用了MVCC(多版本并发控制)的方式。它为存储的每一行增加三个额外的隐藏字段</p><ul><li>DATA_TRX_ID：产生当前记录项的事务ID</li><li>DELETE BIT：用于标识该记录是否是删除记录</li><li>DATA_ROLL_PTR：指向当前记录项的undo信息</li></ul><h3 id="mvcc下sql语句实际处理" tabindex="-1"><a class="header-anchor" href="#mvcc下sql语句实际处理"><span>MVCC下SQL语句实际处理</span></a></h3><h4 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>SELECT</span></a></h4><ol><li><p>InnoDB只查找版本早于当前事务版本的数据行（行的事务版本号&lt;=当前事务的系统版本号），这样可以确保事务读取的行，要么是在事务开始前以及存在，要么是事务自身插入或者修改过的。</p></li><li><p>行的删除版本要么未定义，要么大于当前事务版本号，这样可以确保事务读取到的行，在事务开始之前未被删除。</p></li></ol><blockquote><p>只有符合上述两个条件的记录，才能返回作为查询结果</p></blockquote><h4 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>INSERT</span></a></h4><blockquote><p>InnoDB为新插入的每一行保存当前事务版本号作为行版本号</p></blockquote><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>DELETE</span></a></h4><blockquote><p>InnoDB为删除的每一行保存当前事务版本号作为行删除标识</p></blockquote><h4 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>UPDATE</span></a></h4><blockquote><p>InnoDB为插入一行新记录，保存当前事务版本作为行版本号，同时保存当前事务版本号到原来的行作为行删除标识</p></blockquote><p>MVCC多版本在事务启动时用到<strong>一致性读视图(consisten read view)</strong>，那什么是事务的一致性视图呢？</p><p>InnoDB每个事务都有唯一的事务ID(transaction id)，它在事务开始的时候向InnoDB的事务系统申请的，是严格按照递增的顺序申请的。</p><p>每行数据也都是有多个版本的，每次事务更新数据的时候，都会生成一个新的数据版本，并且将事务ID赋值给这个数据版本的事务ID，同时旧的数据版本要保留。如下图所示：</p><figure><img src="'+i+'" alt="行-版本" tabindex="0" loading="lazy"><figcaption>行-版本</figcaption></figure><p>图中虚线框中同一行数据有4个版本，每个版本均有对应的事务ID。</p><p>InnoDB为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在<strong>活跃</strong>（启动还为提交）的所有事务ID，数组里面事务ID的最小值记为<strong>低水位</strong>，事务ID的最大值+1记为<strong>高水位</strong>。这个视图数组和高水位就组成了当前事务的一致性视图。</p><figure><img src="'+c+`" alt="视图" tabindex="0" loading="lazy"><figcaption>视图</figcaption></figure><p>对于数据版本的事务ID，则存在以下情况：</p><ul><li>如果落在绿色部分，表示这个版本是已提交事务或者当前事务自己生成的，这个版本数据是可见的；</li><li>如果落在红色部分，表示这个版本是由将来启动的事务生成的，则不可见；</li><li>如果落在黄色部分，存在两种情况 <ul><li>若row trx_id在数组中，表示这个版本是由<strong>还未提交的事务</strong>生成的，这个版本数据是不可见的；</li><li>若row trx_id不在数组中，表示这个版本是由<strong>已经提交的事务</strong>生成的，这个版本数据是可见的；</li></ul></li></ul><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>t<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>
 <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
 <span class="token identifier"><span class="token punctuation">\`</span>k<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
 <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t<span class="token punctuation">(</span>id<span class="token punctuation">,</span>k<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们以<strong>可重复读隔离级别</strong>为例：</p><table><thead><tr><th style="text-align:center;">事务A</th><th style="text-align:center;">事务B</th><th style="text-align:center;">事务C</th></tr></thead><tbody><tr><td style="text-align:center;">start transaction with consistent snapshot;</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">start transaction with consistent snapshot;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">update t set k=k+1 where id=1;</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">update t set k=k+1 where id=1; <br>select k from t where id =1;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">select k from t where id=1;<br>commit;</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">commit;</td><td style="text-align:center;"></td></tr></tbody></table><p>这里注意：</p><p><code>begin/start transaction</code> 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 <code>start transaction with consistent snapshot</code>这个命令。</p><p>这里我们假设事务A、B、C的版本号分别是100、101、102。</p><p>id=1这行数据存在以下版本：</p><table><thead><tr><th style="text-align:center;">事务ID</th><th style="text-align:center;">90（历史事务ID）</th><th style="text-align:center;">102</th><th style="text-align:center;">101</th></tr></thead><tbody><tr><td style="text-align:center;">值</td><td style="text-align:center;">1</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td></tr></tbody></table><p>事务A查询的时候，事务B还没有提交，因此3不可见。事务C虽然提交了，但是事务A启动时，就创建了一致性视图，对于事务A来说，它的视图数组是[99,100]，依旧不可见。</p><p>对于事务一致性视图来说，除了自己的更新总是可见以为，还有三种情况：</p><ol><li>版本未提交，不可见；</li><li>版本已提交，但是是在视图创建后提交的，不可见。</li><li>版本已提交，而且是在视图前提交的，可见。</li></ol><p>那么问题来了，事务B更新的时候，如果按照一致性视图，不应该更新k=3呀，这里就需要一条规则：<strong>更新数据都是先读后写</strong>，这个读要属于<strong>当前读</strong>，否则事务C就不生效了。</p><p>读存在两种读：<strong>当前读</strong>和<strong>快照读</strong>。</p><h3 id="快照读" tabindex="-1"><a class="header-anchor" href="#快照读"><span>快照读</span></a></h3><blockquote><p>读取的是记录的可见版本，不用加锁</p></blockquote><p>简单的select操作，属于快照读，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> ?；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="当前读" tabindex="-1"><a class="header-anchor" href="#当前读"><span>当前读</span></a></h3><p><strong>幻读在当前读才有可能出现</strong>，那么Innodb是如何防止幻读的呢，innodb提供了一个间隙锁的技术，行数结合间隙锁，达到最终目的。</p><blockquote><p>读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。</p></blockquote><p>特殊的读操作，以及插入、更新、删除操作都属于当前读，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> ? <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> ? <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> <span class="token keyword">table</span> <span class="token keyword">set</span> ? <span class="token keyword">where</span> ?<span class="token punctuation">;</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> ?<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们以<strong>提交读隔离级别</strong>为例：</p><p>由于<code>start transaction with consistent snapshot;</code>在读提交隔离级别下没有意义，等价于普通的<code>start transaction</code></p><table><thead><tr><th style="text-align:center;">事务A</th><th style="text-align:center;">事务B</th><th style="text-align:center;">事务C</th></tr></thead><tbody><tr><td style="text-align:center;">start transaction;</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">start transaction;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">update t set k=k+1 where id=1;</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">update t set k=k+1 where id=1; <br>select k from t where id =1;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">select k from t where id=1;<br>commit;</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">commit;</td><td style="text-align:center;"></td></tr></tbody></table><p>事务A在执行<code>select k from t where id=1;</code>才创建一致性视图，此时事务C已提交，因此k=2;</p><p>同样事务B，事务C已提交，因此可见，且自己修改的肯定可见，因此k=3;</p><h2 id="那么mysql可重复读解决幻读了吗" tabindex="-1"><a class="header-anchor" href="#那么mysql可重复读解决幻读了吗"><span>那么MySQL可重复读解决幻读了吗？</span></a></h2><p>我们试验为例：</p><p>假设存在表<code>dept</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> desc dept<span class="token punctuation">;</span>
+-------+-------------+------+-----+---------+-------+
<span class="token operator">|</span> Field <span class="token operator">|</span> Type        <span class="token operator">|</span> Null <span class="token operator">|</span> Key <span class="token operator">|</span> Default <span class="token operator">|</span> Extra <span class="token operator">|</span>
+-------+-------------+------+-----+---------+-------+
<span class="token operator">|</span> <span class="token function">id</span>    <span class="token operator">|</span> int<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token operator">|</span> NO   <span class="token operator">|</span> PRI <span class="token operator">|</span> NULL    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> value <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span>         <span class="token operator">|</span>       <span class="token operator">|</span>
+-------+-------------+------+-----+---------+-------+
<span class="token number">2</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启两个事务进行试验</p><table><thead><tr><th style="text-align:center;">事务A</th><th style="text-align:center;">事务B</th></tr></thead><tbody><tr><td style="text-align:center;">start transaction;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">start transaction;</td></tr><tr><td style="text-align:center;">select * from dept;<br>Empty set (0.01 sec)</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">insert into dept values(1,&#39;a&#39;);</td></tr><tr><td style="text-align:center;">select * from dept;<br>Empty set (0.01 sec)</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">commit;</td></tr><tr><td style="text-align:center;">select * from dept;<br>Empty set (0.01 sec)</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">insert into dept values(1,&#39;a&#39;);<br>Duplicate entry &#39;1&#39; for key &#39;PRIMARY&#39;</td><td style="text-align:center;"></td></tr></tbody></table><p>事务A就很奇怪，明明查询不到数据，写入时却报主键重复错误😢(<strong>幻读出现</strong>)</p><p>继续试验：</p><table><thead><tr><th style="text-align:center;">事务A</th><th style="text-align:center;">事务B</th></tr></thead><tbody><tr><td style="text-align:center;">start transaction;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">start transaction;</td></tr><tr><td style="text-align:center;">select * from dept;<br>1,a</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">insert into dept values(2,&#39;b&#39;);</td></tr><tr><td style="text-align:center;">select * from dept;<br>1,a</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">commit;</td></tr><tr><td style="text-align:center;">select * from dept;<br>1,a</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">update dept set value=&#39;z&#39;;<br>Query OK, 2 rows affected (0.00 sec)</td><td style="text-align:center;"></td></tr></tbody></table><p>事务A又奇怪了，明明只有一条数据，为啥影响了两条数据😭（<strong>幻读出现</strong>）</p><p>那么MySQL如何解决幻读呢</p><table><thead><tr><th style="text-align:center;">事务A</th><th style="text-align:center;">事务B</th></tr></thead><tbody><tr><td style="text-align:center;">start transaction;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">start transaction;</td></tr><tr><td style="text-align:center;">select * from dept where id&gt;=1 for update;<br>1,z<br>2,z</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">insert into dept values(3,&#39;c&#39;);<br>Lock wait timeout exceeded; try restarting transaction</td></tr><tr><td style="text-align:center;">select * from dept;<br>1,z<br>2,z</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">commit;</td></tr><tr><td style="text-align:center;">insert into dept values(3,&#39;c&#39;);</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">commit;</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">select * from dept;<br>1,z<br>2,z<br>3,c</td><td style="text-align:center;"></td></tr></tbody></table><p>可以看到通过对<code>id&gt;=1</code>加锁，成功解决幻读问题，但是如果在间隙锁之外进行数据操作，其实还是会出现幻读。因此MySQL可重复读隔离级别通过间隙锁部分解决幻读问题，并没有完全解决，如果要解决幻读问题只能使用串行化隔离级别。</p>`,93);function g(u,k){return s(),e("div",null,[n(" more "),p])}const m=t(d,[["render",g],["__file","transaction.html.vue"]]),b=JSON.parse('{"path":"/database/mysql/transaction.html","title":"事务","lang":"zh-CN","frontmatter":{"title":"事务","date":"2022-10-23T00:00:00.000Z","order":6,"tag":["MySQL"],"category":["数据存储"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/database/mysql/transaction.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"事务"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-20T03:37:50.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2022-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-20T03:37:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-20T03:37:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"事务的特性","slug":"事务的特性","link":"#事务的特性","children":[]},{"level":2,"title":"事务的实现","slug":"事务的实现","link":"#事务的实现","children":[]},{"level":2,"title":"并发事务带来的问题","slug":"并发事务带来的问题","link":"#并发事务带来的问题","children":[{"level":3,"title":"脏读问题","slug":"脏读问题","link":"#脏读问题","children":[]},{"level":3,"title":"不可重复读问题","slug":"不可重复读问题","link":"#不可重复读问题","children":[]},{"level":3,"title":"幻读问题","slug":"幻读问题","link":"#幻读问题","children":[]}]},{"level":2,"title":"事务的隔离级别","slug":"事务的隔离级别","link":"#事务的隔离级别","children":[{"level":3,"title":"未提交读(read uncommitted，RU)","slug":"未提交读-read-uncommitted-ru","link":"#未提交读-read-uncommitted-ru","children":[]},{"level":3,"title":"提交读(read committed，RC)","slug":"提交读-read-committed-rc","link":"#提交读-read-committed-rc","children":[]},{"level":3,"title":"可重复读(repeatable read，RR)","slug":"可重复读-repeatable-read-rr","link":"#可重复读-repeatable-read-rr","children":[]},{"level":3,"title":"串行化(serializable，S)","slug":"串行化-serializable-s","link":"#串行化-serializable-s","children":[]}]},{"level":2,"title":"MVCC","slug":"mvcc","link":"#mvcc","children":[{"level":3,"title":"MVCC下SQL语句实际处理","slug":"mvcc下sql语句实际处理","link":"#mvcc下sql语句实际处理","children":[]},{"level":3,"title":"快照读","slug":"快照读","link":"#快照读","children":[]},{"level":3,"title":"当前读","slug":"当前读","link":"#当前读","children":[]}]},{"level":2,"title":"那么MySQL可重复读解决幻读了吗？","slug":"那么mysql可重复读解决幻读了吗","link":"#那么mysql可重复读解决幻读了吗","children":[]}],"git":{"createdTime":1690708801000,"updatedTime":1716176270000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":4},{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":9.81,"words":2944},"filePathRelative":"database/mysql/transaction.md","localizedDate":"2022年10月23日","excerpt":""}');export{m as comp,b as data};
