import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,c as i,a as n,d as r,e,b as l,o as c}from"./app-B1fz2wU4.js";const p={},s=e("blockquote",null,[e("p",null,"创建型设计模式是一种常用的设计模式，关注对象的创建和实例化，包括：如何实例化对象、如何组织对象的创建流程等，旨在解决对象的创建问题，以便更加灵活地创建对象并将对象与使用它们的代码分离。")],-1),d=l('<h2 id="模式之间的区别" tabindex="-1"><a class="header-anchor" href="#模式之间的区别"><span>模式之间的区别</span></a></h2><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h3><ul><li>目标：创建型设计模式的主要目标是将对象的创建和使用分离，提供一种灵活的方式来创建对象。</li><li>抽象：这些模式通常通过引入抽象层来隐藏对象创建的细节，使得客户端代码更加简洁和可维护。</li><li>重用：创建型设计模式鼓励代码的重用，通过提供灵活的创建方式来满足不同的需求。</li></ul><h3 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点"><span>不同点</span></a></h3><ul><li>创建过程：不同的创建型设计模式使用不同的方式来创建对象。例如：工厂方法模式使用工厂类来创建对象，抽象工厂模式使用一组相关的工厂类来创建对象，单例模式只允许创建一个对象等。</li><li>灵活性：不同的创建型设计模式在灵活性方面有所不同。有些模式提供了更高的灵活性，允许在运行时动态配置对象的创建过程，而有些模式则在创建过程上更为固定。</li><li>适用场景：不同的创建型设计模式适用于不同的场景和需求。例如，简答工厂模式适用于需要根据特定条件创建不同类型对象的场景，建造者模式适用于复杂对象的创建过程等。</li></ul>',5);function m(h,u){const t=o("Catalog");return c(),i("div",null,[s,n(" more "),d,r(t)])}const y=a(p,[["render",m],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/design-pattern/creational/","title":"创建型模式","lang":"zh-CN","frontmatter":{"title":"创建型模式","icon":"seedling","date":"2023-07-31T00:00:00.000Z","tag":["Go","创建型模式"],"category":["设计模式"],"description":"创建型设计模式是一种常用的设计模式，关注对象的创建和实例化，包括：如何实例化对象、如何组织对象的创建流程等，旨在解决对象的创建问题，以便更加灵活地创建对象并将对象与使用它们的代码分离。","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/design-pattern/creational/"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"创建型模式"}],["meta",{"property":"og:description","content":"创建型设计模式是一种常用的设计模式，关注对象的创建和实例化，包括：如何实例化对象、如何组织对象的创建流程等，旨在解决对象的创建问题，以便更加灵活地创建对象并将对象与使用它们的代码分离。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T02:44:40.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"创建型模式"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T02:44:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创建型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T02:44:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"模式之间的区别","slug":"模式之间的区别","link":"#模式之间的区别","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]}],"git":{"createdTime":1642859663000,"updatedTime":1714963480000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":3},{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":3}]},"readingTime":{"minutes":1.54,"words":461},"filePathRelative":"design-pattern/creational/README.md","localizedDate":"2023年7月31日","excerpt":"<blockquote>\\n<p>创建型设计模式是一种常用的设计模式，关注对象的创建和实例化，包括：如何实例化对象、如何组织对象的创建流程等，旨在解决对象的创建问题，以便更加灵活地创建对象并将对象与使用它们的代码分离。</p>\\n</blockquote>\\n","autoDesc":true}');export{y as comp,f as data};
