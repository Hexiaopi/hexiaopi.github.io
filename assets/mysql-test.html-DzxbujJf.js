import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,b as t,o as p}from"./app-BRQDxtVP.js";const o={},e=t(`<p>Go项目中经常使用MySQL作为存储，一般写测试会建立真实连接进行测试，但带来的问题有很多：</p><ul><li>依赖测试数据，如果数据库中某个数据变更导致测试用例失败</li><li>依赖数据库环境，如果无法连通将导致测试失败</li></ul><p>因此，优秀的项目会杜绝这些问题。本文介绍Go语言的<code>sql/driver</code>的mock库。</p><h2 id="安装mock库" tabindex="-1"><a class="header-anchor" href="#安装mock库"><span>安装mock库</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go get github.com/DATA-DOG/go-sqlmock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="官网用例" tabindex="-1"><a class="header-anchor" href="#官网用例"><span>官网用例</span></a></h2><h3 id="业务sql函数" tabindex="-1"><a class="header-anchor" href="#业务sql函数"><span>业务SQL函数</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;database/sql&quot;</span>

	<span class="token boolean">_</span> <span class="token string">&quot;github.com/go-sql-driver/mysql&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">recordStats</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> userID<span class="token punctuation">,</span> productID <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> err <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE products SET views = views + 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO product_viewers (user_id, product_id) VALUES (?, ?)&quot;</span><span class="token punctuation">,</span> userID<span class="token punctuation">,</span> productID<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>recordStats</code> 函数负责记录用户浏览产品信息，包括：</p><ul><li>更新商品的 views 个数+1</li><li>插入一条用户浏览商品数据到 product_viewers 表</li></ul><p>以上两个操作在同一个事物中执行</p></div><h3 id="成功的测试用例" tabindex="-1"><a class="header-anchor" href="#成功的测试用例"><span>成功的测试用例</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestShouldUpdateStats</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db<span class="token punctuation">,</span> mock<span class="token punctuation">,</span> err <span class="token operator">:=</span> sqlmock<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;an error &#39;%s&#39; was not expected when opening a stub database connection&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	mock<span class="token punctuation">.</span><span class="token function">ExpectBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mock<span class="token punctuation">.</span><span class="token function">ExpectExec</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE products&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WillReturnResult</span><span class="token punctuation">(</span>sqlmock<span class="token punctuation">.</span><span class="token function">NewResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	mock<span class="token punctuation">.</span><span class="token function">ExpectExec</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO product_viewers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithArgs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WillReturnResult</span><span class="token punctuation">(</span>sqlmock<span class="token punctuation">.</span><span class="token function">NewResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	mock<span class="token punctuation">.</span><span class="token function">ExpectCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// now we execute our method</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> <span class="token function">recordStats</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;error was not expected while updating stats: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// we make sure that all expectations were met</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;there were unfulfilled expectations: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>其中：</p><ul><li>8-11行为我们期望执行的SQL语句，包括返回值。</li><li>19行检验是否符合我们的期望。</li></ul></div><h3 id="失败的测试用例" tabindex="-1"><a class="header-anchor" href="#失败的测试用例"><span>失败的测试用例</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestShouldRollbackStatUpdatesOnFailure</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db<span class="token punctuation">,</span> mock<span class="token punctuation">,</span> err <span class="token operator">:=</span> sqlmock<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;an error &#39;%s&#39; was not expected when opening a stub database connection&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	mock<span class="token punctuation">.</span><span class="token function">ExpectBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mock<span class="token punctuation">.</span><span class="token function">ExpectExec</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE products&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WillReturnResult</span><span class="token punctuation">(</span>sqlmock<span class="token punctuation">.</span><span class="token function">NewResult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	mock<span class="token punctuation">.</span><span class="token function">ExpectExec</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO product_viewers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">WithArgs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">WillReturnError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;some error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	mock<span class="token punctuation">.</span><span class="token function">ExpectRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// now we execute our method</span>
	<span class="token keyword">if</span> err <span class="token operator">=</span> <span class="token function">recordStats</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;was expecting an error, but there was none&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// we make sure that all expectations were met</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;there were unfulfilled expectations: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>其中</p><ul><li>第10行模拟执行插入失败错误，第13行期望事务回滚。</li><li>第16行按照预期肯定返回错误</li><li>第19行则检验是否符合我们的预期</li></ul></div><h2 id="小试牛刀" tabindex="-1"><a class="header-anchor" href="#小试牛刀"><span>小试牛刀</span></a></h2><h3 id="业务dao层" tabindex="-1"><a class="header-anchor" href="#业务dao层"><span>业务dao层</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> UserDao <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewUserDao</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>UserDao <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>UserDao<span class="token punctuation">{</span>db<span class="token punctuation">:</span> db<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>dao <span class="token operator">*</span>UserDao<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> options <span class="token operator">...</span>store<span class="token punctuation">.</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>model<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	user <span class="token operator">:=</span> model<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span>
	query <span class="token operator">:=</span> dao<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>model<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> option <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">{</span>
		option<span class="token punctuation">.</span><span class="token punctuation">(</span>Option<span class="token punctuation">)</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> query<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dao层使用gorm ORM框架，但不妨碍我们采用go-sqlmock进行测试</p><h3 id="测试用例" tabindex="-1"><a class="header-anchor" href="#测试用例"><span>测试用例</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestUserDao_Get</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	db<span class="token punctuation">,</span> mock<span class="token punctuation">,</span> err <span class="token operator">:=</span> sqlmock<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>sqlmock<span class="token punctuation">.</span><span class="token function">QueryMatcherOption</span><span class="token punctuation">(</span>sqlmock<span class="token punctuation">.</span>QueryMatcherEqual<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;an error &#39;%s&#39; was not expected when opening a stub database connection&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	gdb<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>DriverName<span class="token punctuation">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span> Conn<span class="token punctuation">:</span> db<span class="token punctuation">,</span> SkipInitializeWithVersion<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	dao <span class="token operator">:=</span> <span class="token function">NewUserDao</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span>

	<span class="token punctuation">{</span> <span class="token comment">//根据name查询用户</span>
		rows <span class="token operator">:=</span> sqlmock<span class="token punctuation">.</span><span class="token function">NewRows</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddRow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
		mock<span class="token punctuation">.</span><span class="token function">ExpectQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM \`sys_user\` WHERE name = ? ORDER BY \`sys_user\`.\`id\` LIMIT ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithArgs</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WillReturnRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span>
		user<span class="token punctuation">,</span> err <span class="token operator">:=</span> dao<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NewOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithUserName</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;there were unfulfilled expectations: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token punctuation">{</span> <span class="token comment">//根据id查询用户</span>
		rows <span class="token operator">:=</span> sqlmock<span class="token punctuation">.</span><span class="token function">NewRows</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddRow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
		mock<span class="token punctuation">.</span><span class="token function">ExpectQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM \`sys_user\` WHERE id = ? ORDER BY \`sys_user\`.\`id\` LIMIT ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithArgs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WillReturnRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span>
		user<span class="token punctuation">,</span> err <span class="token operator">:=</span> dao<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NewOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;there were unfulfilled expectations: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>其中：</p><ul><li>第2行我们使用了严格的匹配方式，即<code>sqlmock.QueryMatcherEqual</code>，即要求SQL语句完全一致，否则会报错SQL不是期望所得。</li><li>由于使用了GORM框架，所以第7行需要初始化gdb，但是由于GORM初始化会执行<code>SELECT VERSION()</code>，所以我们需要通过<code>SkipInitializeWithVersion</code>跳过初始化。</li></ul></div><p>遇见的一些问题：</p><div class="hint-container warning"><p class="hint-container-title">注意</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token punctuation">{</span> <span class="token comment">//根据name查询用户</span>
		rows <span class="token operator">:=</span> sqlmock<span class="token punctuation">.</span><span class="token function">NewRows</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddRow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
		mock<span class="token punctuation">.</span><span class="token function">ExpectQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM \`sys_user\` WHERE name = ? ORDER BY \`sys_user\`.\`id\` LIMIT 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithArgs</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WillReturnRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span>
		user<span class="token punctuation">,</span> err <span class="token operator">:=</span> dao<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NewOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithUserName</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;there were unfulfilled expectations: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第3行，我们通过直接写死<code>LIMIT 1</code>而不是<code>LIMIT ?</code>来限制查询结果，但实际执行时，会报错SQL不是期望所得，导致测试用例不通过。因此需要特别注意，需要通过传参的方式。</p></div><h2 id="个人观点" tabindex="-1"><a class="header-anchor" href="#个人观点"><span>个人观点</span></a></h2><p>go-sqlmock通过定义我们期望的SQL语句，然后通过模拟执行，来达到测试的目的。但我们通常使用相关的ORM框架，如GORM，已经不再写SQL语句，框架会自动帮助我们补充完整。因此对于一般肉眼可以审查的代码，我觉得使用go-sqlmock进行测试意义不大。</p><p>如果有非常复杂的SQL语句，或者ORM框架无法满足需求，尤其是一些业务逻辑下沉到dao层，那么使用go-sqlmock进行测试是值得的。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2><ul><li><a href="https://www.liwenzhou.com/posts/Go/unit-test-2/" target="_blank" rel="noopener noreferrer">李文周</a></li><li><a href="https://zhuanlan.zhihu.com/p/693058578" target="_blank" rel="noopener noreferrer">知乎</a></li></ul>`,29);function c(i,l){return p(),s("div",null,[a(" more "),e])}const k=n(o,[["render",c],["__file","mysql-test.html.vue"]]),d=JSON.parse('{"path":"/language/go/test/mysql-test.html","title":"Go语言MySQL测试","lang":"zh-CN","frontmatter":{"title":"Go语言MySQL测试","date":"2024-06-11T00:00:00.000Z","tag":["Go","测试"],"category":["编程语言"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/language/go/test/mysql-test.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"Go语言MySQL测试"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-12T01:26:48.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"测试"}],["meta",{"property":"article:published_time","content":"2024-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-12T01:26:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go语言MySQL测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-12T01:26:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"安装mock库","slug":"安装mock库","link":"#安装mock库","children":[]},{"level":2,"title":"官网用例","slug":"官网用例","link":"#官网用例","children":[{"level":3,"title":"业务SQL函数","slug":"业务sql函数","link":"#业务sql函数","children":[]},{"level":3,"title":"成功的测试用例","slug":"成功的测试用例","link":"#成功的测试用例","children":[]},{"level":3,"title":"失败的测试用例","slug":"失败的测试用例","link":"#失败的测试用例","children":[]}]},{"level":2,"title":"小试牛刀","slug":"小试牛刀","link":"#小试牛刀","children":[{"level":3,"title":"业务dao层","slug":"业务dao层","link":"#业务dao层","children":[]},{"level":3,"title":"测试用例","slug":"测试用例","link":"#测试用例","children":[]}]},{"level":2,"title":"个人观点","slug":"个人观点","link":"#个人观点","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1718112881000,"updatedTime":1718155608000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":4.05,"words":1214},"filePathRelative":"language/go/test/mysql-test.md","localizedDate":"2024年6月11日","excerpt":""}');export{k as comp,d as data};
