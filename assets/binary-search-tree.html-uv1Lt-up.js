import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,b as t,o as e}from"./app--FSDv-O1.js";const p="/assets/slanted-tree-BvU07Xbk.png",o={},c=t(`<h1 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树"><span>二叉搜索树</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><blockquote><p>二叉搜索树（Binary Search Tree,BST）又叫二叉排序树，基于二分法查找思想设计的树。它的定义如下：</p><ol><li>它是一棵二叉树</li><li>左子树的所有节点的值都小于它的根节点，右子树的所有节点的值都大于它的根节点</li><li>左右子树也是一棵二叉搜索树</li></ol></blockquote><h2 id="增加节点" tabindex="-1"><a class="header-anchor" href="#增加节点"><span>增加节点</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> value <span class="token operator">&gt;</span> n<span class="token punctuation">.</span>Data <span class="token punctuation">{</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>Right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span>
				Left<span class="token punctuation">:</span>  <span class="token boolean">nil</span><span class="token punctuation">,</span>
				Data<span class="token punctuation">:</span>  value<span class="token punctuation">,</span>
				Right<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> value <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>Data <span class="token punctuation">{</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>Left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			n<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span>
				Left<span class="token punctuation">:</span>  <span class="token boolean">nil</span><span class="token punctuation">,</span>
				Data<span class="token punctuation">:</span>  value<span class="token punctuation">,</span>
				Right<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&quot; already exist&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查找节点" tabindex="-1"><a class="header-anchor" href="#查找节点"><span>查找节点</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">Find</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Data <span class="token operator">==</span> value <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n<span class="token punctuation">.</span>Data <span class="token operator">&gt;</span> value <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TestNode_Find</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span>
		Left<span class="token punctuation">:</span>  <span class="token boolean">nil</span><span class="token punctuation">,</span>
		Data<span class="token punctuation">:</span>  <span class="token number">10</span><span class="token punctuation">,</span>
		Right<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	node<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
	result <span class="token operator">:=</span> node<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> result<span class="token punctuation">.</span>Data <span class="token operator">!=</span> <span class="token number">13</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;find fail&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Right<span class="token punctuation">)</span>

	result <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> result<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;should be nil&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点"><span>删除节点</span></a></h2><h3 id="递归版本" tabindex="-1"><a class="header-anchor" href="#递归版本"><span>递归版本</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 递归版本</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">DeleteNodeRecursion</span><span class="token punctuation">(</span>key <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 删除的节点在子树上</span>
	<span class="token keyword">if</span> key <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>Data <span class="token punctuation">{</span>
		n<span class="token punctuation">.</span>Left <span class="token operator">=</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span><span class="token function">DeleteNodeRecursion</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> key <span class="token operator">&gt;</span> n<span class="token punctuation">.</span>Data <span class="token punctuation">{</span>
		n<span class="token punctuation">.</span>Right <span class="token operator">=</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span><span class="token function">DeleteNodeRecursion</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
		<span class="token keyword">return</span> n
	<span class="token punctuation">}</span>
	<span class="token comment">// 删除的节点为当前节点</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Right <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 只有一个左子树</span>
		<span class="token keyword">return</span> n<span class="token punctuation">.</span>Left
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 只有一个右子树</span>
		<span class="token keyword">return</span> n<span class="token punctuation">.</span>Right
	<span class="token punctuation">}</span>
	<span class="token comment">// 有两个子树</span>
	<span class="token comment">// 从右子树选择最小的node替换</span>
	minNode <span class="token operator">:=</span> n<span class="token punctuation">.</span>Right
	<span class="token keyword">for</span> minNode<span class="token punctuation">.</span>Left <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		minNode <span class="token operator">=</span> minNode<span class="token punctuation">.</span>Left
	<span class="token punctuation">}</span>
	<span class="token comment">// 替换当前节点的值并删除右子树最小node</span>
	n<span class="token punctuation">.</span>Data <span class="token operator">=</span> minNode<span class="token punctuation">.</span>Data
	n<span class="token punctuation">.</span>Right <span class="token operator">=</span> n<span class="token punctuation">.</span>Right<span class="token punctuation">.</span><span class="token function">deleteMinNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>

<span class="token comment">// 递归删除节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">deleteMinNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Left <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">//左子树为空，则删除当前节点</span>
		pRight <span class="token operator">:=</span> n<span class="token punctuation">.</span>Right
		n<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token boolean">nil</span>
		<span class="token keyword">return</span> pRight
	<span class="token punctuation">}</span>
	<span class="token comment">// 左子树不为空，则继续删除左子树</span>
	n<span class="token punctuation">.</span>Left <span class="token operator">=</span> n<span class="token punctuation">.</span>Left<span class="token punctuation">.</span><span class="token function">deleteMinNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleDeleteNodeRecursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span>
		Left<span class="token punctuation">:</span>  <span class="token boolean">nil</span><span class="token punctuation">,</span>
		Data<span class="token punctuation">:</span>  <span class="token number">10</span><span class="token punctuation">,</span>
		Right<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	node<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">DeleteNodeRecursion</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">DeleteNodeRecursion</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">DeleteNodeRecursion</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">DeleteNodeRecursion</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">DeleteNodeRecursion</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
	node<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// 10(7(,8),13(,14))</span>
	<span class="token comment">// 10(8,13(,14))</span>
	<span class="token comment">// 10(8,13)</span>
	<span class="token comment">// 10(,13)</span>
	<span class="token comment">// 13</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h1><blockquote><p>二叉搜素树采用二分法思想，查找效率高</p><p>但是二叉搜索树具有不平衡性，容易出现斜树</p></blockquote><figure><img src="`+p+'" alt="斜树" tabindex="0" loading="lazy"><figcaption>斜树</figcaption></figure>',17);function i(l,u){return e(),s("div",null,[a(" more "),c])}const r=n(o,[["render",i],["__file","binary-search-tree.html.vue"]]),v=JSON.parse('{"path":"/data-structure/tree/binary-search-tree.html","title":"二叉搜索树","lang":"zh-CN","frontmatter":{"title":"二叉搜索树","date":"2023-08-24T00:00:00.000Z","category":["数据结构"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/data-structure/tree/binary-search-tree.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"二叉搜索树"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T06:55:14.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:published_time","content":"2023-08-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T06:55:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二叉搜索树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-08T06:55:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"增加节点","slug":"增加节点","link":"#增加节点","children":[]},{"level":2,"title":"查找节点","slug":"查找节点","link":"#查找节点","children":[]},{"level":2,"title":"删除节点","slug":"删除节点","link":"#删除节点","children":[{"level":3,"title":"递归版本","slug":"递归版本","link":"#递归版本","children":[]}]}],"git":{"createdTime":1645366406000,"updatedTime":1715151314000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":2},{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":1}]},"readingTime":{"minutes":1.84,"words":553},"filePathRelative":"data-structure/tree/binary-search-tree.md","localizedDate":"2023年8月24日","excerpt":""}');export{r as comp,v as data};
