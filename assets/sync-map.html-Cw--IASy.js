import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,b as t,o as p}from"./app-DFqpYPTB.js";const e={},o=t(`<blockquote><p>Go 语言原生的map是非并发安全的，在并发场景下，使用map可能会导致数据竞争和panic。为了解决这个问题，Go 语言提供了sync.Map，它是一个并发安全的map。在本文中，我们将深入探讨sync.Map的底层实现原理，以便更好地理解它的并发安全特性。</p></blockquote><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h2><p>sync.Map提供了丰富的API，用于对map的查询、存储、遍历、删除等操作。</p><h3 id="存储" tabindex="-1"><a class="header-anchor" href="#存储"><span>存储</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 存储</span>
	m<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span>
	m<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 查询</span>
	one<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;key 1 not found&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 遍历</span>
	m<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value any<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;key:&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;value:&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Range参数传递的是一个函数，该函数的返回值是一个bool类型，表示是否继续遍历。</p><ul><li>如果是true，则继续遍历。</li><li>如果是false，则不继续遍历。</li></ul></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 删除</span>
	m<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
	one<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;key 1 not found&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询并设置默认值" tabindex="-1"><a class="header-anchor" href="#查询并设置默认值"><span>查询并设置默认值</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 查询，不存在的情况下存储默认值</span>
	two<span class="token punctuation">,</span> loaded <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">LoadOrStore</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;three:&quot;</span><span class="token punctuation">,</span> two<span class="token punctuation">,</span> <span class="token string">&quot;loaded:&quot;</span><span class="token punctuation">,</span> loaded<span class="token punctuation">)</span>
	three<span class="token punctuation">,</span> loaded <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">LoadOrStore</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;three:&quot;</span><span class="token punctuation">,</span> three<span class="token punctuation">,</span> <span class="token string">&quot;loaded:&quot;</span><span class="token punctuation">,</span> loaded<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询并删除" tabindex="-1"><a class="header-anchor" href="#查询并删除"><span>查询并删除</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 查询并删除</span>
	three<span class="token punctuation">,</span> loaded <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">LoadAndDelete</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;three:&quot;</span><span class="token punctuation">,</span> three<span class="token punctuation">,</span> <span class="token string">&quot;loaded:&quot;</span><span class="token punctuation">,</span> loaded<span class="token punctuation">)</span>
	four<span class="token punctuation">,</span> loaded <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">LoadAndDelete</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;four:&quot;</span><span class="token punctuation">,</span> four<span class="token punctuation">,</span> <span class="token string">&quot;loaded:&quot;</span><span class="token punctuation">,</span> loaded<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交换" tabindex="-1"><a class="header-anchor" href="#交换"><span>交换</span></a></h3><p>其实就是更新</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 交换</span>
	two<span class="token punctuation">,</span> loaded <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;two:&quot;</span><span class="token punctuation">,</span> two<span class="token punctuation">,</span> <span class="token string">&quot;loaded:&quot;</span><span class="token punctuation">,</span> loaded<span class="token punctuation">)</span>
	two<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>two<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指定旧值交换" tabindex="-1"><a class="header-anchor" href="#指定旧值交换"><span>指定旧值交换</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 交换，仅当旧值相同时才进行交换</span>
	result <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
	result <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比较Swap方法，CompareAndSwap方法多了一个参数，该参数用于指定旧值。仅当旧值与指定的旧值相同时，才会进行交换操作。</p><h2 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理"><span>底层原理</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Map <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	mu Mutex
	read atomic<span class="token punctuation">.</span>Pointer<span class="token punctuation">[</span>readOnly<span class="token punctuation">]</span>
	dirty <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span><span class="token operator">*</span>entry
	misses <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><strong>mu</strong>：用于保护<code>dirty</code>的互斥锁。</li><li><strong>read</strong>：只读的map，使用原子操作，因此可以无锁的并发访问，其底层则对应<code>readOnly</code>。</li><li><strong>dirty</strong>：可写的map。</li><li><strong>misses</strong>：从read读取miss次数。</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> readOnly <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	m       <span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span><span class="token operator">*</span>entry
	amended <span class="token builtin">bool</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> entry <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	p atomic<span class="token punctuation">.</span>Pointer<span class="token punctuation">[</span>any<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>readOnly.amended</code>表示<code>dirty</code>中是否存在<code>read</code>中不存在的key。</p><h3 id="sync-map的查询过程" tabindex="-1"><a class="header-anchor" href="#sync-map的查询过程"><span>sync.Map的查询过程</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Load</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> <span class="token punctuation">(</span>value any<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		read <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		e<span class="token punctuation">,</span> ok <span class="token operator">=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
			e<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
			m<span class="token punctuation">.</span><span class="token function">missLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到，sync.Map的查询过程如下：</p><ol><li>首先尝试从<code>read</code>读取。</li><li>加锁，再次从<code>read</code>中二次检查。</li><li>如果<code>read</code>中没有找到，并且<code>dirty</code>中存在该key，则从<code>dirty</code>中读取。</li><li>如果<code>read</code>和<code>dirty</code>都没有找到，返回nil。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><p>第6行，进行二次检查。因为可能有其他线程已经在read添加了对应的key，需要double check，二次检查在sync包中经常会看到，我们也会在单例设计模式借鉴该方法。</p></li><li><p>我们也看到<code>read.amended</code>字段存在的价值，必要的数据冗余会带来复杂读的降低，值得学习。</p></li><li><p>我们可以看到如果可以从<code>read</code>查询到数据，整个过程是可以不用加锁的。</p></li></ul></div><p>这里需要关注<code>missLocked</code>方法，该方法用于记录miss次数。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">missLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m<span class="token punctuation">.</span>misses<span class="token operator">++</span>
	<span class="token keyword">if</span> m<span class="token punctuation">.</span>misses <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>readOnly<span class="token punctuation">{</span>m<span class="token punctuation">:</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">}</span><span class="token punctuation">)</span>
	m<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">nil</span>
	m<span class="token punctuation">.</span>misses <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>我们看到如果从<code>read</code>中查不到数据的<code>miss</code>次数如果超过了<code>dirty</code>的长度，就会将<code>dirty</code>提升为<code>read</code>。</p></div><h3 id="sync-map的存储过程" tabindex="-1"><a class="header-anchor" href="#sync-map的存储过程"><span>sync.Map的存储过程</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其底层调用的是Swap方法，我们继续跟进</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value any<span class="token punctuation">)</span> <span class="token punctuation">(</span>previous any<span class="token punctuation">,</span> loaded <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">trySwap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			<span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	read <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">if</span> e<span class="token punctuation">.</span><span class="token function">unexpungeLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> e
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> v <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">swapLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			loaded <span class="token operator">=</span> <span class="token boolean">true</span>
			previous <span class="token operator">=</span> <span class="token operator">*</span>v
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">if</span> v <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">swapLocked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			loaded <span class="token operator">=</span> <span class="token boolean">true</span>
			previous <span class="token operator">=</span> <span class="token operator">*</span>v
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
			m<span class="token punctuation">.</span><span class="token function">dirtyLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>readOnly<span class="token punctuation">{</span>m<span class="token punctuation">:</span> read<span class="token punctuation">.</span>m<span class="token punctuation">,</span> amended<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newEntry</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> previous<span class="token punctuation">,</span> loaded
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，sync.Map的存储过程如下：</p><ol><li>首先尝试从<code>read</code>读取。</li><li>如果<code>read</code>中找到了，则直接更新。由于<code>read</code>和<code>dirty</code>相同的key引用了同一个<code>entry</code>，因此对<code>read</code>的修改，<code>dirty</code>也会生效。因此可以直接退出。</li><li>如果<code>read</code>中找不到，double check read。</li><li>如果<code>dirty</code>找到，则直接更新。</li><li>如果<code>read</code>和<code>dirty</code>均找不到，直接存储在dirty中。</li></ol><p>这里需要关注一下<code>dirtyLocked</code>方法</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">dirtyLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> m<span class="token punctuation">.</span>dirty <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	m<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>any<span class="token punctuation">]</span><span class="token operator">*</span>entry<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>read<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> read<span class="token punctuation">.</span>m <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">tryExpungeLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>该方法如何发现<code>dirty</code>为nil，则将<code>read</code>拷贝至<code>dirty</code>中</p></div><h3 id="sync-map的删除过程" tabindex="-1"><a class="header-anchor" href="#sync-map的删除过程"><span>sync.Map的删除过程</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m<span class="token punctuation">.</span><span class="token function">LoadAndDelete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其底层调用了LoadAndDelete方法，我们继续跟进</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">LoadAndDelete</span><span class="token punctuation">(</span>key any<span class="token punctuation">)</span> <span class="token punctuation">(</span>value any<span class="token punctuation">,</span> loaded <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		read <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		e<span class="token punctuation">,</span> ok <span class="token operator">=</span> read<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
			e<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
			<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>dirty<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
			m<span class="token punctuation">.</span><span class="token function">missLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，sync.Map的删除过程如下：</p><ol><li>首先尝试从<code>read</code>读取，如果<code>read</code>中找到了，则直接删除。</li><li>如果<code>read</code>中找不到，并且存在key在dirty中，double check read。</li><li>如果<code>dirty</code>找到，则直接删除。如果<code>read</code>中找到了，则直接删除。</li><li>如果<code>read</code>和<code>dirty</code>均找不到，直接返回。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>第16行，由于<code>read</code>和<code>dirty</code>相同的key引用了同一个<code>entry</code>，因此对<code>read</code>的修改，<code>dirty</code>也会生效。</p></div><h3 id="sync-map的遍历过程" tabindex="-1"><a class="header-anchor" href="#sync-map的遍历过程"><span>sync.Map的遍历过程</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Range</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value any<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	read <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		read <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> read<span class="token punctuation">.</span>amended <span class="token punctuation">{</span>
			read <span class="token operator">=</span> readOnly<span class="token punctuation">{</span>m<span class="token punctuation">:</span> m<span class="token punctuation">.</span>dirty<span class="token punctuation">}</span>
			copyRead <span class="token operator">:=</span> read
			m<span class="token punctuation">.</span>read<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>copyRead<span class="token punctuation">)</span>
			m<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">nil</span>
			m<span class="token punctuation">.</span>misses <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
		m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> k<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> read<span class="token punctuation">.</span>m <span class="token punctuation">{</span>
		v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">f</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>我们注意到，7-11行，会将dirty复制到read中，并且将dirty置为nil。</p></div><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2><ul><li><a href="https://juejin.cn/post/7156957188840226829" target="_blank" rel="noopener noreferrer">深入理解 Go sync.map</a></li><li><a href="https://www.cnblogs.com/qcrao-2018/p/12833787.html" target="_blank" rel="noopener noreferrer">深度解密 Go 语言之 sync.map</a></li><li><a href="https://blog.baiguiren.com/2023/01/17/golang/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20go%20sync.Map%20-%20%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener noreferrer">深入理解 go sync.Map - 基本原理</a></li><li><a href="https://blog.baiguiren.com/2023/01/18/golang/go%20sync.Map%20%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener noreferrer">go sync.Map 设计与实现</a></li></ul>`,57);function c(l,i){return p(),s("div",null,[a(" more "),o])}const r=n(e,[["render",c],["__file","sync-map.html.vue"]]),k=JSON.parse('{"path":"/language/go/advance/sync-map.html","title":"Go语言sync.Map底层原理","lang":"zh-CN","frontmatter":{"title":"Go语言sync.Map底层原理","date":"2024-05-27T00:00:00.000Z","tag":["Go","进阶"],"category":["编程语言"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/language/go/advance/sync-map.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"Go语言sync.Map底层原理"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T09:37:28.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"进阶"}],["meta",{"property":"article:published_time","content":"2024-05-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-27T09:37:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go语言sync.Map底层原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-27T09:37:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[{"level":3,"title":"存储","slug":"存储","link":"#存储","children":[]},{"level":3,"title":"查询","slug":"查询","link":"#查询","children":[]},{"level":3,"title":"遍历","slug":"遍历","link":"#遍历","children":[]},{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":3,"title":"查询并设置默认值","slug":"查询并设置默认值","link":"#查询并设置默认值","children":[]},{"level":3,"title":"查询并删除","slug":"查询并删除","link":"#查询并删除","children":[]},{"level":3,"title":"交换","slug":"交换","link":"#交换","children":[]},{"level":3,"title":"指定旧值交换","slug":"指定旧值交换","link":"#指定旧值交换","children":[]}]},{"level":2,"title":"底层原理","slug":"底层原理","link":"#底层原理","children":[{"level":3,"title":"sync.Map的查询过程","slug":"sync-map的查询过程","link":"#sync-map的查询过程","children":[]},{"level":3,"title":"sync.Map的存储过程","slug":"sync-map的存储过程","link":"#sync-map的存储过程","children":[]},{"level":3,"title":"sync.Map的删除过程","slug":"sync-map的删除过程","link":"#sync-map的删除过程","children":[]},{"level":3,"title":"sync.Map的遍历过程","slug":"sync-map的遍历过程","link":"#sync-map的遍历过程","children":[]}]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1716802648000,"updatedTime":1716802648000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":1}]},"readingTime":{"minutes":5.16,"words":1548},"filePathRelative":"language/go/advance/sync-map.md","localizedDate":"2024年5月27日","excerpt":""}');export{r as comp,k as data};
