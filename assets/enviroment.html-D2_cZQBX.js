import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as t,e as i}from"./app-gPyuNBaO.js";const l="/assets/GOPATH-CUHzyhpD.png",n={},a=i('<p>当下载完Go安装包后，需设置3个环境变量，分别是：</p><ol><li>GOROOR：Go语言安装根目录的路径，这是下载的Go语言安装路径。</li><li>GOPATH：工作区目录的路径，这是我们写代码存放的地方。</li><li>GOBIN：Go程序生成的可执行文件的路径。</li></ol><p>可使用命令<code>go env</code>来查看当前的设置。</p><p>这里重点关注GOPATH，因为这是我们项目存放的地方，且需按照Go语言的源码组织方式组织我们的项目。GOPATH包含多个工作区，每个工作区包含三个文件夹，分别是：</p><ol><li>src：Go语言的源码文件（source file）。</li><li>pkg：安装后的归档文件（archive file），即程序编译后生产的静态库文件。同时会根据操作系统和计算机架构生产平台相关目录，例如是linux_amd64则表示是Linux系统，CPU是amd64架构。</li><li>bin：可执行文件（executable file）。</li></ol><figure><img src="'+l+'" alt="GOPATH" tabindex="0" loading="lazy"><figcaption>GOPATH</figcaption></figure><p>此外，还有几个环境变量需要关注:</p><ol><li>GO111MODULE，通过设置on、off、auto来控制是否开启Go Modules特性。 <ul><li>on，代表开启Go Modules特性，会让Go编译器忽略GOPATH和vendor文件夹，只根据go.mod下载依赖；</li><li>off，代表关闭，继续使用GOPATH模式；</li><li>auto，Go1.14和之后的版本中都是默认值，如果源码在$GOPATH/src下，且没有包含go.mod，则关闭Go Modules特性，否则开启；</li></ul></li><li>GOPROXY，Go包下载代理服务器，因为墙的原因，国内无法访问国外的一些网站，但一些依赖包需要从国外的网站下载，为了解决这个问题，需要设置一个代理服务器。例如：<code>GOPROXY=&quot;https://goproxy.cn,direct&quot;</code>，其中direct的作用是当遇见404错误，则直接去目标地址（比如Github）去获取，而不再使用代理服务器。</li><li>GOPRIVATE，用于配置访问私有化仓库的代理，例如：<code>GOPRIVATE=git.xxx.com/</code></li></ol>',8),r=[a];function c(p,G){return o(),t("div",null,r)}const s=e(n,[["render",c],["__file","enviroment.html.vue"]]),g=JSON.parse('{"path":"/go-language/base/enviroment.html","title":"项目环境","lang":"zh-CN","frontmatter":{"title":"项目环境","date":"2022-01-23T00:00:00.000Z","tag":["Go","基础"],"category":["Go语言"],"description":"当下载完Go安装包后，需设置3个环境变量，分别是： GOROOR：Go语言安装根目录的路径，这是下载的Go语言安装路径。 GOPATH：工作区目录的路径，这是我们写代码存放的地方。 GOBIN：Go程序生成的可执行文件的路径。 可使用命令go env来查看当前的设置。 这里重点关注GOPATH，因为这是我们项目存放的地方，且需按照Go语言的源码组织方式...","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/go-language/base/enviroment.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"项目环境"}],["meta",{"property":"og:description","content":"当下载完Go安装包后，需设置3个环境变量，分别是： GOROOR：Go语言安装根目录的路径，这是下载的Go语言安装路径。 GOPATH：工作区目录的路径，这是我们写代码存放的地方。 GOBIN：Go程序生成的可执行文件的路径。 可使用命令go env来查看当前的设置。 这里重点关注GOPATH，因为这是我们项目存放的地方，且需按照Go语言的源码组织方式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-30T09:20:01.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:published_time","content":"2022-01-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-30T09:20:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目环境\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-30T09:20:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[],"git":{"createdTime":1642945014000,"updatedTime":1690708801000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":1}]},"readingTime":{"minutes":1.7,"words":511},"filePathRelative":"go-language/base/enviroment.md","localizedDate":"2022年1月23日","excerpt":"<p>当下载完Go安装包后，需设置3个环境变量，分别是：</p>\\n<ol>\\n<li>GOROOR：Go语言安装根目录的路径，这是下载的Go语言安装路径。</li>\\n<li>GOPATH：工作区目录的路径，这是我们写代码存放的地方。</li>\\n<li>GOBIN：Go程序生成的可执行文件的路径。</li>\\n</ol>\\n<p>可使用命令<code>go env</code>来查看当前的设置。</p>\\n<p>这里重点关注GOPATH，因为这是我们项目存放的地方，且需按照Go语言的源码组织方式组织我们的项目。GOPATH包含多个工作区，每个工作区包含三个文件夹，分别是：</p>\\n<ol>\\n<li>src：Go语言的源码文件（source file）。</li>\\n<li>pkg：安装后的归档文件（archive file），即程序编译后生产的静态库文件。同时会根据操作系统和计算机架构生产平台相关目录，例如是linux_amd64则表示是Linux系统，CPU是amd64架构。</li>\\n<li>bin：可执行文件（executable file）。</li>\\n</ol>","autoDesc":true}');export{s as comp,g as data};
