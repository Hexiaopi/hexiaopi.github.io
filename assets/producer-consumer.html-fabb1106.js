const t=JSON.parse('{"key":"v-6e17abce","path":"/design-pattern/concurrency/producer-consumer.html","title":"生产者/消费者模式","lang":"zh-CN","frontmatter":{"title":"生产者/消费者模式","date":"2023-08-22T00:00:00.000Z","tag":["Go","并发模式"],"category":["设计模式"],"description":"生产者/消费者模式是并发编程中常见的模型，该模型主要通过平衡生产者和消费者来提高程序的整体处理数据的能力 生产者/消费者模式 该模型中：生产者生产数据，放到队列中，消费者从队列中取数据。这样生产者和消费者变成异步的两个过程。 producer-consumer 定义生产者 // Producer: 生产factor倍数 func Producer(factor int, out chan&lt;- int) { \\tfor i := 0; ; i++ { \\t\\tout &lt;- i * factor \\t} }","head":[["meta",{"property":"og:url","content":"https://Hexiaopi.github.io/design-pattern/concurrency/producer-consumer.html"}],["meta",{"property":"og:site_name","content":"Hexiaopi"}],["meta",{"property":"og:title","content":"生产者/消费者模式"}],["meta",{"property":"og:description","content":"生产者/消费者模式是并发编程中常见的模型，该模型主要通过平衡生产者和消费者来提高程序的整体处理数据的能力 生产者/消费者模式 该模型中：生产者生产数据，放到队列中，消费者从队列中取数据。这样生产者和消费者变成异步的两个过程。 producer-consumer 定义生产者 // Producer: 生产factor倍数 func Producer(factor int, out chan&lt;- int) { \\tfor i := 0; ; i++ { \\t\\tout &lt;- i * factor \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-22T14:05:24.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"并发模式"}],["meta",{"property":"article:published_time","content":"2023-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-22T14:05:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生产者/消费者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-22T14:05:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"生产者/消费者模式","slug":"生产者-消费者模式","link":"#生产者-消费者模式","children":[]}],"git":{"createdTime":1692713124000,"updatedTime":1692713124000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":1}]},"readingTime":{"minutes":0.85,"words":256},"filePathRelative":"design-pattern/concurrency/producer-consumer.md","localizedDate":"2023年8月22日","excerpt":"<p><strong>生产者/消费者</strong>模式是并发编程中常见的模型，该模型主要通过平衡生产者和消费者来提高程序的整体处理数据的能力</p>\\n<h2> 生产者/消费者模式</h2>\\n<p>该模型中：生产者生产数据，放到队列中，消费者从队列中取数据。这样生产者和消费者变成异步的两个过程。</p>\\n<figure><figcaption>producer-consumer</figcaption></figure>\\n<p>定义生产者</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// Producer: 生产factor倍数</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">Producer</span><span class=\\"token punctuation\\">(</span>factor <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> out <span class=\\"token keyword\\">chan</span><span class=\\"token operator\\">&lt;-</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tout <span class=\\"token operator\\">&lt;-</span> i <span class=\\"token operator\\">*</span> factor\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
