const e=JSON.parse('{"key":"v-cc93be06","path":"/design-pattern/behavioral/","title":"行为型模式","lang":"zh-CN","frontmatter":{"title":"行为型模式","date":"2023-07-31T00:00:00.000Z","tag":["Go","行为型模式"],"category":["设计模式"],"description":"行为型设计模式 行为型设计模式是一类用于处理对象之间交互、职责划分以及算法封装等问题的设计模式，这类设计模式关注的是对象之间的通信以及行为的分配，可以帮助解决对象之间职责不够清晰、相互依赖、难以复用等问题。 相同点 都是用于描述和组织对象的行为和交互方式； 通过将复杂的交互拆分成多个独立的部分，提高代码的重用性和可维护性； 用于降低对象之间的耦合度，提高代码的可扩展性和灵活性； 通过定义抽象接口和规范方法调用方式，提高代码的规范性和可读性。","head":[["meta",{"property":"og:url","content":"https://Hexiaopi.github.io/design-pattern/behavioral/"}],["meta",{"property":"og:site_name","content":"Hexiaopi"}],["meta",{"property":"og:title","content":"行为型模式"}],["meta",{"property":"og:description","content":"行为型设计模式 行为型设计模式是一类用于处理对象之间交互、职责划分以及算法封装等问题的设计模式，这类设计模式关注的是对象之间的通信以及行为的分配，可以帮助解决对象之间职责不够清晰、相互依赖、难以复用等问题。 相同点 都是用于描述和组织对象的行为和交互方式； 通过将复杂的交互拆分成多个独立的部分，提高代码的重用性和可维护性； 用于降低对象之间的耦合度，提高代码的可扩展性和灵活性； 通过定义抽象接口和规范方法调用方式，提高代码的规范性和可读性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-31T14:52:38.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"行为型模式"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-31T14:52:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"行为型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-31T14:52:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"行为型设计模式","slug":"行为型设计模式","link":"#行为型设计模式","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]}],"git":{"createdTime":1690708801000,"updatedTime":1690815158000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":1.73,"words":520},"filePathRelative":"design-pattern/behavioral/README.md","localizedDate":"2023年7月31日","excerpt":"<h2> 行为型设计模式</h2>\\n<blockquote>\\n<p>行为型设计模式是一类用于处理对象之间交互、职责划分以及算法封装等问题的设计模式，这类设计模式关注的是对象之间的通信以及行为的分配，可以帮助解决对象之间职责不够清晰、相互依赖、难以复用等问题。</p>\\n</blockquote>\\n<h3> 相同点</h3>\\n<ul>\\n<li>都是用于描述和组织对象的行为和交互方式；</li>\\n<li>通过将复杂的交互拆分成多个独立的部分，提高代码的重用性和可维护性；</li>\\n<li>用于降低对象之间的耦合度，提高代码的可扩展性和灵活性；</li>\\n<li>通过定义抽象接口和规范方法调用方式，提高代码的规范性和可读性。</li>\\n</ul>","autoDesc":true}');export{e as data};
