import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,e as n,b as e,o as c}from"./app-CQiB7Bh7.js";const o="/assets/decorator-iu2J58Br.png",p={},i=n("figure",null,[n("img",{src:"https://refactoringguru.cn/images/patterns/content/decorator/decorator-2x.png",alt:"decorator",tabindex:"0",loading:"lazy"}),n("figcaption",null,"decorator")],-1),l=e('<h2 id="什么是装饰器模式" tabindex="-1"><a class="header-anchor" href="#什么是装饰器模式"><span>什么是装饰器模式</span></a></h2><p>装饰器模式(Decorator Pattern)：它可以在不改变原有对象的结构和功能的情况下，动态地给对象添加新的功能或者增强原有功能。装饰器设计模式的核心思想是使用一个装饰器对象来包装原有对象，从而实现对原有对象的功能扩展或修改。</p><h3 id="包含哪些角色" tabindex="-1"><a class="header-anchor" href="#包含哪些角色"><span>包含哪些角色</span></a></h3><figure><img src="'+o+`" alt="decorator" tabindex="0" loading="lazy"><figcaption>decorator</figcaption></figure><ul><li><p>Component: 组件接口</p><p>所有被装饰组件及装饰器对应的接口标准</p></li><li><p>ConcreteComponent: 具体组件</p><p>需要被装饰的组件，实现组件接口标准</p></li><li><p>Decorator: 装饰器</p><p>持有一个组件（Component）对象的实例，并定义一个与组件接口一致的接口。</p></li><li><p>ConcreteDecorator: 装饰器实现</p><p>继承自装饰器抽象类的具体子类装饰器，可以有多种实现，在被装饰组件对象的基础上为其添加新的特性。</p></li></ul><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> decorator

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> Component <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ConcreteComponent <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c ConcreteComponent<span class="token punctuation">)</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;concrete component execute&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Decorator <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	component Component
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Decorator<span class="token punctuation">)</span> <span class="token function">SetComponent</span><span class="token punctuation">(</span>c Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	d<span class="token punctuation">.</span>component <span class="token operator">=</span> c
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>d Decorator<span class="token punctuation">)</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	d<span class="token punctuation">.</span>component<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ConcreteDecortor1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Decorator
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c ConcreteDecortor1<span class="token punctuation">)</span> <span class="token function">addedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;concrete decortor1 add function&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c ConcreteDecortor1<span class="token punctuation">)</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span><span class="token function">addedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>Decorator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> ConcreteDecortor2 <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Decorator
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c ConcreteDecortor2<span class="token punctuation">)</span> <span class="token function">addedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;concrete decortor2 add function&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c ConcreteDecortor2<span class="token punctuation">)</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span><span class="token function">addedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>Decorator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ExampleComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> ConcreteComponent<span class="token punctuation">{</span><span class="token punctuation">}</span>
	c<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//c1装饰c</span>
	<span class="token keyword">var</span> c1 ConcreteDecortor1
	c1<span class="token punctuation">.</span><span class="token function">SetComponent</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	c1<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//c2装饰c</span>
	<span class="token keyword">var</span> c2 ConcreteDecortor2
	c2<span class="token punctuation">.</span><span class="token function">SetComponent</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	c2<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">//c2装饰c1</span>
	<span class="token keyword">var</span> c21 ConcreteDecortor2
	c21<span class="token punctuation">.</span><span class="token function">SetComponent</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>
	c21<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// Output:</span>
	<span class="token comment">// concrete component execute</span>
	<span class="token comment">// concrete decortor1 add function</span>
	<span class="token comment">// concrete component execute</span>
	<span class="token comment">// concrete decortor2 add function</span>
	<span class="token comment">// concrete component execute</span>
	<span class="token comment">// concrete decortor2 add function</span>
	<span class="token comment">// concrete decortor1 add function</span>
	<span class="token comment">// concrete component execute</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我们注意到c1可以装饰c、c2可以装饰c，同时c2也可以装饰c1，说明装饰器模式是可叠加的，这也是装饰器模式的一个优点。</p></div><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ul><li>当需要在不改变原有对象的结构和功能的情况下，给对象添加新的功能或者增强原有功能时。</li><li>当需要根据不同的需求，灵活地组合不同的功能扩展或修改时。</li><li>当需要保持原有对象的接口不变，保证了装饰后的对象和原有对象的兼容性时。</li></ul><h3 id="有哪些优缺点" tabindex="-1"><a class="header-anchor" href="#有哪些优缺点"><span>有哪些优缺点</span></a></h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ul><li>可以在不修改原有对象的代码的情况下，给对象添加新的功能或者增强原有功能，符合开闭原则。</li><li>可以保持原有对象的接口不变，保证了装饰后的对象和原有对象的兼容性。</li><li>可以增加一批类的功能，而非仅仅一个类。</li><li>可以根据需要灵活地组合不同的装饰器对象，实现多种功能扩展或修改。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ul><li>会增加系统的复杂度，因为需要创建多个装饰器对象和管理它们之间的关系。</li><li>会增加系统的运行时开销，因为每次调用原有对象的方法时，都需要经过装饰器对象的转发和处理。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="装饰器设计模式和继承" tabindex="-1"><a class="header-anchor" href="#装饰器设计模式和继承"><span>装饰器设计模式和继承</span></a></h3><p>装饰器模式和继承都是扩展类功能的机制，但两者的区别如下：</p><table><thead><tr><th>对比</th><th>装饰器模式</th><th>继承</th></tr></thead><tbody><tr><td>重用性</td><td>可以应用多个类</td><td>只能应用一个类</td></tr><tr><td>复杂性</td><td>较复杂</td><td>简单易理解</td></tr><tr><td>耦合性</td><td>低耦合</td><td>高耦合</td></tr></tbody></table><p>因此：如果想给一批类增加功能时可以考虑使用装饰器模式，而如果仅给一个对象增加功能就使用继承。</p><h3 id="装饰器设计模式和适配器设计模式" tabindex="-1"><a class="header-anchor" href="#装饰器设计模式和适配器设计模式"><span>装饰器设计模式和适配器设计模式</span></a></h3><p>装饰器模式和适配器模式的区别在于它们的应用场景和目的不同：</p><ul><li>装饰器模式可以应用于任何需要对对象进行功能扩展或修改的场景，例如日志记录、缓存、验证等。</li><li>适配器模式主要应用于两个不兼容的接口之间的转换，例如不同类型的电源插头、不同格式的数据源等。</li></ul>`,25);function u(r,d){return c(),a("div",null,[i,t(" more "),l])}const v=s(p,[["render",u],["__file","decorator.html.vue"]]),h=JSON.parse('{"path":"/design-pattern/structural/decorator.html","title":"装饰器","lang":"zh-CN","frontmatter":{"title":"装饰器","date":"2022-12-04T00:00:00.000Z","tag":["Go","结构型模式"],"category":["设计模式"],"description":"decoratordecorator","head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/design-pattern/structural/decorator.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"装饰器"}],["meta",{"property":"og:description","content":"decoratordecorator"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoringguru.cn/images/patterns/content/decorator/decorator-2x.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T01:28:10.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"结构型模式"}],["meta",{"property":"article:published_time","content":"2022-12-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-20T01:28:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"装饰器\\",\\"image\\":[\\"https://refactoringguru.cn/images/patterns/content/decorator/decorator-2x.png\\"],\\"datePublished\\":\\"2022-12-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-20T01:28:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"什么是装饰器模式","slug":"什么是装饰器模式","link":"#什么是装饰器模式","children":[{"level":3,"title":"包含哪些角色","slug":"包含哪些角色","link":"#包含哪些角色","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"有哪些优缺点","slug":"有哪些优缺点","link":"#有哪些优缺点","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"装饰器设计模式和继承","slug":"装饰器设计模式和继承","link":"#装饰器设计模式和继承","children":[]},{"level":3,"title":"装饰器设计模式和适配器设计模式","slug":"装饰器设计模式和适配器设计模式","link":"#装饰器设计模式和适配器设计模式","children":[]}]}],"git":{"createdTime":1690708801000,"updatedTime":1724117290000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":2},{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":3.43,"words":1030},"filePathRelative":"design-pattern/structural/decorator.md","localizedDate":"2022年12月4日","excerpt":"<figure><img src=\\"https://refactoringguru.cn/images/patterns/content/decorator/decorator-2x.png\\" alt=\\"decorator\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>decorator</figcaption></figure>\\n","autoDesc":true}');export{v as comp,h as data};
