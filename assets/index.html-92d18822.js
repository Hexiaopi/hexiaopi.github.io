import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,e as a}from"./app-95ff9c18.js";const r={},t=a('<h2 id="行为型设计模式" tabindex="-1"><a class="header-anchor" href="#行为型设计模式" aria-hidden="true">#</a> 行为型设计模式</h2><blockquote><p>行为型设计模式是一类用于处理对象之间交互、职责划分以及算法封装等问题的设计模式，这类设计模式关注的是对象之间的通信以及行为的分配，可以帮助解决对象之间职责不够清晰、相互依赖、难以复用等问题。</p></blockquote><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h3><ul><li>都是用于描述和组织对象的行为和交互方式；</li><li>通过将复杂的交互拆分成多个独立的部分，提高代码的重用性和可维护性；</li><li>用于降低对象之间的耦合度，提高代码的可扩展性和灵活性；</li><li>通过定义抽象接口和规范方法调用方式，提高代码的规范性和可读性。</li></ul><h3 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h3><ul><li>观察者模式旨在实现对象之间的松耦合关系，当一个对象状态发生改变时，它会通知它所观察到的所有对象；</li><li>模板方法模式旨在将通用的算法框架定义为一个抽象函数，然后由子类实现具体算法的不同部分；</li><li>策略模式是定义一族算法、封装每个算法，并使这些算法可以互换，从而让算法的变化独立于客户端；</li><li>命令模式旨在将请求封装成对象，以便于参数化和传递，同时支持请求排队、记录日志、撤销等操作；</li><li>责任链模式旨在将请求的处理方式连成一个链，每个对象都尝试处理该请求，直到其中一个对象处理成功为止；</li><li>迭代器模式是在不暴露集合内部结构的情况下，提供一种访问元素的方式；</li><li>访问者模式则是定义了一组对数据结构中的元素进行操作的方法，通过这些方法可以实现对数据结构的统一处理。</li></ul>',6),c=[t];function o(d,n){return e(),l("div",null,c)}const _=i(r,[["render",o],["__file","index.html.vue"]]);export{_ as default};
