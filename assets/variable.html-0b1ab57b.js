import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-c0e959d1.js";const t={},o=e(`<h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><blockquote><p>程序运行过程中，数据常常分配在内存中，我们在编码阶段用一个易于阅读的名字来定义这块内存，这块内存上存储的数据其值可以经常改变，我们就称为变量(variable)</p><p>变量的类型决定了变量在内存的长度和存储格式</p></blockquote><h3 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h3><h4 id="一个变量" tabindex="-1"><a class="header-anchor" href="#一个变量" aria-hidden="true">#</a> 一个变量</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token operator">&lt;</span>variable_name<span class="token operator">&gt;</span> <span class="token punctuation">[</span>variable_type<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> x <span class="token builtin">int</span>			<span class="token comment">//自动初始化int的零值即0</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//编译器自动推断为bool类型，并赋值为false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>👀</p><ul><li>编译器确保变量被初始化为<code>零值</code>，避免出现不可预测行为</li><li>定义的变量如果未使用，会编译不通过</li></ul><h4 id="多个变量" tabindex="-1"><a class="header-anchor" href="#多个变量" aria-hidden="true">#</a> 多个变量</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//不同类型变量</span>
<span class="token keyword">var</span> <span class="token punctuation">(</span>
  i <span class="token builtin">int</span> 
  s <span class="token builtin">string</span>
<span class="token punctuation">)</span>
<span class="token comment">//相同类型变量</span>
<span class="token keyword">var</span> x<span class="token punctuation">,</span>y <span class="token builtin">int</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="短变量" tabindex="-1"><a class="header-anchor" href="#短变量" aria-hidden="true">#</a> 短变量</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>count <span class="token operator">:=</span> <span class="token number">10</span> <span class="token comment">//编译器自动推断为int类型</span>
x<span class="token punctuation">,</span>y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>	<span class="token comment">//多个变量同时定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>👀</p><ul><li><p>必须给变量相同数量的值，由编译器推断类型</p></li><li><p>短变量声明只可存在函数中，不可全局声明</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

x<span class="token operator">:=</span><span class="token number">0</span>		<span class="token comment">//编译失败</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>由于使用了<code>:=</code>，因此至少有一个<code>新声明的变量</code>出现在左值，否则编译失败</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> x<span class="token punctuation">,</span>y <span class="token builtin">int</span>
x<span class="token punctuation">,</span>y<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token comment">//编译失败</span>
x<span class="token punctuation">,</span>z<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token comment">//z是新声明的变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="匿名变量" tabindex="-1"><a class="header-anchor" href="#匿名变量" aria-hidden="true">#</a> 匿名变量</h4><blockquote><p>匿名变量是以下划线<code>_</code>声明的，通常用于多值返回时忽略某个值</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>result<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">//忽略err</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="零值" tabindex="-1"><a class="header-anchor" href="#零值" aria-hidden="true">#</a> 零值</h3><blockquote><p>Go语言中，当一个变量被定义为某一种数据类型后，Go语言回自动初始化其值为零值（Zero Value），零值并不等于空值，而是对应数据类型的默认值。</p></blockquote><ul><li>整型默认值为：0</li><li>浮点型默认值为：0.0</li><li>布尔类型的默认值是：false</li><li>字符串类型的默认值为：&quot;&quot;</li><li>复数类型默认值为对应实部和虚部的零值：0+0i</li><li><code>function</code>、<code>interface</code>、<code>map</code>、<code>slice</code>、<code>channel</code>等类型为nil，表示没有分配内存地址</li><li><code>struct</code>和<code>array</code>则是分配了内存，其子元素对应上述的零值</li></ul><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><p>变量的作用（使用）范围称为变量的作用域，通常来说，一段程序代码中所用到的变量并不总是有效或可用的，而限定这个变量的可用范围即作用域，根据作用域可将变量分为两种：全局变量和局部作变量。</p><p>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了命名冲突。</p><h4 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h4><blockquote><p>全局变量（Global Variables）是在函数外部定义的变量，它的作用范围涵盖了整个包。</p></blockquote><h4 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h4><blockquote><p>局部变量（Local Variables）是在函数内部或<code>{}</code>内定义的变量，它的作用范围仅限域函数内部或<code>{}</code>内。</p></blockquote><p>👀</p><p>存在变量地址变化问题，须小心使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
	x <span class="token operator">=</span> <span class="token number">101</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
	x <span class="token operator">:=</span> <span class="token number">102</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
	x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		x<span class="token punctuation">,</span> z <span class="token operator">:=</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">3</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token comment">//输出</span>
<span class="token number">0x1149268</span> <span class="token number">100</span>				<span class="token comment">//x初始地址和值</span>
<span class="token number">0x1149268</span> <span class="token number">101</span>				<span class="token comment">//只是修改了值</span>
<span class="token number">0xc0000140a0</span> <span class="token number">102</span>		<span class="token comment">//x被重新定义，x的地址已经发生变化</span>
<span class="token number">0xc0000140a0</span> <span class="token number">200</span> <span class="token number">2</span>	<span class="token comment">//由于y是新声明的变量，x没有被重新定义，x的地址没有发生变化</span>
<span class="token number">0xc0000140a8</span> <span class="token number">300</span> <span class="token number">3</span>	<span class="token comment">//新的作用域，x为新定义的变量，作用范围在该作用域内</span>
<span class="token number">0xc0000140a0</span> <span class="token number">200</span>		<span class="token comment">//离开作用域，x为上文的变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声明原则" tabindex="-1"><a class="header-anchor" href="#声明原则" aria-hidden="true">#</a> 声明原则</h3><blockquote><p>就近原则，尽可能在靠近第一次使用变量的位置声明该变量</p></blockquote><p>例如：<code>$GORROT/src/net/http/request.go</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> ErrNoCookie <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;http: named cookie not present&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// Cookie returns the named cookie provided in the request or</span>
<span class="token comment">// ErrNoCookie if not found.</span>
<span class="token comment">// If multiple cookies match the given name, only one cookie will</span>
<span class="token comment">// be returned.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token function">Cookie</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Cookie<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token function">readCookies</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrNoCookie
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","variable.html.vue"]]);export{d as default};
