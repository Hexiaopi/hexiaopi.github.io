import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,b as n,o as s}from"./app-oq2zg2ZW.js";const i="/assets/digest-CaaTPAVi.png",o={},l=n('<h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证"><span>认证</span></a></h2><blockquote><p>我们有多种途径来保障应用的安全，例如：网咯隔离、设置防火墙、设置IP黑名单等。而<strong>认证</strong>是软件层面保护应用安全的一种措施。</p><p>当前有四种认证方式，分别是：<code>Basic</code>、<code>Digest</code>、<code>OAuth</code>和<code>Bearer</code></p></blockquote><h3 id="basic认证" tabindex="-1"><a class="header-anchor" href="#basic认证"><span>Basic认证</span></a></h3><blockquote><p>Basic认证（基础认证）是一种简单的认证方式。将<code>用户名:密码</code>进行base64编码，放到HTTP Authorization Header中。</p><p>但是base64不是加密技术，入侵者可以通过截获base64字符串，并反编码获取用户名和密码；其次即便进行了加密了用户名和密码，入侵者可以通过加重放攻击。</p></blockquote><p>因此Basic认证非常不安全。在设计系统时，要遵循一个通用的原则：不要在请求参数中使用明文密码，也不要在任何存储中保存明文密码。</p><h3 id="digest认证" tabindex="-1"><a class="header-anchor" href="#digest认证"><span>Digest认证</span></a></h3><blockquote><p>Digest认证（摘要认证）是一种HTTP认证协议，它与Basic认证兼容，但修复了Basic认证的严重缺陷。</p></blockquote><p><strong>特点</strong></p><ul><li>绝不会用明文的方式在网络上发送密码</li><li>可以有效防止恶意用户进行重放攻击</li><li>可以有效的防止对报文内容进行篡改</li></ul><p>摘要认证的过程如下图所示： <img src="'+i+`" alt="digest" loading="lazy"></p><ol><li>客户端请求服务端资源</li><li>在客户端能够证明它知道密码从而确认其身份之前，服务端认证失败，返回401 Unauthorized，并返回WWW-Authenticate头，里面包含认证需要的信息。</li><li>客户端根据WWW-Authenticate头中的信息，选择加密算法，并使用密码随机数<code>nonce</code>，计算出密码摘要<code>response</code>，并再次请求服务端。</li><li>服务器将客户端提供的密码摘要与服务器内部计算出的摘要进行对比。如果匹配，就说明客户端知道密码，认证通过，并返回一些与授权会话相关的附加信息，放在<code>Authorization-Info</code>中。</li></ol><p>其中涉及到的一些参数说明：</p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">WWW-Authentication</td><td style="text-align:center;">用来定义使用何种方式（Basic、Digest、Bearer等）去进行认证以获取受保护的资源</td></tr><tr><td style="text-align:center;">username</td><td style="text-align:center;">用户名</td></tr><tr><td style="text-align:center;">realm</td><td style="text-align:center;">服务器返回的realm，一般是域名</td></tr><tr><td style="text-align:center;">method</td><td style="text-align:center;">HTTP请求方法</td></tr><tr><td style="text-align:center;">nonce</td><td style="text-align:center;">服务器发给客户端的随机字符串，会经常发生变化。客户端计算密码摘要时将其附加上去，使得多次生成同一用户的密码摘要各不相同，用来防止重放攻击</td></tr><tr><td style="text-align:center;">nc(nonceCount)</td><td style="text-align:center;">16进制数值，用于记录请求的次数，用于标记、计数，防止重放攻击</td></tr><tr><td style="text-align:center;">cnonce(clientNonce)</td><td style="text-align:center;">客户端发送给服务器的随机字符串，用于客户端对服务器的认证</td></tr><tr><td style="text-align:center;">qop</td><td style="text-align:center;">保护质量参数，包含auth（默认）或auth-int（增加了报文完整性检测）</td></tr><tr><td style="text-align:center;">uri</td><td style="text-align:center;">请求的uri</td></tr><tr><td style="text-align:center;">response</td><td style="text-align:center;">客户端根据算法算出的密码摘要值</td></tr><tr><td style="text-align:center;">Authorization-Info</td><td style="text-align:center;">用于返回一些与授权会话相关的附加信息</td></tr><tr><td style="text-align:center;">nextnonce</td><td style="text-align:center;">下一个服务端随机数，使客户端可以预先发送正确的摘要</td></tr><tr><td style="text-align:center;">rspauth</td><td style="text-align:center;">响应摘要，用于客户端对服务端进行认证</td></tr></tbody></table><p>摘要认证可以保护密码，比基本认证要安全的多，但摘要认证并不能保护内容，所以仍然要与HTTPS配合使用。</p><h3 id="oauth认证" tabindex="-1"><a class="header-anchor" href="#oauth认证"><span>OAuth认证</span></a></h3><blockquote><p>OAuth（开放授权）是一个开放的授权标准，允许用户让第三方应用访问该用户在某一Web服务上存储的私密资源（例如：照片、视频、音频等），而无需将用户名和密码提供给第三方应用。</p></blockquote><p>阮老师解释OAuth2.0非常形象，一看就懂 <a href="https://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener noreferrer">OAuth 2.0 的一个简单解释</a></p><p><a href="https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noopener noreferrer">OAuth 2.0 的四种方式</a></p><p><a href="https://www.ruanyifeng.com/blog/2019/04/github-oauth.html" target="_blank" rel="noopener noreferrer">GitHub OAuth 第三方登录示例教程</a></p><p>OAuth当前是2.0版本，分为四种授权方式：密码式、隐藏式、凭借式和授权码模式。</p><h4 id="密码式" tabindex="-1"><a class="header-anchor" href="#密码式"><span>密码式</span></a></h4><p>流程如下：</p><ol><li>网站A向用户发出获取用户名和密码的请求；</li><li>用户同意后，网站A凭借用户名和密码向网站B换取令牌；</li><li>网站B验证用户身份后，给出网站A令牌，网站A凭借令牌可以访问网站B对应权限的资源。、</li></ol><p>特点：用户需要高度信任网站A</p><h4 id="隐藏式" tabindex="-1"><a class="header-anchor" href="#隐藏式"><span>隐藏式</span></a></h4><p>流程如下：</p><ol><li>A网站提供一个跳转到B网站的链接，用户点击后跳转至B网站，并向用户请求授权；</li><li>用户登录B网站，同意授权后，跳转回A网站指定的重定向redirect_url地址，并携带B网站返回的令牌，用户在B网站的数据给A网站使用。</li></ol><p>常见：适用于前端应用，例如公司内部应用集成SSO登录</p><p>特点：存在中间人攻击的风险，因此只能用于一些安全性要求不高的场景，并且令牌的有效时间要非常短。</p><h4 id="凭借式" tabindex="-1"><a class="header-anchor" href="#凭借式"><span>凭借式</span></a></h4><ol><li>应用A在命令行向应用B请求授权，此时应用A需要携带应用B提前颁发的secretID和secretKey，其中secretKey出于安全性考虑，需在后端发送；</li><li>应用B接收到secretID和secretKey，并进行身份验证，验证通过后返回给应用A令牌；</li></ol><p>常见：适用于没有前端的命令行应用</p><h4 id="授权码模式" tabindex="-1"><a class="header-anchor" href="#授权码模式"><span>授权码模式</span></a></h4><p>流程如下：</p><ol><li>A网站提供一个跳转到B网站的链接+redirect_url，用户点击后跳转至B网站；</li><li>用户携带B网站提前申请的client_id，向B网站发起身份验证请求；</li><li>用户登录B网站，通过验证，授予A网站权限，此时网站跳转回redirect_url，其中会有B网站通过验证后的授权码附在该url后；</li><li>网站A携带授权码向网站B请求令牌，网站B验证授权码后，返回令牌即acess_token；</li></ol><h3 id="bearer认证" tabindex="-1"><a class="header-anchor" href="#bearer认证"><span>Bearer认证</span></a></h3><blockquote><p>Bearer认证也称为令牌认证，是一种HTTP身份验证方法，Bearer认证的核心是bearer token。bearer token是一个加密字符串，通常由服务端根据秘钥生成。客户端在请求服务端时，必须在请求头中包含Authorization: Bearer <code>&lt;token&gt;</code>，服务端收到请求后，解析出token，并校验token的合法性。</p></blockquote><p>当前最流行的token编码方式是JSON Web Token(JWT)</p><h4 id="基于jwt的token认证" tabindex="-1"><a class="header-anchor" href="#基于jwt的token认证"><span>基于JWT的Token认证</span></a></h4><blockquote><p>JWT是Bearer Token的一个具体实现，由JSON数据格式组成，通过HASH散列算法生成一个字符串，该字符串可以用来进行授权和信息交换。</p></blockquote><p>流程如下：</p><ol><li>客户端使用用户名和密码请求登录。</li><li>服务端收到请求后，会去验证用户名和密码。如果用户名和密码跟数据库记录不一致，则验证失败；如果一致则验证通过，服务端会签发一个 Token 返回给客户端。</li><li>客户端收到请求后会将 Token 缓存起来，比如放在浏览器 Cookie 中或者 LocalStorage 中，之后每次请求都会携带该 Token。</li><li>服务端收到请求后，会验证请求中的 Token，验证通过则进行业务逻辑处理，处理完后返回处理后的结果</li></ol><p>JWT格式由三部分组成，分别是Header、Payload和Signature，它们之间用圆点.连接，例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2NDI4NTY2MzcsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MzUwODA2MzcsInN1YiI6ImFkbWluIn0.Shw27RKENE_2MVBq7-c8OmgYdF92UmdwS8xE-Fts2FM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Header</strong></p><p>包含两部分信息：一个是Token的类型，二是Token所使用的加密算法，例如：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>typ：说明Token的类型；</li><li>alg: 说明Token的加密算法；</li></ul><p>将Header进行base64编码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;}&#39;</span><span class="token operator">|</span>base64
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在某些场景下，可能还会有kid选项，用来标识一个秘钥ID，例如：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;kid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;XhbY3aCrfjdYcP1OFJRu9xcno8JzSbUIvGE2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Payload</strong></p><p>有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。</p><ul><li>iss: Issuer，JWT Token的签发者</li><li>exp: Expiration Time，JWT Token的过期时间</li><li>sub: Subject，主题</li><li>aud: Audience，一般可以为特定的App、服务或模块。服务端的安全策略再签发时和验证时，aud必须一致</li><li>iat: Issued At，JWT Token签发时间</li><li>nbf: Not Before，JWT Toekn生效时间</li><li>jti: JWT ID，令牌的唯一标识符，通常用于一次性消费的Token</li></ul><p>例如：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;aud&quot;</span><span class="token operator">:</span> <span class="token string">&quot;iam.authz.marmotedu.com&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exp&quot;</span><span class="token operator">:</span> <span class="token number">1604158987</span><span class="token punctuation">,</span>
  <span class="token property">&quot;iat&quot;</span><span class="token operator">:</span> <span class="token number">1604151787</span><span class="token punctuation">,</span>
  <span class="token property">&quot;iss&quot;</span><span class="token operator">:</span> <span class="token string">&quot;iamctl&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;nbf&quot;</span><span class="token operator">:</span> <span class="token number">1604151787</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将payload进行base64编码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;{&quot;aud&quot;:&quot;iam.authz.marmotedu.com&quot;,&quot;exp&quot;:1604158987,&quot;iat&quot;:1604151787,&quot;iss&quot;:&quot;iamctl&quot;,&quot;nbf&quot;:1604151787}&#39;</span><span class="token operator">|</span>base64
eyJhdWQiOiJpYW0uYXV0aHoubWFybW90ZWR1LmNvbSIsImV4cCI6MTYwNDE1ODk4NywiaWF0Ijox
NjA0MTUxNzg3LCJpc3MiOiJpYW1jdGwiLCJuYmYiOjE2MDQxNTE3ODd9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些预定义的字段并不要求强制使用，此外，我们还可以自定义私有字段，一般会把包含用户信息的数据放到payload中。注意，不要添加敏感信息，此外私有声明是客户端和服务端所共同定义的声明。</p><p><strong>Signature</strong></p><p>Signature是Token的签名部分，通过如下方式生成：将 Header 和 Payload 分别 base64 编码后，用 . 连接。然后再使用 Header 中声明的加密方式，利用 secretKey 对连接后的字符串进行加密，加密后的字符串即为最终的 Signature。secretKey 是密钥，保存在服务器中，一般通过配置文件来保存。</p><p>签名后服务端会返回生成的 Token，客户端下次请求会携带该 Token。服务端收到 Token 后会解析出 header.payload，然后用相同的加密算法和密钥对 header.payload 再进行一次加密，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>HMACSHA256<span class="token punctuation">(</span>base64UrlEncode<span class="token punctuation">(</span>header<span class="token punctuation">)</span>+<span class="token string">&quot;.&quot;</span>+base64UrlEncode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>,secret<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到 Signature。并且，对比加密后的 Signature 和收到的 Signature 是否相同，如果相同则验证通过，不相同则返回 HTTP 401 Unauthorized 的错误。</p>`,65);function r(p,c){return s(),t("div",null,[a(" more "),l])}const h=e(o,[["render",r],["__file","auth.html.vue"]]),g=JSON.parse('{"path":"/system-design/security/auth.html","title":"认证方案","lang":"zh-CN","frontmatter":{"title":"认证方案","date":"2022-09-18T00:00:00.000Z","tag":["系统设计"],"category":["系统设计"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/system-design/security/auth.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"认证方案"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T15:52:14.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"系统设计"}],["meta",{"property":"article:published_time","content":"2022-09-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-05T15:52:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"认证方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-05T15:52:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"认证","slug":"认证","link":"#认证","children":[{"level":3,"title":"Basic认证","slug":"basic认证","link":"#basic认证","children":[]},{"level":3,"title":"Digest认证","slug":"digest认证","link":"#digest认证","children":[]},{"level":3,"title":"OAuth认证","slug":"oauth认证","link":"#oauth认证","children":[]},{"level":3,"title":"Bearer认证","slug":"bearer认证","link":"#bearer认证","children":[]}]}],"git":{"createdTime":1690708801000,"updatedTime":1714924334000,"contributors":[{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2},{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":1}]},"readingTime":{"minutes":8.16,"words":2449},"filePathRelative":"system-design/security/auth.md","localizedDate":"2022年9月18日","excerpt":""}');export{h as comp,g as data};
