import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as i,a as o,d as l,b as n,o as r}from"./app-BdlxyEd4.js";const c={},p=n('<h2 id="行为型设计模式" tabindex="-1"><a class="header-anchor" href="#行为型设计模式"><span>行为型设计模式</span></a></h2><blockquote><p>行为型设计模式是一类用于处理对象之间交互、职责划分以及算法封装等问题的设计模式，这类设计模式关注的是对象之间的通信以及行为的分配，可以帮助解决对象之间职责不够清晰、相互依赖、难以复用等问题。</p></blockquote><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h3><ul><li>都是用于描述和组织对象的行为和交互方式；</li><li>通过将复杂的交互拆分成多个独立的部分，提高代码的重用性和可维护性；</li><li>用于降低对象之间的耦合度，提高代码的可扩展性和灵活性；</li><li>通过定义抽象接口和规范方法调用方式，提高代码的规范性和可读性。</li></ul><h3 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点"><span>不同点</span></a></h3><ul><li>观察者模式旨在实现对象之间的松耦合关系，当一个对象状态发生改变时，它会通知它所观察到的所有对象；</li><li>模板方法模式旨在将通用的算法框架定义为一个抽象函数，然后由子类实现具体算法的不同部分；</li><li>策略模式是定义一族算法、封装每个算法，并使这些算法可以互换，从而让算法的变化独立于客户端；</li><li>命令模式旨在将请求封装成对象，以便于参数化和传递，同时支持请求排队、记录日志、撤销等操作；</li><li>责任链模式旨在将请求的处理方式连成一个链，每个对象都尝试处理该请求，直到其中一个对象处理成功为止；</li><li>迭代器模式是在不暴露集合内部结构的情况下，提供一种访问元素的方式；</li><li>访问者模式则是定义了一组对数据结构中的元素进行操作的方法，通过这些方法可以实现对数据结构的统一处理。</li></ul>',6);function s(d,m){const e=a("Catalog");return r(),i("div",null,[o(" more "),p,l(e)])}const u=t(c,[["render",s],["__file","index.html.vue"]]),_=JSON.parse('{"path":"/design-pattern/behavioral/","title":"行为型模式","lang":"zh-CN","frontmatter":{"title":"行为型模式","icon":"person-digging","date":"2023-07-31T00:00:00.000Z","tag":["Go","行为型模式"],"category":["设计模式"],"head":[["meta",{"property":"og:url","content":"http://blog.cjhe.top/design-pattern/behavioral/"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"行为型模式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T02:44:40.000Z"}],["meta",{"property":"article:author","content":"Hexiaopi"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"行为型模式"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T02:44:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"行为型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T02:44:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hexiaopi\\",\\"url\\":\\"https://github.com/Hexiaopi\\"}]}"]]},"headers":[{"level":2,"title":"行为型设计模式","slug":"行为型设计模式","link":"#行为型设计模式","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]}],"git":{"createdTime":1642859663000,"updatedTime":1714963480000,"contributors":[{"name":"HeXiaoPi","email":"hechangjie0619@icloud.com","commits":3},{"name":"hexiaopi","email":"hechangjie0619@icloud.com","commits":2}]},"readingTime":{"minutes":1.75,"words":526},"filePathRelative":"design-pattern/behavioral/README.md","localizedDate":"2023年7月31日","excerpt":""}');export{u as comp,_ as data};
