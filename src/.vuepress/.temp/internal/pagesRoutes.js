export const pagesRoutes = [
  ["v-8daa1a0e","/",{"y":"h","t":"博客主页","i":"home"},["/README.md"]],
  ["v-184f4da6","/intro.html",{"e":"<h1> 介绍页</h1>\n<p><img src=\"https://raw.githubusercontent.com/Hexiaopi/Hexiaopi/master/profile-summary-card-output/github/0-profile-details.svg\" alt=\"profile-details\" loading=\"lazy\"><br>\n<img src=\"https://raw.githubusercontent.com/Hexiaopi/Hexiaopi/master/profile-summary-card-output/github/1-repos-per-language.svg\" alt=\"profile-language\" loading=\"lazy\"><br>\n<img src=\"https://raw.githubusercontent.com/Hexiaopi/Hexiaopi/master/profile-summary-card-output/github/2-most-commit-language.svg\" alt=\"commit-language\" loading=\"lazy\"><br>\n<img src=\"https://raw.githubusercontent.com/Hexiaopi/Hexiaopi/master/profile-summary-card-output/github/3-stats.svg\" alt=\"stats\" loading=\"lazy\"><br>\n<img src=\"https://raw.githubusercontent.com/Hexiaopi/Hexiaopi/master/profile-summary-card-output/github/4-productive-time.svg\" alt=\"time\" loading=\"lazy\"></p>","y":"a","t":"介绍页","i":"circle-info"},[":md"]],
  ["v-2e3eac9e","/slides.html",{"e":"<!-- markdownlint-disable MD024 MD033 MD051 -->\n","y":"s","t":"幻灯片页","i":"person-chalkboard"},[":md"]],
  ["v-a233bfd2","/algorithm/limit.html",{"e":"<h1> 限流</h1>\n<blockquote>\n<p>限流，是一种自我保护的机制，服务端通过一些限流手段控制并发访问请求，目的是为了防止系统因突发流量导致服务不可用或者崩溃。</p>\n</blockquote>\n<p>常用的限流方法：</p>\n<ul>\n<li>计数器限流</li>\n<li>滑动窗口限流</li>\n<li>漏桶限流</li>\n<li>令牌桶限流</li>\n</ul>\n<h2> 计数器限流</h2>\n<blockquote>\n<p>在一段时间间隔内，对请求进行计数，与阈值进行比较判断是否需要限流</p>\n<p>时间结束后重置计数器</p>\n<p>因此计数器限流也叫固定时间限流</p>\n</blockquote>","y":"a","t":"限流"},[":md"]],
  ["v-16cd0aab","/go-language/",{"d":1642809600000,"l":"2022年1月22日","c":["Go语言"],"g":["Go","基础"],"e":"<blockquote>\n<p>Go语言是一种开源的静态型、编译型并自带垃圾回收和并发的程序设计语言。</p>\n</blockquote>\n<p>具有以下特点：</p>\n<p>1、快速编译</p>\n<p>开发人员经常导入一些头文件（include），但是有些内容并未使用，导致编译了不必要的内容，Go语言会在编译时检查判断程序和包之间的联系，如果没有联系则报告异常，从而减少编译内容，加快编译速度。</p>\n<p>2、并发设计简单</p>\n<p>Go语言原生支持并发、无须使用第三方库。Go语言的并发模型基于CSP模型，使用goroutine轻量级线程实现并发，使用channel实现各个goroutine之间的通信。</p>","y":"a","t":"简介"},["/go-language/README.md"]],
  ["v-d5fe0c96","/design-pattern/",{"d":1662768000000,"l":"2022年9月10日","c":["设计模式"],"g":["Go","设计模式"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>面向对象是<strong>武器</strong></p>\n<p>设计模式是<strong>招式</strong></p>\n<p>设计原则是<strong>心法</strong></p>\n<p>以心法为基础，以武器运用招式应对复杂的编程问题</p>\n</div>\n","y":"a","t":"设计模式-简介"},["/design-pattern/README.md"]],
  ["v-a7a4945c","/design-pattern/principle.html",{"d":1665792000000,"l":"2022年10月15日","c":["设计模式"],"g":["Go","设计原则"],"e":"SOLID原则 SOLID原则是由罗伯特·C·马丁在21世纪早期引入，指代了面向对象编程和面向对象设计的五个基本原则。遵循SOLID原则可以确保我们设计的代码是易维护、易扩展、易阅读的。SOLID原则同样也适用于Go程序设计。具体SOLID编码原则见下表： 简写 全称 中文描述 ---- --------------------------------...","y":"a","t":"设计原则"},[":md"]],
  ["v-3c0f2a82","/design-pattern/quantity-code.html",{"d":1667260800000,"l":"2022年11月1日","c":["设计模式"],"g":["代码质量","设计模式"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>什么样的代码才是高质量的代码❓</p>\n</div>\n","y":"a","t":"高质量代码"},[":md"]],
  ["v-45e23e29","/monitor-system/grafana.html",{"e":"<h1> Grafana</h1>\n<h2> 1. Grafana简介</h2>\n<h3> 1.1 grafana简介</h3>\n<blockquote>\n<p>Grafana是适用于所有指标的分析平台，允许用户查询、可视化、提醒和理解指标。</p>\n</blockquote>\n<p>另外一种定义</p>\n<blockquote>\n<p>Grafana是一款开源的、功能丰富的支持Graphite、Elasticsearch、OpenTSDB、Prometheus和InfluxDB等数据源的指标仪表板和图形编辑器。</p>\n</blockquote>\n<p><strong>官网：</strong><code>https://grafana.com/</code></p>","y":"a","t":"Grafana"},[":md"]],
  ["v-3767096a","/monitor-system/promql.html",{"e":"<h1> PromQL</h1>\n<h2> 1. 名词解释</h2>\n<blockquote>\n<p><strong>指标</strong>是软件或硬件组件属性的度量。</p>\n<p>为了使指标有价值，我们会跟踪其状态，通常记录一段时间内的数据点。这些数据点成为<strong>观察点</strong>（observation），观察点通常包括值、时间戳，有时也涵盖描述观察点的一系列属性。</p>\n<p>观察点的集合称为<strong>时间序列</strong>（time series）。</p>\n<p>我们通常以固定的时间间隔收集指标，该时间间隔称为<strong>颗粒度</strong>（granularity）或<strong>分辨率</strong>（resolution）</p>\n</blockquote>","y":"a","t":"PromQL"},[":md"]],
  ["v-a08a9ca8","/network/websocket.html",{"d":1679184000000,"l":"2023年3月19日","c":["网络"],"g":["WebSocket"],"e":"<blockquote>\n<p>WebSocket是为了提供web应用程序和服务端全双工通信而专门定制的一种网络协议，和HTTP协议一样位于OSI模型的应用层协议。</p>\n</blockquote>\n<h2> 特点</h2>\n<ul>\n<li>建立在TCP协议之上</li>\n<li>与HTTP协议有着良好的兼容性，握手阶段采用HTTP协议，默认端口是80和443</li>\n<li>数据格式比较轻量，性能开销小、通信高效</li>\n<li>可以发送文本，也可以发送二进制数据</li>\n<li>没有同源限制，客户端可以与任意服务器通信</li>\n<li>协议标识符是ws(如果加密，则为wss)，形式：ws://echo.websocket.org</li>\n</ul>","y":"a","t":"WebSocket协议"},[":md"]],
  ["v-99412b08","/other/how-to-get-rich-without-getting-lucky.html",{"d":1665446400000,"l":"2022年10月11日","c":["转载"],"g":["财富"],"e":"<p>【转】<a href=\"https://github.com/fat-garage/how-to-get-rich-without-getting-lucky\" target=\"_blank\" rel=\"noopener noreferrer\">原文链接</a></p>\n","y":"a","t":"如何不靠运气变得富有"},[":md"]],
  ["v-3a332cac","/other/how-to-live-longer.html",{"d":1677801600000,"l":"2023年3月3日","c":["转载"],"g":["健康"],"e":"<p>【转】<a href=\"https://github.com/geekan/HowToLiveLonger\" target=\"_blank\" rel=\"noopener noreferrer\">原文链接</a></p>\n","y":"a","t":"程序员延寿指南"},[":md"]],
  ["v-e1d68714","/other/website.html",{"d":1677888000000,"l":"2023年3月4日","c":["转载"],"g":["博客"],"e":"<h2> 算法</h2>\n<p>数据结构和算法动态可视化<a href=\"https://visualgo.net/zh\" target=\"_blank\" rel=\"noopener noreferrer\"></a></p>\n<p>算法可视化<a href=\"https://www.chrislaux.com/\" target=\"_blank\" rel=\"noopener noreferrer\"></a></p>\n<p>在线运行代码的算法可视化<a href=\"https://algorithm-visualizer.org/\" target=\"_blank\" rel=\"noopener noreferrer\"></a></p>","y":"a","t":"收集的一些网站"},[":md"]],
  ["v-49e68b84","/project-standard/api.html",{"d":1579824000000,"l":"2020年1月24日","c":["项目规范"],"g":["规范","接口"],"e":"<blockquote>\n<p>API接口文档常常包含以下内容</p>\n<ul>\n<li>接口详细列表，包含接口功能，请求方法、输入参数、输出参数、请求示例</li>\n<li>CHANGELOG：API接口文档变更历史，方便进行回溯</li>\n<li>通用的请求参数、返回参数、认证方法或者加密算法</li>\n<li>接口中使用的数据结构</li>\n<li>错误码描述</li>\n</ul>\n</blockquote>\n<p>常见的API接口规范为：RESTful API规范</p>\n<h2> URI</h2>\n<blockquote>\n<p>URI表示资源，资源一般对应后端实体，例如：用户为user<br>\n资源集合通常使用复数形式，例如：users</p>\n</blockquote>","y":"a","t":"接口规范"},[":md"]],
  ["v-d2187c5c","/project-standard/branch.html",{"d":1581379200000,"l":"2020年2月11日","c":["项目规范"],"g":["规范","分支"],"e":"<figure><img src=\"https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122301.png\" alt=\"git-model\" tabindex=\"0\" loading=\"lazy\"><figcaption>git-model</figcaption></figure>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>一个好的代码分支应该是怎样的❓</p>\n</div>\n","y":"a","t":"分支规范"},[":md"]],
  ["v-2c2fb35d","/project-standard/commit.html",{"d":1580601600000,"l":"2020年2月2日","c":["项目规范"],"g":["规范"],"e":"<h2> Commit Message</h2>\n<p>Git每次提交代码，都需要写<code>Commit message</code>，好的规范例如：<a href=\"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\" target=\"_blank\" rel=\"noopener noreferrer\">Angular规范</a>，可以帮助我们：</p>\n<ul>\n<li>根据摘要信息就可以知道每次变更哪些内容</li>\n<li>可以过滤某些commit，例如只关注新增加的功能</li>\n<li>根据commit生成<code>Change log</code></li>\n</ul>","y":"a","t":"提交规范"},[":md"]],
  ["v-eccb295e","/project-standard/directory.html",{"d":1581206400000,"l":"2020年2月9日","c":["项目规范"],"g":["规范"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>Go语言项目业界公认的目录结构是怎样的❓</p>\n</div>\n","y":"a","t":"目录规范"},[":md"]],
  ["v-0ca49136","/project-standard/project.html",{"a":"Hexiaopi","d":1579824000000,"l":"2020年1月24日","c":["项目规范"],"g":["规范","项目"],"e":"<blockquote>\n<p>README文档是项目的门面，通过README文档可以帮助用户快速了解项目。</p>\n</blockquote>\n<p>README文档可以参考以下模板，或者通过在线网站生成<a href=\"https://readme.so/\" target=\"_blank\" rel=\"noopener noreferrer\">readme.so</a></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code># 项目名称\n&lt;!-- 简介项目 --&gt;\n## 功能特性\n&lt;!-- 描述该项目的核心功能点 --&gt;\n## 软件架构(可选)\n&lt;!-- 描述下项目的架构 --&gt;\n## 快速开始\n### 依赖检查\n&lt;!-- 该项目的依赖，比如依赖的包、工具或者其他任何依赖项 --&gt;\n### 构建\n&lt;!-- 如何构建该项目 --&gt;\n### 运行\n&lt;!-- 如何运行该项目 --&gt;\n### 预览环境（可选）\n&lt;!-- 提供预览环境，帮助用户快速尝鲜 --&gt;\n## 使用指南\n&lt;!-- 如何使用该项目 --&gt;\n## 如何贡献\n&lt;!-- 如何贡献源码 --&gt;\n## 社区(可选)\n&lt;!-- 社区相关的内容 --&gt;\n## 关于作者\n&lt;!-- 项目作者(多个) --&gt;\n## 谁在用(可选)\n&lt;!-- 使用本项目的其他有影响力的项目，加分 --&gt;\n## 许可证\n&lt;!-- 开源许可证 --&gt;\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"项目规范"},[":md"]],
  ["v-88ddb5f4","/project-standard/version.html",{"d":1579910400000,"l":"2020年1月25日","c":["项目规范"],"g":["规范","版本"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>随着系统功能越来越复杂，依赖的软件包越来越多，如何解决【依赖地狱】问题？</p>\n</div>\n","y":"a","t":"版本规范"},[":md"]],
  ["v-3dcc0924","/system-design/distribute-lock.html",{"d":1668211200000,"l":"2022年11月12日","c":["系统设计"],"g":["Go","Lua","Redis"],"e":"分布式锁 分布式锁即在分布式环境下不同实例之间抢一把锁，相比较单一实例的锁，分布式环境下带来的问题更多，例如网络问题。 分布式锁可以通过多种途径实现，例如:Zookeeper等。由于Redis是经常使用的中间件，本篇内容基于Redis实现分布式锁。 特性： 互斥性：任意时刻，只有一个客户端能持有锁；; 锁超时释放：持有锁超时，可以释放，防止不必要的资源...","y":"a","t":"基于Redis的分布式锁"},[":md"]],
  ["v-264fa4ae","/tools/ca.html",{"e":"<h1> CA证书</h1>\n<h2> 安装工具</h2>\n<blockquote>\n<p>使用CloudFlare的PKI和TLS工具包cfssl来创建证书</p>\n</blockquote>\n<h3> 安装cfssl工具集</h3>\n<p>cfssl工具集中包含很多工具</p>\n<blockquote>\n<p>cfssl：证书签发工具</p>\n</blockquote>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>go get github.com/cloudflare/cfssl/cmd/cfssl\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":"CA证书"},[":md"]],
  ["v-4cb73674","/tools/confd.html",{"e":"<h2> 1. confd</h2>\n<h3> 1.1 confd简介</h3>\n<blockquote>\n<p>confd是一个轻量级配置管理工具，通过加载存储在etcd、consul、redis、zookeeper等的数据，结合配置模板动态更新配置文件。</p>\n</blockquote>\n<p><strong>github地址</strong>：<code>https://github.com/kelseyhightower/confd</code></p>\n<p><strong>官网：</strong><code>http://www.confd.io/</code></p>\n<h3> 1.2 confd功能角色</h3>","y":"a","t":""},[":md"]],
  ["v-4e3cc72e","/tools/vscode-leetcode.html",{"d":1660089600000,"l":"2022年8月10日","c":["工具"],"g":["vscode","leetcode","插件"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>vscode这款插件太香了，终于可以沉浸式刷leetcode😄</p>\n</div>\n","y":"a","t":"vscode leetcode插件"},[":md"]],
  ["v-18b42cf7","/data-structure/tree/binary-search-tree.html",{"e":"<h1> 二叉搜索树</h1>\n<h2> 简介</h2>\n<blockquote>\n<p>二叉搜索树（Binary Search Tree,BST）又叫二叉排序树，基于二分法查找思想设计的树。它的定义如下：</p>\n<ol>\n<li>它是一棵二叉树</li>\n<li>左子树的所有节点的值都小于它的根节点，右子树的所有节点的值都大于它的根节点</li>\n<li>左右子树也是一棵二叉搜索树</li>\n</ol>\n</blockquote>\n<h2> 增加节点</h2>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Node<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>value <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">&gt;</span> n<span class=\"token punctuation\">.</span>Data <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>Right <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tn<span class=\"token punctuation\">.</span>Right <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Node<span class=\"token punctuation\">{</span>\n\t\t\t\tLeft<span class=\"token punctuation\">:</span>  <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t\tData<span class=\"token punctuation\">:</span>  value<span class=\"token punctuation\">,</span>\n\t\t\t\tRight<span class=\"token punctuation\">:</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tn<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">.</span>Data <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>Left <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tn<span class=\"token punctuation\">.</span>Left <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Node<span class=\"token punctuation\">{</span>\n\t\t\t\tLeft<span class=\"token punctuation\">:</span>  <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t\tData<span class=\"token punctuation\">:</span>  value<span class=\"token punctuation\">,</span>\n\t\t\t\tRight<span class=\"token punctuation\">:</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tn<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">\" already exist\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"二叉搜索树"},[":md"]],
  ["v-3c53178c","/data-structure/tree/binary-tree.html",{"e":"<h1> 二叉树</h1>\n<blockquote>\n<p>满足以下两个条件的树就是二叉树：</p>\n<ul>\n<li>本身是有序树</li>\n<li>树中包含的各个节点的度不能超过2，即只能是：0、1、2</li>\n</ul>\n</blockquote>\n<p>定义二叉树的结构</p>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> Node <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tLeft  <span class=\"token operator\">*</span>Node\n\tData  <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tRight <span class=\"token operator\">*</span>Node\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"二叉树"},[":md"]],
  ["v-68a75613","/go-language/base/array.html",{"d":1651708800000,"l":"2022年5月5日","c":["Go语言"],"g":["Go","基础"],"e":"\n<h2> 数组</h2>\n<blockquote>\n<p>一个由固定长度的特定类型组成的序列。特定类型可以是：字符串、结构体、函数、接口、通道等。</p>\n</blockquote>\n<h3> 声明</h3>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> a <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">//长度为3的int类型数组，元素为[0,0,0]</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\t\t\t<span class=\"token comment\">//长度为3的int类型数组，元素为[1,2,3]</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\t\t<span class=\"token comment\">//长度为3的int类型数组，元素为[0,2,3]</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\t<span class=\"token comment\">//长度为4的int类型数组，元素为[0,2,3,4]</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"数组"},[":md"]],
  ["v-02c4b1a6","/go-language/base/break.html",{"d":1676073600000,"l":"2023年2月11日","c":["Go语言"],"g":["Go","基础"],"e":"<p>这里展示break的一个例子</p>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\texit <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tick\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>exit<span class=\"token punctuation\">:</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exiting...\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">break</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exit!\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\texit <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// wait child goroutine exit</span>\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"highlight-lines\"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class=\"highlight-line\">&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br></div><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"小心break🤦‍♂️"},[":md"]],
  ["v-fcddc414","/go-language/base/concurrency-pattern.html",{"d":1677369600000,"l":"2023年2月26日","c":["Go语言"],"g":["Go","基础"],"e":"<p>Go语言推荐CSP模型进行并发处理，而非通过共享内存。这里总结一些并发模式或者称作范式，去管理控制协程。</p>\n","y":"a","t":"Go并发模式"},[":md"]],
  ["v-4f1522e2","/go-language/base/constant.html",{"d":1651536000000,"l":"2022年5月3日","c":["Go语言"],"g":["Go","基础"],"e":"<h2> 常量</h2>\n<blockquote>\n<p>常量（constant），顾名思义，程序运行期间，其值不能改变的量。</p>\n</blockquote>\n<h3> 声明</h3>\n<h4> 一个常量</h4>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">const</span> <span class=\"token operator\">&lt;</span>constant_name<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>constant_type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>赋值表达式<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":"常量"},[":md"]],
  ["v-5ec5b1ef","/go-language/base/data-type.html",{"d":1651536000000,"l":"2022年5月3日","c":["Go语言"],"g":["Go","基础"],"e":"\n<h2> 数据类型</h2>\n<blockquote>\n<p>Go语言基本数据类型（Data-types）划分方式有很多，这里按照<strong>数据类型</strong>进行划分：值类型、复合类型、引用类型</p>\n</blockquote>\n<h3> 值类型</h3>\n<blockquote>\n<p>值类型即基本的数据类型，包括布尔类型（bool）、整型（int）、浮点型（float）、字节型（byte）、复数型（complex）、字符串型（string）和错误类型（error）。</p>\n<p>值类型的变量在传递过程中，编译器对该变量的值进行一次拷贝。</p>\n</blockquote>","y":"a","t":"数据类型"},[":md"]],
  ["v-ad6c3422","/go-language/base/enviroment.html",{"d":1642896000000,"l":"2022年1月23日","c":["Go语言"],"g":["Go","基础"],"e":"<p>当下载完Go安装包后，需设置3个环境变量，分别是：</p>\n<ol>\n<li>GOROOR：Go语言安装根目录的路径，这是下载的Go语言安装路径。</li>\n<li>GOPATH：工作区目录的路径，这是我们写代码存放的地方。</li>\n<li>GOBIN：Go程序生成的可执行文件的路径。</li>\n</ol>\n<p>可使用命令<code>go env</code>来查看当前的设置。</p>\n<p>这里重点关注GOPATH，因为这是我们项目存放的地方，且需按照Go语言的源码组织方式组织我们的项目。GOPATH包含多个工作区，每个工作区包含三个文件夹，分别是：</p>\n<ol>\n<li>src：Go语言的源码文件（source file）。</li>\n<li>pkg：安装后的归档文件（archive file），即程序编译后生产的静态库文件。同时会根据操作系统和计算机架构生产平台相关目录，例如是linux_amd64则表示是Linux系统，CPU是amd64架构。</li>\n<li>bin：可执行文件（executable file）。</li>\n</ol>","y":"a","t":"项目环境"},[":md"]],
  ["v-63c643b3","/go-language/base/for-range.html",{"d":1675900800000,"l":"2023年2月9日","c":["Go语言"],"g":["Go","基础"],"e":"<div class=\"hint-container danger\">\n<p class=\"hint-container-title\">警告</p>\n<p><code>for range</code>同常使用在遍历：数组、指向数组的指针、切片、字符串、map和channel等表达式</p>\n<p>其中有不少坑需要小心！！！</p>\n</div>\n","y":"a","t":"for-range避坑指南"},[":md"]],
  ["v-1d1f1c20","/go-language/base/goroutine.html",{"d":1676246400000,"l":"2023年2月13日","c":["Go语言"],"g":["Go","基础"],"e":"<p>Go语言原生支持并发能力，而goroutine是Go语言原生支持并发的具体实现，本篇将为你揭开goroutine的面纱。</p>\n<figure><img src=\"http://cdn.cjhe.top/blog/goroutine.png\" alt=\"goroutine\" tabindex=\"0\" loading=\"lazy\"><figcaption>goroutine</figcaption></figure>\n","y":"a","t":"goroutine和调度原理"},[":md"]],
  ["v-9ff1c486","/go-language/base/identifier.html",{"d":1651536000000,"l":"2022年5月3日","c":["Go语言"],"g":["Go","规范","基础"],"e":"<h2> 命名规则</h2>\n<blockquote>\n<p>Go语言中用来对符号常量、变量、函数、数组、切片、通道等数据对象命名的有效字符序列统称为标识符（Identifier）即数据对象的名字。</p>\n</blockquote>\n<p>Go语言的命名规则：</p>\n<ul>\n<li>变量名必须以字母或下划线开始；</li>\n<li>必须使用英文字母、数字、下划线组成，不能出现空格或制表符；</li>\n<li>不能使用Go语言内置关键字和保留字，如：go、func、break、defer等；</li>\n<li>大小写敏感，比如<code>x</code>和<code>X</code>是两个不一样的标识符；</li>\n</ul>","y":"a","t":"命名规则"},[":md"]],
  ["v-f0d6149a","/go-language/base/interface.html",{"d":1676160000000,"l":"2023年2月12日","c":["Go语言"],"g":["Go","基础"],"e":"<figure><img src=\"http://cdn.cjhe.top/blog/interface.png\" alt=\"interface\" tabindex=\"0\" loading=\"lazy\"><figcaption>interface</figcaption></figure>\n","y":"a","t":"interface底层原理"},[":md"]],
  ["v-bbcc2f5a","/go-language/base/iota.html",{"d":1675382400000,"l":"2023年2月3日","c":["Go语言"],"g":["Go","基础"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>iota的出现使得枚举值更加方便，但注意哦，并不简单。主要是对iota定义不理解，我整理了一些iota的使用注意事项</p>\n</div>\n","y":"a","t":"魔幻的iota枚举"},[":md"]],
  ["v-640bedb0","/go-language/base/map.html",{"d":1675641600000,"l":"2023年2月6日","c":["Go语言"],"g":["Go","基础"],"e":"<figure><img src=\"http://cdn.cjhe.top/blog/map.png\" alt=\"map\" tabindex=\"0\" loading=\"lazy\"><figcaption>map</figcaption></figure>\n","y":"a","t":"map底层原理和注意事项"},[":md"]],
  ["v-3a8c5ead","/go-language/base/mutex.html",{"d":1678492800000,"l":"2023年3月11日","c":["Go语言"],"g":["Go","基础"],"e":"<p>Go语言sync包提供了两种锁：</p>\n<ul>\n<li>互斥锁 Mutex:\n<ul>\n<li>加锁时，其他加锁协程均阻塞</li>\n</ul>\n</li>\n<li>读写锁 RWMutex:\n<ul>\n<li>加读锁时，加写锁协程阻塞，加读锁协程不阻塞</li>\n<li>加写锁时，其他加读写协程均阻塞</li>\n</ul>\n</li>\n</ul>\n","y":"a","t":"深入了解Go锁原理"},[":md"]],
  ["v-3ab5fde2","/go-language/base/operator.html",{"d":1642896000000,"l":"2022年1月23日","c":["Go语言"],"g":["Go","基础"],"e":"<p>程序、表达式、运算符之间的关系</p>\n<blockquote>\n<p>通常计算机程序是由多条表达式语句按照一定的逻辑关系所构成的，表达式（Expression）是程序算法的基本单位。</p>\n</blockquote>\n<p>表达式</p>\n<blockquote>\n<p>表达式由操作数（常量、变量、函数调用等）和运算符结合一起构成的式子；</p>\n</blockquote>\n<p>运算符</p>\n<blockquote>\n<p>运算符（Operator）用于对操作数进行运算</p>\n<p>根据操作数的数目可分为一元运算符、二元运算符；</p>\n<p>按照运算符的功能可分为赋值运算符、算术运算符、逻辑运算符、关系运算符、位运算符等；</p>\n</blockquote>","y":"a","t":"运算符"},[":md"]],
  ["v-8610b30c","/go-language/base/slice.html",{"d":1675382400000,"l":"2023年2月3日","c":["Go语言"],"g":["Go","基础"],"e":"<figure><img src=\"http://cdn.cjhe.top/blog/slice-1.png\" alt=\"slice\" tabindex=\"0\" loading=\"lazy\"><figcaption>slice</figcaption></figure>\n","y":"a","t":"切片slice底层原理和操作"},[":md"]],
  ["v-641d49d5","/go-language/base/string.html",{"d":1642896000000,"l":"2022年1月23日","c":["Go语言"],"g":["Go","基础"],"e":"<h2> 声明</h2>\n<p><strong>关键字定义：</strong> string</p>\n<p><strong>零值：</strong> \"\"</p>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> str <span class=\"token builtin\">string</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":"string字符串"},[":md"]],
  ["v-4333bb0a","/go-language/base/variable.html",{"d":1642896000000,"l":"2022年1月23日","c":["Go语言"],"g":["Go","基础"],"e":"<h2> 变量</h2>\n<blockquote>\n<p>程序运行过程中，数据常常分配在内存中，我们在编码阶段用一个易于阅读的名字来定义这块内存，这块内存上存储的数据其值可以经常改变，我们就称为变量(variable)</p>\n<p>变量的类型决定了变量在内存的长度和存储格式</p>\n</blockquote>\n<h3> 声明</h3>\n<h4> 一个变量</h4>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> <span class=\"token operator\">&lt;</span>variable_name<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>variable_type<span class=\"token punctuation\">]</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":"变量"},[":md"]],
  ["v-131f8859","/go-language/recommend/blog.html",{"d":1677888000000,"l":"2023年3月4日","c":["Go语言"],"g":["Go","博客"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>收集的一些关于Go语言的博客文章，前行不再迷茫</p>\n</div>\n","y":"a","t":"Go语言推荐博客"},[":md"]],
  ["v-7fc9cfba","/go-language/recommend/tool.html",{"d":1662595200000,"l":"2022年9月8日","c":["Go语言"],"g":["Go","工具"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>好的工具将解放我们的生产力！</p>\n</div>\n","y":"a","t":"Go语言推荐工具"},[":md"]],
  ["v-56bdc1b4","/go-language/reprint/tencent-secguide.html",{"d":1677801600000,"l":"2023年3月3日","c":["Go语言","转载"],"g":["Go","安全"],"e":"<p>【转】<a href=\"https://github.com/Tencent/secguide\" target=\"_blank\" rel=\"noopener noreferrer\">原文链接</a></p>\n","y":"a","t":"Go安全指南-腾讯"},[":md"]],
  ["v-7c8d4760","/go-language/reprint/uber-guide.html",{"d":1677888000000,"l":"2023年3月4日","c":["Go语言","转载"],"g":["Go","规范"],"e":"<p>【转】<a href=\"https://github.com/xxjwxc/uber_go_guide_cn\" target=\"_blank\" rel=\"noopener noreferrer\">原文链接</a></p>\n","y":"a","t":"Go语言编码规范-uber"},[":md"]],
  ["v-9198b7e2","/database/mysql/engine.html",{"d":1666396800000,"l":"2022年10月22日","c":["数据库"],"g":["MySQL","数据库"],"e":"MySQL是常用的关系型数据库 MySQL架构 MySQL架构 存储引擎 存储引擎是MySQL区别于其他数据库的一个重要特性，MySQL有诸多存储引擎，且存储引擎是基于表的，而不是数据(同一个数据库下面的各个表可以使用不同的引擎); 存储引擎是底层物理结构的实现，每个存储引擎开发者可以按照自己的意愿开发，具有各自的特点; 对于MySQL使用者来说，存储...","y":"a","t":"MySQL-存储引擎","i":"mysql"},[":md"]],
  ["v-042781f8","/database/mysql/idx.html",{"d":1678838400000,"l":"2023年3月15日","c":["数据库"],"g":["MySQL","索引"],"e":"<p>索引是一种数据结构，帮助SQL高效获取数据的。类似一本书的目录，可以快速对特定值进行定位和查找，从而大大加快数据查询的效率。</p>\n","y":"a","t":"MySQL-索引","i":"mysql"},[":md"]],
  ["v-1b0f0027","/database/mysql/join.html",{"d":1666396800000,"l":"2022年10月22日","c":["数据库"],"g":["MySQL","数据库"],"e":"连接是一种机制，用来在一条SELECT语句中关联表 内连接（INNER JOIN） 内连接又叫等值连接,它将第一个表中的每一行与第二个表中的每一行配对，只返回匹配给定条件的行 从数据的角度就是求两个集合的交集，如下图所示 内连接 示例： 自然连接（NATURE JOIN） 自然连接，会自动找出两个表中相同的列作为连接条件进行连接 以下示例语句与内连接语...","y":"a","t":"MySQL-表连接","i":"mysql"},[":md"]],
  ["v-b78ece4e","/database/mysql/read-process.html",{"d":1666396800000,"l":"2022年10月22日","c":["数据库"],"g":["MySQL","数据库"],"e":"<figure><img src=\"https://cdn.cjhe.top/blog/MySQL-Read-Simple.png\" alt=\"read\" tabindex=\"0\" loading=\"lazy\"><figcaption>read</figcaption></figure>\n","y":"a","t":"MySQL-查询过程","i":"mysql"},[":md"]],
  ["v-ee91271c","/database/mysql/sql-order.html",{"d":1678320000000,"l":"2023年3月9日","c":["数据库"],"g":["数据库"],"e":"<figure><img src=\"https://jvns.ca/images/sql-queries.jpeg\" alt=\"sql-queries\" tabindex=\"0\" loading=\"lazy\"><figcaption>sql-queries</figcaption></figure>\n","y":"a","t":"SQL查询顺序","i":"mysql"},[":md"]],
  ["v-13f32783","/database/mysql/transaction.html",{"d":1666483200000,"l":"2022年10月23日","c":["数据库"],"g":["MySQL","数据库"],"e":"<h2> 事务的特性</h2>\n<ul>\n<li>原子性(Atomicity): 事务中的所有操作要么全部完成，要么全部不完成（回滚），不会在事务中间遇到错误而中断。</li>\n<li>一致性(Consistency): 事务开始和结束时，数据都必须保持一致状态，即符合约束、完整性、默认值以及其它定义的规则。事务执行的结果不能破坏数据库的完整性和一致性。</li>\n<li>隔离性(Isolation): 各个事务互相隔离，每个事务的执行都不会影响其它事务的执行或者结果。</li>\n<li>持久性(Durability): 一个事务一旦提交成功，它对数据库中的数据的改变就是永久性的，即使发生数据库故障也不应该对其产生影响。</li>\n</ul>","y":"a","t":"MySQL-事务","i":"mysql"},[":md"]],
  ["v-373dabc0","/database/mysql/write-process.html",{"d":1666396800000,"l":"2022年10月22日","c":["数据库"],"g":["MySQL","数据库"],"e":"执行流程 查询语句执行的流程，更新语句也会执行类似的过程，稍有差别的地方是更新语句会将更新表的所有缓存清理，这就是为什么不建议使用查询缓存。 交互流程 日志模块 更重要的是MySQL的日志模块，这是数据库提供高可用以及事务的重要模块 我们以InnoDB引擎和一条更新语句为例 写流程 蓝色框是MySQL服务层处理过程; 绿色框是InnoDB引擎层处理过程...","y":"a","t":"MySQL-写入过程","i":"mysql"},[":md"]],
  ["v-cc93be06","/design-pattern/behavioral/",{"y":"a","t":""},["/design-pattern/behavioral/README.md"]],
  ["v-cde40ac4","/design-pattern/behavioral/chain-of-responsibility.html",{"d":1670889600000,"l":"2022年12月13日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/chain-of-responsibility/chain-of-responsibility-2x.png\" alt=\"责任链\" tabindex=\"0\" loading=\"lazy\"><figcaption>责任链</figcaption></figure>\n","y":"a","t":"设计模式-责任链"},[":md"]],
  ["v-42e5c5eb","/design-pattern/behavioral/command.html",{"d":1682467200000,"l":"2023年4月26日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/command/command-zh-2x.png\" alt=\"command\" tabindex=\"0\" loading=\"lazy\"><figcaption>command</figcaption></figure>\n","y":"a","t":"设计模式-命令"},[":md"]],
  ["v-1ba56f4e","/design-pattern/behavioral/iterator.html",{"d":1670803200000,"l":"2022年12月12日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/iterator/iterator-zh-2x.png\" alt=\"iterator\" tabindex=\"0\" loading=\"lazy\"><figcaption>iterator</figcaption></figure>\n","y":"a","t":"设计模式-迭代器"},[":md"]],
  ["v-36cf2be9","/design-pattern/behavioral/mediator.html",{"d":1682726400000,"l":"2023年4月29日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/mediator/mediator-2x.png\" alt=\"mediator\" tabindex=\"0\" loading=\"lazy\"><figcaption>mediator</figcaption></figure>\n","y":"a","t":"设计模式-中介者"},[":md"]],
  ["v-99447c86","/design-pattern/behavioral/memento.html",{"d":1682899200000,"l":"2023年5月1日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/memento/memento-zh-2x.png\" alt=\"memento\" tabindex=\"0\" loading=\"lazy\"><figcaption>memento</figcaption></figure>\n","y":"a","t":"设计模式-备忘录"},[":md"]],
  ["v-7c5065e6","/design-pattern/behavioral/observer.html",{"d":1682985600000,"l":"2023年5月2日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/observer/observer-2x.png\" alt=\"observer\" tabindex=\"0\" loading=\"lazy\"><figcaption>observer</figcaption></figure>\n","y":"a","t":"设计模式-观察者"},[":md"]],
  ["v-1a4a77a5","/design-pattern/behavioral/state.html",{"d":1683158400000,"l":"2023年5月4日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/state/state-zh-2x.png\" alt=\"state\" tabindex=\"0\" loading=\"lazy\"><figcaption>state</figcaption></figure>\n","y":"a","t":"设计模式-状态"},[":md"]],
  ["v-1322ef69","/design-pattern/behavioral/strategy.html",{"d":1670889600000,"l":"2022年12月13日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/strategy/strategy-2x.png\" alt=\"strategy\" tabindex=\"0\" loading=\"lazy\"><figcaption>strategy</figcaption></figure>\n","y":"a","t":"设计模式-策略"},[":md"]],
  ["v-12ac8c42","/design-pattern/behavioral/template-method.html",{"d":1670716800000,"l":"2022年12月11日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/template-method/template-method-2x.png\" alt=\"template-method\" tabindex=\"0\" loading=\"lazy\"><figcaption>template-method</figcaption></figure>\n","y":"a","t":"设计模式-模版方法"},[":md"]],
  ["v-7a3fa2b0","/design-pattern/behavioral/visitor.html",{"d":1683244800000,"l":"2023年5月5日","c":["设计模式"],"g":["Go","行为型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/visitor/visitor-2x.png\" alt=\"visitor\" tabindex=\"0\" loading=\"lazy\"><figcaption>visitor</figcaption></figure>\n","y":"a","t":"设计模式-访问者"},[":md"]],
  ["v-6fb9fd50","/design-pattern/creational/",{"y":"a","t":""},["/design-pattern/creational/README.md"]],
  ["v-41a2d2ec","/design-pattern/creational/abstract-factory.html",{"d":1665792000000,"l":"2022年10月15日","c":["设计模式"],"g":["Go","创建型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/abstract-factory/abstract-factory-zh-2x.png\" alt=\"abstract-factory\" tabindex=\"0\" loading=\"lazy\"><figcaption>abstract-factory</figcaption></figure>\n","y":"a","t":"设计模式-抽象工厂"},[":md"]],
  ["v-c3ab4124","/design-pattern/creational/builder.html",{"d":1665878400000,"l":"2022年10月16日","c":["设计模式"],"g":["Go","创建型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/builder/builder-zh-2x.png\" alt=\"builder\" tabindex=\"0\" loading=\"lazy\"><figcaption>builder</figcaption></figure>\n","y":"a","t":"设计模式-建造者"},[":md"]],
  ["v-a9c08df6","/design-pattern/creational/factory-method.html",{"d":1665792000000,"l":"2022年10月15日","c":["设计模式"],"g":["Go","创建型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/factory-method/factory-method-zh-2x.png\" alt=\"factory-method\" tabindex=\"0\" loading=\"lazy\"><figcaption>factory-method</figcaption></figure>\n","y":"a","t":"设计模式-工厂方法"},[":md"]],
  ["v-86bb0b02","/design-pattern/creational/object-pool.html",{"d":1681603200000,"l":"2023年4月16日","c":["设计模式"],"g":["Go","创建型模式"],"e":"什么是对象池模式 对象池模式(Object Pool Pattern)：它通过预先创建和初始化一组对象，然后将它们存放在一个池中，以便在需要时重复使用。这样可以减少频繁创建和销毁对象的开销，提高应用程序的性能和效率。 包含哪些角色 object-pool Pool：对象池; 对象池维护活动对象列表和空闲对象列表 Object：对象; 对象被客户端使用 ...","y":"a","t":"设计模式-对象池"},[":md"]],
  ["v-7cab1b72","/design-pattern/creational/prototype.html",{"d":1665878400000,"l":"2022年10月16日","c":["设计模式"],"g":["Go","创建型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/prototype/prototype-2x.png\" alt=\"prototype\" tabindex=\"0\" loading=\"lazy\"><figcaption>prototype</figcaption></figure>\n","y":"a","t":"设计模式-原型"},[":md"]],
  ["v-0c2e6a0c","/design-pattern/creational/simple-factory.html",{"d":1665792000000,"l":"2022年10月15日","c":["设计模式"],"g":["Go","创建型模式"],"e":"什么是简单工厂模式 简单工厂模式(Simple Factory Pattern)又称为静态工厂方法(Static Factory Method)模式 它可以根据参数的不同，返回不同类的实例，而无需让客户端知道具体的创建细节。 包含哪些角色 simple-factory SimpleFactory：简单工厂; 简单工厂根据参数的不同创建并返回不同的产品实...","y":"a","t":"设计模式-简单工厂"},[":md"]],
  ["v-98eaee04","/design-pattern/creational/singleton.html",{"d":1665964800000,"l":"2022年10月17日","c":["设计模式"],"g":["Go","创建型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/singleton/singleton-2x.png\" alt=\"singleton\" tabindex=\"0\" loading=\"lazy\"><figcaption>singleton</figcaption></figure>\n","y":"a","t":"设计模式-单例"},[":md"]],
  ["v-f87ed9fc","/design-pattern/function/option.html",{"d":1690070400000,"l":"2023年7月23日","c":["设计模式"],"g":["Go","函数模式"],"e":"<p>:todo:<br>\n由于Go语言不支持重载函数，当我们需要使用不同的方式构建对象时，不得不使用多个构造函数进行初始化。</p>\n","y":"a","t":"选项模式"},[":md"]],
  ["v-490a23c6","/design-pattern/structural/",{"y":"a","t":""},["/design-pattern/structural/README.md"]],
  ["v-fe31fcf2","/design-pattern/structural/adapter.html",{"d":1666051200000,"l":"2022年10月18日","c":["设计模式"],"g":["Go","结构型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/adapter/adapter-zh-2x.png\" alt=\"adapter\" tabindex=\"0\" loading=\"lazy\"><figcaption>adapter</figcaption></figure>\n","y":"a","t":"设计模式-适配器"},[":md"]],
  ["v-3f2078b3","/design-pattern/structural/bridge.html",{"d":1670630400000,"l":"2022年12月10日","c":["设计模式"],"g":["Go","结构型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/bridge/bridge-2x.png\" alt=\"bridge\" tabindex=\"0\" loading=\"lazy\"><figcaption>bridge</figcaption></figure>\n","y":"a","t":"设计模式-桥接"},[":md"]],
  ["v-603ac20f","/design-pattern/structural/composite.html",{"d":1670025600000,"l":"2022年12月3日","c":["设计模式"],"g":["Go","结构型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/composite/composite-2x.png\" alt=\"composite\" tabindex=\"0\" loading=\"lazy\"><figcaption>composite</figcaption></figure>\n","y":"a","t":"设计模式-组合"},[":md"]],
  ["v-038e6cdb","/design-pattern/structural/decorator.html",{"d":1670112000000,"l":"2022年12月4日","c":["设计模式"],"g":["Go","结构型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/decorator/decorator-2x.png\" alt=\"decorator\" tabindex=\"0\" loading=\"lazy\"><figcaption>decorator</figcaption></figure>\n","y":"a","t":"设计模式-装饰器"},[":md"]],
  ["v-09e1ee42","/design-pattern/structural/facade.html",{"d":1669939200000,"l":"2022年12月2日","c":["设计模式"],"g":["Go","结构型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/facade/facade-2x.png\" alt=\"facade\" tabindex=\"0\" loading=\"lazy\"><figcaption>facade</figcaption></figure>\n","y":"a","t":"设计模式-外观"},[":md"]],
  ["v-22607e6b","/design-pattern/structural/flyweight.html",{"d":1670284800000,"l":"2022年12月6日","c":["设计模式"],"g":["Go","结构型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/flyweight/flyweight-zh-2x.png\" alt=\"flyweight\" tabindex=\"0\" loading=\"lazy\"><figcaption>flyweight</figcaption></figure>\n","y":"a","t":"设计模式-享元"},[":md"]],
  ["v-556e7908","/design-pattern/structural/proxy.html",{"d":1670630400000,"l":"2022年12月10日","c":["设计模式"],"g":["Go","结构型模式"],"e":"<figure><img src=\"https://refactoringguru.cn/images/patterns/content/proxy/proxy-2x.png\" alt=\"proxy\" tabindex=\"0\" loading=\"lazy\"><figcaption>proxy</figcaption></figure>\n","y":"a","t":"设计模式-代理"},[":md"]],
  ["v-f2f01624","/system-design/security/auth.html",{"d":1663459200000,"l":"2022年9月18日","c":["系统设计"],"g":["系统设计"],"e":"<h2> 认证</h2>\n<blockquote>\n<p>我们有多种途径来保障应用的安全，例如：网咯隔离、设置防火墙、设置IP黑名单等。而<strong>认证</strong>是软件层面保护应用安全的一种措施。</p>\n<p>当前有四种认证方式，分别是：<code>Basic</code>、<code>Digest</code>、<code>OAuth</code>和<code>Bearer</code></p>\n</blockquote>\n<h3> Basic认证</h3>\n<blockquote>\n<p>Basic认证（基础认证）是一种简单的认证方式。将<code>用户名:密码</code>进行base64编码，放到HTTP Authorization Header中。</p>\n<p>但是base64不是加密技术，入侵者可以通过截获base64字符串，并反编码获取用户名和密码；其次即便进行了加密了用户名和密码，入侵者可以通过加重放攻击。</p>\n</blockquote>","y":"a","t":"认证方案"},[":md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},[]],
  ["v-70bc2959","/algorithm/",{"y":"p","t":"Algorithm"},[]],
  ["v-1a25d358","/monitor-system/",{"y":"p","t":"Monitor System"},[]],
  ["v-24f2d5ba","/network/",{"y":"p","t":"Network"},[]],
  ["v-e4cb1150","/other/",{"y":"p","t":"Other"},[]],
  ["v-6f604cf6","/project-standard/",{"y":"p","t":"Project Standard"},[]],
  ["v-7903f7cc","/system-design/",{"y":"p","t":"System Design"},[]],
  ["v-d440f426","/tools/",{"y":"p","t":"Tools"},[]],
  ["v-07322dea","/data-structure/tree/",{"y":"p","t":"Tree"},[]],
  ["v-8845e9f4","/data-structure/",{"y":"p","t":"Data Structure"},[]],
  ["v-5b28bbb3","/go-language/base/",{"y":"p","t":"Base"},[]],
  ["v-4217f7de","/go-language/recommend/",{"y":"p","t":"Recommend"},[]],
  ["v-d2e9a280","/go-language/reprint/",{"y":"p","t":"Reprint"},[]],
  ["v-21ba2ec8","/database/mysql/",{"y":"p","t":"Mysql"},[]],
  ["v-2e25198a","/database/",{"y":"p","t":"Database"},[]],
  ["v-29932942","/design-pattern/function/",{"y":"p","t":"Function"},[]],
  ["v-5ac47ea3","/system-design/security/",{"y":"p","t":"Security"},[]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0},[]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0},[]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0},[]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0},[]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0},[]],
  ["v-00e8af2c","/category/go%E8%AF%AD%E8%A8%80/",{"y":"p","t":"Go语言 分类","I":0},["/category/go语言/"]],
  ["v-0da0c339","/tag/go/",{"y":"p","t":"标签: Go","I":0},[]],
  ["v-41590e77","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"设计模式 分类","I":0},["/category/设计模式/"]],
  ["v-14748cc9","/tag/%E5%9F%BA%E7%A1%80/",{"y":"p","t":"标签: 基础","I":0},["/tag/基础/"]],
  ["v-5ff6b5a3","/category/%E7%BD%91%E7%BB%9C/",{"y":"p","t":"网络 分类","I":0},["/category/网络/"]],
  ["v-05b88e01","/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"标签: 设计模式","I":0},["/tag/设计模式/"]],
  ["v-63806412","/category/%E8%BD%AC%E8%BD%BD/",{"y":"p","t":"转载 分类","I":0},["/category/转载/"]],
  ["v-27b58dd8","/tag/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/",{"y":"p","t":"标签: 设计原则","I":0},["/tag/设计原则/"]],
  ["v-675ee68a","/category/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/",{"y":"p","t":"项目规范 分类","I":0},["/category/项目规范/"]],
  ["v-1c6b640a","/tag/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/",{"y":"p","t":"标签: 代码质量","I":0},["/tag/代码质量/"]],
  ["v-0d7069e8","/category/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/",{"y":"p","t":"系统设计 分类","I":0},["/category/系统设计/"]],
  ["v-921953d4","/tag/websocket/",{"y":"p","t":"标签: WebSocket","I":0},[]],
  ["v-14145d44","/category/%E5%B7%A5%E5%85%B7/",{"y":"p","t":"工具 分类","I":0},["/category/工具/"]],
  ["v-8443a546","/tag/%E8%B4%A2%E5%AF%8C/",{"y":"p","t":"标签: 财富","I":0},["/tag/财富/"]],
  ["v-5e0b61bd","/category/%E6%95%B0%E6%8D%AE%E5%BA%93/",{"y":"p","t":"数据库 分类","I":0},["/category/数据库/"]],
  ["v-63d1af66","/tag/%E5%81%A5%E5%BA%B7/",{"y":"p","t":"标签: 健康","I":0},["/tag/健康/"]],
  ["v-3a134560","/tag/%E5%8D%9A%E5%AE%A2/",{"y":"p","t":"标签: 博客","I":0},["/tag/博客/"]],
  ["v-164455b7","/tag/%E8%A7%84%E8%8C%83/",{"y":"p","t":"标签: 规范","I":0},["/tag/规范/"]],
  ["v-490548e5","/tag/%E6%8E%A5%E5%8F%A3/",{"y":"p","t":"标签: 接口","I":0},["/tag/接口/"]],
  ["v-385670f4","/tag/%E5%88%86%E6%94%AF/",{"y":"p","t":"标签: 分支","I":0},["/tag/分支/"]],
  ["v-2a2db4a2","/tag/%E9%A1%B9%E7%9B%AE/",{"y":"p","t":"标签: 项目","I":0},["/tag/项目/"]],
  ["v-33b6876e","/tag/%E7%89%88%E6%9C%AC/",{"y":"p","t":"标签: 版本","I":0},["/tag/版本/"]],
  ["v-b30bf2f6","/tag/lua/",{"y":"p","t":"标签: Lua","I":0},[]],
  ["v-0d1f4c3c","/tag/redis/",{"y":"p","t":"标签: Redis","I":0},[]],
  ["v-200c1937","/tag/vscode/",{"y":"p","t":"标签: vscode","I":0},[]],
  ["v-46b9d66c","/tag/leetcode/",{"y":"p","t":"标签: leetcode","I":0},[]],
  ["v-50c2828c","/tag/%E6%8F%92%E4%BB%B6/",{"y":"p","t":"标签: 插件","I":0},["/tag/插件/"]],
  ["v-1fdcff68","/tag/%E5%B7%A5%E5%85%B7/",{"y":"p","t":"标签: 工具","I":0},["/tag/工具/"]],
  ["v-2e7692e4","/tag/%E5%AE%89%E5%85%A8/",{"y":"p","t":"标签: 安全","I":0},["/tag/安全/"]],
  ["v-1bee38ca","/tag/mysql/",{"y":"p","t":"标签: MySQL","I":0},[]],
  ["v-25365ef3","/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/",{"y":"p","t":"标签: 数据库","I":0},["/tag/数据库/"]],
  ["v-6ebee387","/tag/%E7%B4%A2%E5%BC%95/",{"y":"p","t":"标签: 索引","I":0},["/tag/索引/"]],
  ["v-8d352ffe","/tag/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"标签: 行为型模式","I":0},["/tag/行为型模式/"]],
  ["v-26dc13ed","/tag/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"标签: 创建型模式","I":0},["/tag/创建型模式/"]],
  ["v-66c3bdde","/tag/%E5%87%BD%E6%95%B0%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"标签: 函数模式","I":0},["/tag/函数模式/"]],
  ["v-341a0f2c","/tag/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"标签: 结构型模式","I":0},["/tag/结构型模式/"]],
  ["v-84b16ad4","/tag/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/",{"y":"p","t":"标签: 系统设计","I":0},["/tag/系统设计/"]],
]
