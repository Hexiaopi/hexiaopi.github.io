export const data = JSON.parse("{\"key\":\"v-18b42cf7\",\"path\":\"/data-structure/tree/binary-search-tree.html\",\"title\":\"二叉搜索树\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"二叉搜索树 简介 二叉搜索树（Binary Search Tree,BST）又叫二叉排序树，基于二分法查找思想设计的树。它的定义如下： 它是一棵二叉树 左子树的所有节点的值都小于它的根节点，右子树的所有节点的值都大于它的根节点 左右子树也是一棵二叉搜索树 增加节点 func (n *Node) Add(value int) { \\tif value &gt; n.Data { \\t\\tif n.Right == nil { \\t\\t\\tn.Right = &amp;Node{ \\t\\t\\t\\tLeft: nil, \\t\\t\\t\\tData: value, \\t\\t\\t\\tRight: nil, \\t\\t\\t} \\t\\t} else { \\t\\t\\tn.Right.Add(value) \\t\\t} \\t} else if value &lt; n.Data { \\t\\tif n.Left == nil { \\t\\t\\tn.Left = &amp;Node{ \\t\\t\\t\\tLeft: nil, \\t\\t\\t\\tData: value, \\t\\t\\t\\tRight: nil, \\t\\t\\t} \\t\\t} else { \\t\\t\\tn.Left.Add(value) \\t\\t} \\t} else { \\t\\tfmt.Println(value, \\\" already exist\\\") \\t} }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://Hexiaopi.github.io/data-structure/tree/binary-search-tree.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Hexiaopi\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"二叉搜索树\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"二叉搜索树 简介 二叉搜索树（Binary Search Tree,BST）又叫二叉排序树，基于二分法查找思想设计的树。它的定义如下： 它是一棵二叉树 左子树的所有节点的值都小于它的根节点，右子树的所有节点的值都大于它的根节点 左右子树也是一棵二叉搜索树 增加节点 func (n *Node) Add(value int) { \\tif value &gt; n.Data { \\t\\tif n.Right == nil { \\t\\t\\tn.Right = &amp;Node{ \\t\\t\\t\\tLeft: nil, \\t\\t\\t\\tData: value, \\t\\t\\t\\tRight: nil, \\t\\t\\t} \\t\\t} else { \\t\\t\\tn.Right.Add(value) \\t\\t} \\t} else if value &lt; n.Data { \\t\\tif n.Left == nil { \\t\\t\\tn.Left = &amp;Node{ \\t\\t\\t\\tLeft: nil, \\t\\t\\t\\tData: value, \\t\\t\\t\\tRight: nil, \\t\\t\\t} \\t\\t} else { \\t\\t\\tn.Left.Add(value) \\t\\t} \\t} else { \\t\\tfmt.Println(value, \\\" already exist\\\") \\t} }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Hexiaopi\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"二叉搜索树\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Hexiaopi\\\",\\\"url\\\":\\\"https://github.com/Hexiaopi\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"简介\",\"slug\":\"简介\",\"link\":\"#简介\",\"children\":[]},{\"level\":2,\"title\":\"增加节点\",\"slug\":\"增加节点\",\"link\":\"#增加节点\",\"children\":[]},{\"level\":2,\"title\":\"查找节点\",\"slug\":\"查找节点\",\"link\":\"#查找节点\",\"children\":[]},{\"level\":2,\"title\":\"删除节点\",\"slug\":\"删除节点\",\"link\":\"#删除节点\",\"children\":[{\"level\":3,\"title\":\"递归版本\",\"slug\":\"递归版本\",\"link\":\"#递归版本\",\"children\":[]}]}],\"readingTime\":{\"minutes\":1.79,\"words\":537},\"filePathRelative\":\"data-structure/tree/binary-search-tree.md\",\"excerpt\":\"<h1> 二叉搜索树</h1>\\n<h2> 简介</h2>\\n<blockquote>\\n<p>二叉搜索树（Binary Search Tree,BST）又叫二叉排序树，基于二分法查找思想设计的树。它的定义如下：</p>\\n<ol>\\n<li>它是一棵二叉树</li>\\n<li>左子树的所有节点的值都小于它的根节点，右子树的所有节点的值都大于它的根节点</li>\\n<li>左右子树也是一棵二叉搜索树</li>\\n</ol>\\n</blockquote>\\n<h2> 增加节点</h2>\\n<div class=\\\"language-go line-numbers-mode\\\" data-ext=\\\"go\\\"><pre class=\\\"language-go\\\"><code><span class=\\\"token keyword\\\">func</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">*</span>Node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">if</span> value <span class=\\\"token operator\\\">&gt;</span> n<span class=\\\"token punctuation\\\">.</span>Data <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> n<span class=\\\"token punctuation\\\">.</span>Right <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">nil</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tn<span class=\\\"token punctuation\\\">.</span>Right <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&amp;</span>Node<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\tLeft<span class=\\\"token punctuation\\\">:</span>  <span class=\\\"token boolean\\\">nil</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tData<span class=\\\"token punctuation\\\">:</span>  value<span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tRight<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">nil</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tn<span class=\\\"token punctuation\\\">.</span>Right<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> value <span class=\\\"token operator\\\">&lt;</span> n<span class=\\\"token punctuation\\\">.</span>Data <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">if</span> n<span class=\\\"token punctuation\\\">.</span>Left <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">nil</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tn<span class=\\\"token punctuation\\\">.</span>Left <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">&amp;</span>Node<span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t\\tLeft<span class=\\\"token punctuation\\\">:</span>  <span class=\\\"token boolean\\\">nil</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tData<span class=\\\"token punctuation\\\">:</span>  value<span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t\\tRight<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">nil</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\tn<span class=\\\"token punctuation\\\">.</span>Left<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Add</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span>\\n\\t<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Println</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\" already exist\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
